
CONTROL_ECU_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002b3c  00002bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800090  00800090  00002c00  2**0
                  ALLOC
  3 .stab         00002df0  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001641  00000000  00000000  000059f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007031  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007171  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000072e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000abc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000afb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b77f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 14 	call	0x2874	; 0x2874 <main>
      8a:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
#include "gpio.h"
#include "buzzer.h"
#include "std_types.h"

void Buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 6d 06 	call	0xcda	; 0xcda <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <EEPROM_writeByte>:
 *      Author: Dell
 */
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 address,uint8 data){
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <EEPROM_writeByte+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <EEPROM_writeByte+0x8>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	9a 83       	std	Y+2, r25	; 0x02
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	6b 83       	std	Y+3, r22	; 0x03
	/*send the start bit*/
	TWI_start();
     baa:	0e 94 ca 09 	call	0x1394	; 0x1394 <TWI_start>

	/*if the status is wrong stop the program*/
	if(TWI_getStatus()!=TWI_START)
     bae:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	11 f0       	breq	.+4      	; 0xbba <EEPROM_writeByte+0x22>
		return ERROR;
     bb6:	1c 82       	std	Y+4, r1	; 0x04
     bb8:	28 c0       	rjmp	.+80     	; 0xc0a <EEPROM_writeByte+0x72>

	/*send the memory address, the most significant 4 bits in the EEPROM are fixed = 1010*/
	TWI_writeByte((uint8)(0xA0 | ((address&0x0700)>>7)));
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	80 70       	andi	r24, 0x00	; 0
     bc0:	97 70       	andi	r25, 0x07	; 7
     bc2:	88 0f       	add	r24, r24
     bc4:	89 2f       	mov	r24, r25
     bc6:	88 1f       	adc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	91 95       	neg	r25
     bcc:	80 6a       	ori	r24, 0xA0	; 160
     bce:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_SLA_W_ACK)
     bd2:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     bd6:	88 31       	cpi	r24, 0x18	; 24
     bd8:	11 f0       	breq	.+4      	; 0xbde <EEPROM_writeByte+0x46>
		return ERROR;
     bda:	1c 82       	std	Y+4, r1	; 0x04
     bdc:	16 c0       	rjmp	.+44     	; 0xc0a <EEPROM_writeByte+0x72>
	/*Send the least significant 8 bits of the EEPROM address.*/
	TWI_writeByte((uint8)address); // casted to uint8
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_DATA_ACK)
     be4:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     be8:	88 32       	cpi	r24, 0x28	; 40
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_writeByte+0x58>
		return ERROR;
     bec:	1c 82       	std	Y+4, r1	; 0x04
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <EEPROM_writeByte+0x72>

	/*Send the data to be stored in that address*/
	TWI_writeByte(data);
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_DATA_ACK)
     bf6:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     bfa:	88 32       	cpi	r24, 0x28	; 40
     bfc:	11 f0       	breq	.+4      	; 0xc02 <EEPROM_writeByte+0x6a>
		return ERROR;
     bfe:	1c 82       	std	Y+4, r1	; 0x04
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <EEPROM_writeByte+0x72>

	TWI_STOP();
     c02:	0e 94 da 09 	call	0x13b4	; 0x13b4 <TWI_STOP>
	return SUCCESS;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8c 83       	std	Y+4, r24	; 0x04
     c0a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 address,uint8 *data){
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <EEPROM_readByte+0x6>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <EEPROM_readByte+0x8>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	7c 83       	std	Y+4, r23	; 0x04
     c2e:	6b 83       	std	Y+3, r22	; 0x03
	/*send the start bit*/
	TWI_start();
     c30:	0e 94 ca 09 	call	0x1394	; 0x1394 <TWI_start>

	/*if the status is wrong stop the program*/
	if (TWI_getStatus() != TWI_START)
     c34:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	11 f0       	breq	.+4      	; 0xc40 <EEPROM_readByte+0x26>
		return ERROR;
     c3c:	1d 82       	std	Y+5, r1	; 0x05
     c3e:	44 c0       	rjmp	.+136    	; 0xcc8 <EEPROM_readByte+0xae>

	/*
	 * send the memory address, the most significant 4 bits in the EEPROM are fixed = 1010.
	 * R/W=0 (write).
	*/
	TWI_writeByte((uint8) (0xA0 | ((address & 0x0700) >> 7)));
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	80 70       	andi	r24, 0x00	; 0
     c46:	97 70       	andi	r25, 0x07	; 7
     c48:	88 0f       	add	r24, r24
     c4a:	89 2f       	mov	r24, r25
     c4c:	88 1f       	adc	r24, r24
     c4e:	99 0b       	sbc	r25, r25
     c50:	91 95       	neg	r25
     c52:	80 6a       	ori	r24, 0xA0	; 160
     c54:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c58:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     c5c:	88 31       	cpi	r24, 0x18	; 24
     c5e:	11 f0       	breq	.+4      	; 0xc64 <EEPROM_readByte+0x4a>
		return ERROR;
     c60:	1d 82       	std	Y+5, r1	; 0x05
     c62:	32 c0       	rjmp	.+100    	; 0xcc8 <EEPROM_readByte+0xae>

	/*Send the least significant 8 bits of the EEPROM address.*/
	TWI_writeByte((uint8)address); // casted to uint8
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c6a:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     c6e:	88 32       	cpi	r24, 0x28	; 40
     c70:	11 f0       	breq	.+4      	; 0xc76 <EEPROM_readByte+0x5c>
		return ERROR;
     c72:	1d 82       	std	Y+5, r1	; 0x05
     c74:	29 c0       	rjmp	.+82     	; 0xcc8 <EEPROM_readByte+0xae>


	/*send the repeated start bit */
	TWI_start();
     c76:	0e 94 ca 09 	call	0x1394	; 0x1394 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
     c7a:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     c7e:	80 31       	cpi	r24, 0x10	; 16
     c80:	11 f0       	breq	.+4      	; 0xc86 <EEPROM_readByte+0x6c>
		return ERROR;
     c82:	1d 82       	std	Y+5, r1	; 0x05
     c84:	21 c0       	rjmp	.+66     	; 0xcc8 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8) ((0xA0) | ((address & 0x0700) >> 7) | 1));
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	80 70       	andi	r24, 0x00	; 0
     c8c:	97 70       	andi	r25, 0x07	; 7
     c8e:	88 0f       	add	r24, r24
     c90:	89 2f       	mov	r24, r25
     c92:	88 1f       	adc	r24, r24
     c94:	99 0b       	sbc	r25, r25
     c96:	91 95       	neg	r25
     c98:	81 6a       	ori	r24, 0xA1	; 161
     c9a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     c9e:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     ca2:	80 34       	cpi	r24, 0x40	; 64
     ca4:	11 f0       	breq	.+4      	; 0xcaa <EEPROM_readByte+0x90>
		return ERROR;
     ca6:	1d 82       	std	Y+5, r1	; 0x05
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*data = TWI_readByteWithNACK();
     caa:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_readByteWithNACK>
     cae:	eb 81       	ldd	r30, Y+3	; 0x03
     cb0:	fc 81       	ldd	r31, Y+4	; 0x04
     cb2:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
     cb4:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_getStatus>
     cb8:	88 35       	cpi	r24, 0x58	; 88
     cba:	11 f0       	breq	.+4      	; 0xcc0 <EEPROM_readByte+0xa6>
		return ERROR;
     cbc:	1d 82       	std	Y+5, r1	; 0x05
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_STOP();
     cc0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <TWI_STOP>

	return SUCCESS;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	8d 83       	std	Y+5, r24	; 0x05
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <GPIO_setupPinDirection+0x6>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <GPIO_setupPinDirection+0x8>
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	6a 83       	std	Y+2, r22	; 0x02
     cec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	88 30       	cpi	r24, 0x08	; 8
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <GPIO_setupPinDirection+0x1c>
     cf4:	d5 c0       	rjmp	.+426    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <GPIO_setupPinDirection+0x24>
     cfc:	d1 c0       	rjmp	.+418    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	3d 83       	std	Y+5, r19	; 0x05
     d06:	2c 83       	std	Y+4, r18	; 0x04
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	91 05       	cpc	r25, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <GPIO_setupPinDirection+0x3a>
     d12:	43 c0       	rjmp	.+134    	; 0xd9a <GPIO_setupPinDirection+0xc0>
     d14:	2c 81       	ldd	r18, Y+4	; 0x04
     d16:	3d 81       	ldd	r19, Y+5	; 0x05
     d18:	22 30       	cpi	r18, 0x02	; 2
     d1a:	31 05       	cpc	r19, r1
     d1c:	2c f4       	brge	.+10     	; 0xd28 <GPIO_setupPinDirection+0x4e>
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	9d 81       	ldd	r25, Y+5	; 0x05
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	71 f0       	breq	.+28     	; 0xd42 <GPIO_setupPinDirection+0x68>
     d26:	bc c0       	rjmp	.+376    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
     d28:	2c 81       	ldd	r18, Y+4	; 0x04
     d2a:	3d 81       	ldd	r19, Y+5	; 0x05
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <GPIO_setupPinDirection+0x5a>
     d32:	5f c0       	rjmp	.+190    	; 0xdf2 <GPIO_setupPinDirection+0x118>
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	83 30       	cpi	r24, 0x03	; 3
     d3a:	91 05       	cpc	r25, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <GPIO_setupPinDirection+0x66>
     d3e:	85 c0       	rjmp	.+266    	; 0xe4a <GPIO_setupPinDirection+0x170>
     d40:	af c0       	rjmp	.+350    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	a1 f4       	brne	.+40     	; 0xd70 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d48:	aa e3       	ldi	r26, 0x3A	; 58
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	ea e3       	ldi	r30, 0x3A	; 58
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 2e       	mov	r0, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <GPIO_setupPinDirection+0x8c>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <GPIO_setupPinDirection+0x88>
     d6a:	84 2b       	or	r24, r20
     d6c:	8c 93       	st	X, r24
     d6e:	98 c0       	rjmp	.+304    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d70:	aa e3       	ldi	r26, 0x3A	; 58
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ea e3       	ldi	r30, 0x3A	; 58
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <GPIO_setupPinDirection+0xb4>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <GPIO_setupPinDirection+0xb0>
     d92:	80 95       	com	r24
     d94:	84 23       	and	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	83 c0       	rjmp	.+262    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	a1 f4       	brne	.+40     	; 0xdc8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     da0:	a7 e3       	ldi	r26, 0x37	; 55
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e3       	ldi	r30, 0x37	; 55
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <GPIO_setupPinDirection+0xe4>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <GPIO_setupPinDirection+0xe0>
     dc2:	84 2b       	or	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	6c c0       	rjmp	.+216    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     dc8:	a7 e3       	ldi	r26, 0x37	; 55
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e7 e3       	ldi	r30, 0x37	; 55
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <GPIO_setupPinDirection+0x10c>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <GPIO_setupPinDirection+0x108>
     dea:	80 95       	com	r24
     dec:	84 23       	and	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	57 c0       	rjmp	.+174    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	a1 f4       	brne	.+40     	; 0xe20 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     df8:	a4 e3       	ldi	r26, 0x34	; 52
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e3       	ldi	r30, 0x34	; 52
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_setupPinDirection+0x13c>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_setupPinDirection+0x138>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	40 c0       	rjmp	.+128    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e20:	a4 e3       	ldi	r26, 0x34	; 52
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e4 e3       	ldi	r30, 0x34	; 52
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_setupPinDirection+0x164>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_setupPinDirection+0x160>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	2b c0       	rjmp	.+86     	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	a1 f4       	brne	.+40     	; 0xe78 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e50:	a1 e3       	ldi	r26, 0x31	; 49
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e1 e3       	ldi	r30, 0x31	; 49
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <GPIO_setupPinDirection+0x194>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <GPIO_setupPinDirection+0x190>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	14 c0       	rjmp	.+40     	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e78:	a1 e3       	ldi	r26, 0x31	; 49
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e1 e3       	ldi	r30, 0x31	; 49
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_setupPinDirection+0x1bc>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_setupPinDirection+0x1b8>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <GPIO_writePin+0x6>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <GPIO_writePin+0x8>
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	6a 83       	std	Y+2, r22	; 0x02
     ec2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	88 30       	cpi	r24, 0x08	; 8
     ec8:	08 f0       	brcs	.+2      	; 0xecc <GPIO_writePin+0x1c>
     eca:	d5 c0       	rjmp	.+426    	; 0x1076 <GPIO_writePin+0x1c6>
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <GPIO_writePin+0x24>
     ed2:	d1 c0       	rjmp	.+418    	; 0x1076 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3d 83       	std	Y+5, r19	; 0x05
     edc:	2c 83       	std	Y+4, r18	; 0x04
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	9d 81       	ldd	r25, Y+5	; 0x05
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <GPIO_writePin+0x3a>
     ee8:	43 c0       	rjmp	.+134    	; 0xf70 <GPIO_writePin+0xc0>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <GPIO_writePin+0x4e>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	71 f0       	breq	.+28     	; 0xf18 <GPIO_writePin+0x68>
     efc:	bc c0       	rjmp	.+376    	; 0x1076 <GPIO_writePin+0x1c6>
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <GPIO_writePin+0x5a>
     f08:	5f c0       	rjmp	.+190    	; 0xfc8 <GPIO_writePin+0x118>
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <GPIO_writePin+0x66>
     f14:	85 c0       	rjmp	.+266    	; 0x1020 <GPIO_writePin+0x170>
     f16:	af c0       	rjmp	.+350    	; 0x1076 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f1e:	ab e3       	ldi	r26, 0x3B	; 59
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e3       	ldi	r30, 0x3B	; 59
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_writePin+0x8c>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_writePin+0x88>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	98 c0       	rjmp	.+304    	; 0x1076 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f46:	ab e3       	ldi	r26, 0x3B	; 59
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	eb e3       	ldi	r30, 0x3B	; 59
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_writePin+0xb4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_writePin+0xb0>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	83 c0       	rjmp	.+262    	; 0x1076 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f76:	a8 e3       	ldi	r26, 0x38	; 56
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e8 e3       	ldi	r30, 0x38	; 56
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <GPIO_writePin+0xe4>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <GPIO_writePin+0xe0>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	6c c0       	rjmp	.+216    	; 0x1076 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_writePin+0x10c>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_writePin+0x108>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	57 c0       	rjmp	.+174    	; 0x1076 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     fce:	a5 e3       	ldi	r26, 0x35	; 53
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e3       	ldi	r30, 0x35	; 53
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_writePin+0x13c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_writePin+0x138>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     ff6:	a5 e3       	ldi	r26, 0x35	; 53
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e3       	ldi	r30, 0x35	; 53
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_writePin+0x164>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_writePin+0x160>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	2b c0       	rjmp	.+86     	; 0x1076 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1026:	a2 e3       	ldi	r26, 0x32	; 50
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_writePin+0x194>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_writePin+0x190>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    104e:	a2 e3       	ldi	r26, 0x32	; 50
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e2 e3       	ldi	r30, 0x32	; 50
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePin+0x1bc>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePin+0x1b8>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <GPIO_readPin+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <GPIO_readPin+0x8>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	8a 83       	std	Y+2, r24	; 0x02
    1096:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1098:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 30       	cpi	r24, 0x08	; 8
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <GPIO_readPin+0x1c>
    10a0:	84 c0       	rjmp	.+264    	; 0x11aa <GPIO_readPin+0x124>
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <GPIO_readPin+0x24>
    10a8:	80 c0       	rjmp	.+256    	; 0x11aa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	3d 83       	std	Y+5, r19	; 0x05
    10b2:	2c 83       	std	Y+4, r18	; 0x04
    10b4:	4c 81       	ldd	r20, Y+4	; 0x04
    10b6:	5d 81       	ldd	r21, Y+5	; 0x05
    10b8:	41 30       	cpi	r20, 0x01	; 1
    10ba:	51 05       	cpc	r21, r1
    10bc:	79 f1       	breq	.+94     	; 0x111c <GPIO_readPin+0x96>
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	9d 81       	ldd	r25, Y+5	; 0x05
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	91 05       	cpc	r25, r1
    10c6:	34 f4       	brge	.+12     	; 0x10d4 <GPIO_readPin+0x4e>
    10c8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ca:	3d 81       	ldd	r19, Y+5	; 0x05
    10cc:	21 15       	cp	r18, r1
    10ce:	31 05       	cpc	r19, r1
    10d0:	69 f0       	breq	.+26     	; 0x10ec <GPIO_readPin+0x66>
    10d2:	6b c0       	rjmp	.+214    	; 0x11aa <GPIO_readPin+0x124>
    10d4:	4c 81       	ldd	r20, Y+4	; 0x04
    10d6:	5d 81       	ldd	r21, Y+5	; 0x05
    10d8:	42 30       	cpi	r20, 0x02	; 2
    10da:	51 05       	cpc	r21, r1
    10dc:	b9 f1       	breq	.+110    	; 0x114c <GPIO_readPin+0xc6>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <GPIO_readPin+0x64>
    10e8:	49 c0       	rjmp	.+146    	; 0x117c <GPIO_readPin+0xf6>
    10ea:	5f c0       	rjmp	.+190    	; 0x11aa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10ec:	e9 e3       	ldi	r30, 0x39	; 57
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <GPIO_readPin+0x7e>
    1100:	55 95       	asr	r21
    1102:	47 95       	ror	r20
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <GPIO_readPin+0x7a>
    1108:	ca 01       	movw	r24, r20
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	90 70       	andi	r25, 0x00	; 0
    110e:	88 23       	and	r24, r24
    1110:	19 f0       	breq	.+6      	; 0x1118 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	49 c0       	rjmp	.+146    	; 0x11aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1118:	19 82       	std	Y+1, r1	; 0x01
    111a:	47 c0       	rjmp	.+142    	; 0x11aa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    111c:	e6 e3       	ldi	r30, 0x36	; 54
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <GPIO_readPin+0xae>
    1130:	55 95       	asr	r21
    1132:	47 95       	ror	r20
    1134:	8a 95       	dec	r24
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <GPIO_readPin+0xaa>
    1138:	ca 01       	movw	r24, r20
    113a:	81 70       	andi	r24, 0x01	; 1
    113c:	90 70       	andi	r25, 0x00	; 0
    113e:	88 23       	and	r24, r24
    1140:	19 f0       	breq	.+6      	; 0x1148 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	31 c0       	rjmp	.+98     	; 0x11aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	2f c0       	rjmp	.+94     	; 0x11aa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    114c:	e3 e3       	ldi	r30, 0x33	; 51
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_readPin+0xde>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_readPin+0xda>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	90 70       	andi	r25, 0x00	; 0
    116e:	88 23       	and	r24, r24
    1170:	19 f0       	breq	.+6      	; 0x1178 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	19 c0       	rjmp	.+50     	; 0x11aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	17 c0       	rjmp	.+46     	; 0x11aa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    117c:	e0 e3       	ldi	r30, 0x30	; 48
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_readPin+0x10e>
    1190:	55 95       	asr	r21
    1192:	47 95       	ror	r20
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_readPin+0x10a>
    1198:	ca 01       	movw	r24, r20
    119a:	81 70       	andi	r24, 0x01	; 1
    119c:	90 70       	andi	r25, 0x00	; 0
    119e:	88 23       	and	r24, r24
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11a8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <GPIO_setupPortDirection+0x6>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <GPIO_setupPortDirection+0x8>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	84 30       	cpi	r24, 0x04	; 4
    11d0:	90 f5       	brcc	.+100    	; 0x1236 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3c 83       	std	Y+4, r19	; 0x04
    11da:	2b 83       	std	Y+3, r18	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	d1 f0       	breq	.+52     	; 0x121a <GPIO_setupPortDirection+0x5e>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	2c f4       	brge	.+10     	; 0x11fa <GPIO_setupPortDirection+0x3e>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	61 f0       	breq	.+24     	; 0x1210 <GPIO_setupPortDirection+0x54>
    11f8:	1e c0       	rjmp	.+60     	; 0x1236 <GPIO_setupPortDirection+0x7a>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	81 f0       	breq	.+32     	; 0x1224 <GPIO_setupPortDirection+0x68>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	81 f0       	breq	.+32     	; 0x122e <GPIO_setupPortDirection+0x72>
    120e:	13 c0       	rjmp	.+38     	; 0x1236 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1210:	ea e3       	ldi	r30, 0x3A	; 58
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	80 83       	st	Z, r24
    1218:	0e c0       	rjmp	.+28     	; 0x1236 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    121a:	e7 e3       	ldi	r30, 0x37	; 55
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 83       	st	Z, r24
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1224:	e4 e3       	ldi	r30, 0x34	; 52
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    122e:	e1 e3       	ldi	r30, 0x31	; 49
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
			break;
		}
	}
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <GPIO_writePort+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <GPIO_writePort+0x8>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	90 f5       	brcc	.+100    	; 0x12be <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3c 83       	std	Y+4, r19	; 0x04
    1262:	2b 83       	std	Y+3, r18	; 0x03
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	d1 f0       	breq	.+52     	; 0x12a2 <GPIO_writePort+0x5e>
    126e:	2b 81       	ldd	r18, Y+3	; 0x03
    1270:	3c 81       	ldd	r19, Y+4	; 0x04
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <GPIO_writePort+0x3e>
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	61 f0       	breq	.+24     	; 0x1298 <GPIO_writePort+0x54>
    1280:	1e c0       	rjmp	.+60     	; 0x12be <GPIO_writePort+0x7a>
    1282:	2b 81       	ldd	r18, Y+3	; 0x03
    1284:	3c 81       	ldd	r19, Y+4	; 0x04
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <GPIO_writePort+0x68>
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	81 f0       	breq	.+32     	; 0x12b6 <GPIO_writePort+0x72>
    1296:	13 c0       	rjmp	.+38     	; 0x12be <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1298:	eb e3       	ldi	r30, 0x3B	; 59
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	80 83       	st	Z, r24
    12a0:	0e c0       	rjmp	.+28     	; 0x12be <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12a2:	e8 e3       	ldi	r30, 0x38	; 56
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	80 83       	st	Z, r24
    12aa:	09 c0       	rjmp	.+18     	; 0x12be <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12ac:	e5 e3       	ldi	r30, 0x35	; 53
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12b6:	e2 e3       	ldi	r30, 0x32	; 50
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <GPIO_readPort+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <GPIO_readPort+0x8>
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    12da:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	90 f5       	brcc	.+100    	; 0x1346 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3c 83       	std	Y+4, r19	; 0x04
    12ea:	2b 83       	std	Y+3, r18	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	d1 f0       	breq	.+52     	; 0x132a <GPIO_readPort+0x5e>
    12f6:	2b 81       	ldd	r18, Y+3	; 0x03
    12f8:	3c 81       	ldd	r19, Y+4	; 0x04
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	2c f4       	brge	.+10     	; 0x130a <GPIO_readPort+0x3e>
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	61 f0       	breq	.+24     	; 0x1320 <GPIO_readPort+0x54>
    1308:	1e c0       	rjmp	.+60     	; 0x1346 <GPIO_readPort+0x7a>
    130a:	2b 81       	ldd	r18, Y+3	; 0x03
    130c:	3c 81       	ldd	r19, Y+4	; 0x04
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	81 f0       	breq	.+32     	; 0x1334 <GPIO_readPort+0x68>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	91 05       	cpc	r25, r1
    131c:	81 f0       	breq	.+32     	; 0x133e <GPIO_readPort+0x72>
    131e:	13 c0       	rjmp	.+38     	; 0x1346 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1320:	e9 e3       	ldi	r30, 0x39	; 57
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	0e c0       	rjmp	.+28     	; 0x1346 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    132a:	e6 e3       	ldi	r30, 0x36	; 54
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1334:	e3 e3       	ldi	r30, 0x33	; 51
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    133e:	e0 e3       	ldi	r30, 0x30	; 48
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TWI_init>:

#include "i2c.h"
#include <avr/io.h>
#include "common_macros.h"

void TWI_init(const TWI_ConfigType *Config_Ptr) {
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <TWI_init+0x6>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Bit Rate: is set using zero pre-scaler TWPS=00 and F_CPU=8Mhz
	 * SCL frequency = F_CPU/(16+2(TWBR)*4^TWPS)
	 */
	TWBR = Config_Ptr->bit_rate;
    1364:	a0 e2       	ldi	r26, 0x20	; 32
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e9 81       	ldd	r30, Y+1	; 0x01
    136a:	fa 81       	ldd	r31, Y+2	; 0x02
    136c:	81 81       	ldd	r24, Z+1	; 0x01
    136e:	8c 93       	st	X, r24
	TWSR = 0x00;
    1370:	e1 e2       	ldi	r30, 0x21	; 33
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	10 82       	st	Z, r1
	/*set this MC address to the specified if any master wants to communicate with it*/
	TWAR = Config_Ptr->address;
    1376:	a2 e2       	ldi	r26, 0x22	; 34
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e9 81       	ldd	r30, Y+1	; 0x01
    137c:	fa 81       	ldd	r31, Y+2	; 0x02
    137e:	80 81       	ld	r24, Z
    1380:	8c 93       	st	X, r24
	/*enable the TWI*/
	TWCR = (1 << TWEN);
    1382:	e6 e5       	ldi	r30, 0x56	; 86
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	84 e0       	ldi	r24, 0x04	; 4
    1388:	80 83       	st	Z, r24
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <TWI_start>:

void TWI_start() {
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear TWINT bit before starting.
	 * Set TWSTA bit to send start condition.
	 * Enable TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    139c:	e6 e5       	ldi	r30, 0x56	; 86
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	84 ea       	ldi	r24, 0xA4	; 164
    13a2:	80 83       	st	Z, r24
	/*Wait until the start bit is sent (until SWINT bit is set)*/
	while (BIT_IS_CLEAR(TWCR, TWINT))
    13a4:	e6 e5       	ldi	r30, 0x56	; 86
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 23       	and	r24, r24
    13ac:	dc f7       	brge	.-10     	; 0x13a4 <TWI_start+0x10>
		;
}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <TWI_STOP>:

void TWI_STOP() {
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear TWINT bit before stopping.
	 * Set TWSTO bit to send stop condition.
	 * Enable TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    13bc:	e6 e5       	ldi	r30, 0x56	; 86
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	84 e9       	ldi	r24, 0x94	; 148
    13c2:	80 83       	st	Z, r24
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <TWI_writeByte>:

void TWI_writeByte(uint8 data) {
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	89 83       	std	Y+1, r24	; 0x01
	while (!(TWCR & (1 << TWINT)))
    13d6:	e6 e5       	ldi	r30, 0x56	; 86
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	88 23       	and	r24, r24
    13de:	dc f7       	brge	.-10     	; 0x13d6 <TWI_writeByte+0xc>
		;
	/*Put the data in the TWI data register*/
	TWDR = data;
    13e0:	e3 e2       	ldi	r30, 0x23	; 35
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	80 83       	st	Z, r24
	/*Clear the TWINT bit and enable TWI module*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    13e8:	e6 e5       	ldi	r30, 0x56	; 86
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	84 e8       	ldi	r24, 0x84	; 132
    13ee:	80 83       	st	Z, r24
	/*Wait until TWINT bit is high (data is sent successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    13f0:	e6 e5       	ldi	r30, 0x56	; 86
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 23       	and	r24, r24
    13f8:	dc f7       	brge	.-10     	; 0x13f0 <TWI_writeByte+0x26>
		;
}
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK() {
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear TWINT bit.
	 * Set TWEA bit to send ACK after receiving data.
	 * Enable TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    140a:	e6 e5       	ldi	r30, 0x56	; 86
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	84 ec       	ldi	r24, 0xC4	; 196
    1410:	80 83       	st	Z, r24
	/*Wait until TWINT bit is high (data is received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1412:	e6 e5       	ldi	r30, 0x56	; 86
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	88 23       	and	r24, r24
    141a:	dc f7       	brge	.-10     	; 0x1412 <TWI_readByteWithACK+0x10>
		;
	return TWDR;
    141c:	e3 e2       	ldi	r30, 0x23	; 35
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK() {
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear TWINT bit.
	 * clear TWEA bit to send NACK after receiving data.
	 * Enable TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1430:	e6 e5       	ldi	r30, 0x56	; 86
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	84 e8       	ldi	r24, 0x84	; 132
    1436:	80 83       	st	Z, r24
	/*Wait until TWINT bit is high (data is received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1438:	e6 e5       	ldi	r30, 0x56	; 86
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 23       	and	r24, r24
    1440:	dc f7       	brge	.-10     	; 0x1438 <TWI_readByteWithNACK+0x10>
		;
	return TWDR;
    1442:	e3 e2       	ldi	r30, 0x23	; 35
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <TWI_getStatus>:
uint8 TWI_getStatus() {
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	/*Get the last 5 bits in the status register*/
	return TWSR & 0xF8;
    1456:	e1 e2       	ldi	r30, 0x21	; 33
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	88 7f       	andi	r24, 0xF8	; 248
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <DcMotor_Init>:

/*Description:
 *  Set up DC motor input pins (output pins for the microcontroller).
 *  Make the DC motor OFF initially.
 */
void DcMotor_Init(void) {
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_IN1_PIN, PIN_OUTPUT);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 6d 06 	call	0xcda	; 0xcda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_IN2_PIN, PIN_OUTPUT);
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 6d 06 	call	0xcda	; 0xcda <GPIO_setupPinDirection>

	/*DC motor initial state is OFF*/
	GPIO_writePin(DC_MOTOR_PORT, DC_IN1_PIN, LOGIC_LOW);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, DC_IN2_PIN, LOGIC_LOW);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>

}
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <DcMotor_Rotate>:

/*Description:
 *  Configure DC motor state.
 *  Call PWM function with the required duty cycle.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed) {
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DcMotor_Rotate+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DcMotor_Rotate+0x8>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3c 83       	std	Y+4, r19	; 0x04
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	a1 f0       	breq	.+40     	; 0x14e6 <DcMotor_Rotate+0x4c>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	d1 f0       	breq	.+52     	; 0x14fc <DcMotor_Rotate+0x62>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	01 f5       	brne	.+64     	; 0x1510 <DcMotor_Rotate+0x76>
	case Stop:
		GPIO_writePin(DC_MOTOR_PORT, DC_IN1_PIN, LOGIC_LOW);
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_IN2_PIN, LOGIC_LOW);
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
    14e4:	15 c0       	rjmp	.+42     	; 0x1510 <DcMotor_Rotate+0x76>
		break;
	case Clockwise:
		GPIO_writePin(DC_MOTOR_PORT, DC_IN1_PIN, LOGIC_HIGH);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_IN2_PIN, LOGIC_LOW);
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
    14fa:	0a c0       	rjmp	.+20     	; 0x1510 <DcMotor_Rotate+0x76>
		break;
	case Anticlockwise:
		GPIO_writePin(DC_MOTOR_PORT, DC_IN1_PIN, LOGIC_LOW);
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_IN2_PIN, LOGIC_HIGH);
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	61 e0       	ldi	r22, 0x01	; 1
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
		break;
	}

	Timer0_PWM_Init(speed);
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	0e 94 46 0b 	call	0x168c	; 0x168c <Timer0_PWM_Init>
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <Timer1_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <Timer1_init+0x6>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01

	if (Config_Ptr -> mode == ctc_mode)
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	85 81       	ldd	r24, Z+5	; 0x05
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	81 f4       	brne	.+32     	; 0x155c <Timer1_init+0x38>
	{
		SET_BIT(TIMSK, OCIE1A); /* Enable Timer1 Compare A Interrupt */
    153c:	a9 e5       	ldi	r26, 0x59	; 89
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e9 e5       	ldi	r30, 0x59	; 89
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 61       	ori	r24, 0x10	; 16
    1548:	8c 93       	st	X, r24
		OCR1A = Config_Ptr-> compare_value;
    154a:	aa e4       	ldi	r26, 0x4A	; 74
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e9 81       	ldd	r30, Y+1	; 0x01
    1550:	fa 81       	ldd	r31, Y+2	; 0x02
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	9c 93       	st	X, r25
    155a:	8e 93       	st	-X, r24

	}
	if (Config_Ptr->mode == normal_mode) {
    155c:	e9 81       	ldd	r30, Y+1	; 0x01
    155e:	fa 81       	ldd	r31, Y+2	; 0x02
    1560:	85 81       	ldd	r24, Z+5	; 0x05
    1562:	88 23       	and	r24, r24
    1564:	39 f4       	brne	.+14     	; 0x1574 <Timer1_init+0x50>
		TIMSK |= (1 << TOIE0); // Enable Timer0 Overflow Interrupt
    1566:	a9 e5       	ldi	r26, 0x59	; 89
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e9 e5       	ldi	r30, 0x59	; 89
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	8c 93       	st	X, r24
	}
	// 1110 0111
	TCCR1A = (1<<FOC1A);
    1574:	ef e4       	ldi	r30, 0x4F	; 79
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	88 e0       	ldi	r24, 0x08	; 8
    157a:	80 83       	st	Z, r24

	//Mode
	TCCR1A = (TCCR1A & 0xFC) | (Config_Ptr->mode);
    157c:	af e4       	ldi	r26, 0x4F	; 79
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	ef e4       	ldi	r30, 0x4F	; 79
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	98 2f       	mov	r25, r24
    1588:	9c 7f       	andi	r25, 0xFC	; 252
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	85 81       	ldd	r24, Z+5	; 0x05
    1590:	89 2b       	or	r24, r25
    1592:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | (Config_Ptr->mode);
    1594:	ae e4       	ldi	r26, 0x4E	; 78
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ee e4       	ldi	r30, 0x4E	; 78
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	98 2f       	mov	r25, r24
    15a0:	97 7e       	andi	r25, 0xE7	; 231
    15a2:	e9 81       	ldd	r30, Y+1	; 0x01
    15a4:	fa 81       	ldd	r31, Y+2	; 0x02
    15a6:	85 81       	ldd	r24, Z+5	; 0x05
    15a8:	89 2b       	or	r24, r25
    15aa:	8c 93       	st	X, r24

	//prescaler 1111 1000
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    15ac:	ae e4       	ldi	r26, 0x4E	; 78
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ee e4       	ldi	r30, 0x4E	; 78
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	98 2f       	mov	r25, r24
    15b8:	98 7f       	andi	r25, 0xF8	; 248
    15ba:	e9 81       	ldd	r30, Y+1	; 0x01
    15bc:	fa 81       	ldd	r31, Y+2	; 0x02
    15be:	84 81       	ldd	r24, Z+4	; 0x04
    15c0:	89 2b       	or	r24, r25
    15c2:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
    15c4:	ac e4       	ldi	r26, 0x4C	; 76
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ca:	fa 81       	ldd	r31, Y+2	; 0x02
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	11 96       	adiw	r26, 0x01	; 1
    15d2:	9c 93       	st	X, r25
    15d4:	8e 93       	st	-X, r24

}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <Timer1_deInit>:


void Timer1_deInit(void)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    15e8:	ef e4       	ldi	r30, 0x4F	; 79
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	10 82       	st	Z, r1
	TCCR1B = 0;
    15ee:	ee e4       	ldi	r30, 0x4E	; 78
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	10 82       	st	Z, r1
	g_callBackPtr = NULL_PTR;
    15f4:	10 92 91 00 	sts	0x0091, r1
    15f8:	10 92 90 00 	sts	0x0090, r1

}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <Timer1_setCallBackFunction>:

void Timer1_setCallBackFunction(void(*a_ptr)(void))
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <Timer1_setCallBackFunction+0x6>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	90 93 91 00 	sts	0x0091, r25
    1618:	80 93 90 00 	sts	0x0090, r24
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	2f 93       	push	r18
    1632:	3f 93       	push	r19
    1634:	4f 93       	push	r20
    1636:	5f 93       	push	r21
    1638:	6f 93       	push	r22
    163a:	7f 93       	push	r23
    163c:	8f 93       	push	r24
    163e:	9f 93       	push	r25
    1640:	af 93       	push	r26
    1642:	bf 93       	push	r27
    1644:	ef 93       	push	r30
    1646:	ff 93       	push	r31
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1650:	80 91 90 00 	lds	r24, 0x0090
    1654:	90 91 91 00 	lds	r25, 0x0091
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	29 f0       	breq	.+10     	; 0x1666 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    165c:	e0 91 90 00 	lds	r30, 0x0090
    1660:	f0 91 91 00 	lds	r31, 0x0091
    1664:	09 95       	icall
	}
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	ff 91       	pop	r31
    166c:	ef 91       	pop	r30
    166e:	bf 91       	pop	r27
    1670:	af 91       	pop	r26
    1672:	9f 91       	pop	r25
    1674:	8f 91       	pop	r24
    1676:	7f 91       	pop	r23
    1678:	6f 91       	pop	r22
    167a:	5f 91       	pop	r21
    167c:	4f 91       	pop	r20
    167e:	3f 91       	pop	r19
    1680:	2f 91       	pop	r18
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	0f 90       	pop	r0
    1688:	1f 90       	pop	r1
    168a:	18 95       	reti

0000168c <Timer0_PWM_Init>:
#include "timer_pwm.h"
#include "gpio.h"
#include "common_macros.h"

void Timer0_PWM_Init(uint8 duty_cycle_percent)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <Timer0_PWM_Init+0x6>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	8a 83       	std	Y+2, r24	; 0x02

	TCNT0 = 0; // Set Timer Initial Value to 0
    1698:	e2 e5       	ldi	r30, 0x52	; 82
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	10 82       	st	Z, r1
	uint8 duty_cycle = (uint16)(255*duty_cycle_percent)/100;
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	48 2f       	mov	r20, r24
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	ca 01       	movw	r24, r20
    16a6:	9c 01       	movw	r18, r24
    16a8:	22 0f       	add	r18, r18
    16aa:	33 1f       	adc	r19, r19
    16ac:	c9 01       	movw	r24, r18
    16ae:	96 95       	lsr	r25
    16b0:	98 2f       	mov	r25, r24
    16b2:	88 27       	eor	r24, r24
    16b4:	97 95       	ror	r25
    16b6:	87 95       	ror	r24
    16b8:	82 1b       	sub	r24, r18
    16ba:	93 0b       	sbc	r25, r19
    16bc:	84 0f       	add	r24, r20
    16be:	95 1f       	adc	r25, r21
    16c0:	24 e6       	ldi	r18, 0x64	; 100
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	b9 01       	movw	r22, r18
    16c6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__udivmodhi4>
    16ca:	cb 01       	movw	r24, r22
    16cc:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = duty_cycle; //Set Compare value
    16ce:	ec e5       	ldi	r30, 0x5C	; 92
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT );
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	63 e0       	ldi	r22, 0x03	; 3
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	0e 94 6d 06 	call	0xcda	; 0xcda <GPIO_setupPinDirection>

	SET_BIT(TCCR0,WGM00);
    16e0:	a3 e5       	ldi	r26, 0x53	; 83
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e3 e5       	ldi	r30, 0x53	; 83
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 64       	ori	r24, 0x40	; 64
    16ec:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    16ee:	a3 e5       	ldi	r26, 0x53	; 83
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e3 e5       	ldi	r30, 0x53	; 83
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 60       	ori	r24, 0x08	; 8
    16fa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    16fc:	a3 e5       	ldi	r26, 0x53	; 83
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e3 e5       	ldi	r30, 0x53	; 83
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	80 62       	ori	r24, 0x20	; 32
    1708:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    170a:	a3 e5       	ldi	r26, 0x53	; 83
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e3 e5       	ldi	r30, 0x53	; 83
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	82 60       	ori	r24, 0x02	; 2
    1716:	8c 93       	st	X, r24
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */

}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_ConfigType * Config_Ptr)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <UART_init+0x6>
    1728:	00 d0       	rcall	.+0      	; 0x172a <UART_init+0x8>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1732:	1a 82       	std	Y+2, r1	; 0x02
    1734:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1736:	eb e2       	ldi	r30, 0x2B	; 43
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)| (GET_BIT(Config_Ptr->bit_data,2)<<2);
    173e:	aa e2       	ldi	r26, 0x2A	; 42
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	eb 81       	ldd	r30, Y+3	; 0x03
    1744:	fc 81       	ldd	r31, Y+4	; 0x04
    1746:	80 81       	ld	r24, Z
    1748:	84 70       	andi	r24, 0x04	; 4
    174a:	88 61       	ori	r24, 0x18	; 24
    174c:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data& 6)<<1) | (Config_Ptr->stop_bit <<3) |(Config_Ptr->parity)<<5;
    174e:	a0 e4       	ldi	r26, 0x40	; 64
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	eb 81       	ldd	r30, Y+3	; 0x03
    1754:	fc 81       	ldd	r31, Y+4	; 0x04
    1756:	80 81       	ld	r24, Z
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	86 70       	andi	r24, 0x06	; 6
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	28 2f       	mov	r18, r24
    1766:	20 68       	ori	r18, 0x80	; 128
    1768:	eb 81       	ldd	r30, Y+3	; 0x03
    176a:	fc 81       	ldd	r31, Y+4	; 0x04
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	28 2b       	or	r18, r24
    1780:	eb 81       	ldd	r30, Y+3	; 0x03
    1782:	fc 81       	ldd	r31, Y+4	; 0x04
    1784:	81 81       	ldd	r24, Z+1	; 0x01
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	82 95       	swap	r24
    1790:	92 95       	swap	r25
    1792:	90 7f       	andi	r25, 0xF0	; 240
    1794:	98 27       	eor	r25, r24
    1796:	80 7f       	andi	r24, 0xF0	; 240
    1798:	98 27       	eor	r25, r24
    179a:	82 2b       	or	r24, r18
    179c:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    179e:	eb 81       	ldd	r30, Y+3	; 0x03
    17a0:	fc 81       	ldd	r31, Y+4	; 0x04
    17a2:	83 81       	ldd	r24, Z+3	; 0x03
    17a4:	94 81       	ldd	r25, Z+4	; 0x04
    17a6:	a5 81       	ldd	r26, Z+5	; 0x05
    17a8:	b6 81       	ldd	r27, Z+6	; 0x06
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	aa 1f       	adc	r26, r26
    17b0:	bb 1f       	adc	r27, r27
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	aa 1f       	adc	r26, r26
    17b8:	bb 1f       	adc	r27, r27
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	aa 1f       	adc	r26, r26
    17c0:	bb 1f       	adc	r27, r27
    17c2:	9c 01       	movw	r18, r24
    17c4:	ad 01       	movw	r20, r26
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	92 e1       	ldi	r25, 0x12	; 18
    17ca:	aa e7       	ldi	r26, 0x7A	; 122
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodsi4>
    17d6:	da 01       	movw	r26, r20
    17d8:	c9 01       	movw	r24, r18
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    17e0:	e0 e4       	ldi	r30, 0x40	; 64
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	89 2f       	mov	r24, r25
    17ea:	99 27       	eor	r25, r25
    17ec:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    17ee:	e9 e2       	ldi	r30, 0x29	; 41
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	80 83       	st	Z, r24

}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	2f 97       	sbiw	r28, 0x0f	; 15
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	8f 87       	std	Y+15, r24	; 0x0f
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    181a:	eb e2       	ldi	r30, 0x2B	; 43
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	80 72       	andi	r24, 0x20	; 32
    1826:	90 70       	andi	r25, 0x00	; 0
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	b9 f3       	breq	.-18     	; 0x181a <UART_sendByte+0x16>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    182c:	ec e2       	ldi	r30, 0x2C	; 44
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8f 85       	ldd	r24, Y+15	; 0x0f
    1832:	80 83       	st	Z, r24
	GPIO_writePin(PORTD_ID, PIN7_ID, 1);
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	67 e0       	ldi	r22, 0x07	; 7
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a6 e9       	ldi	r26, 0x96	; 150
    1844:	b3 e4       	ldi	r27, 0x43	; 67
    1846:	8b 87       	std	Y+11, r24	; 0x0b
    1848:	9c 87       	std	Y+12, r25	; 0x0c
    184a:	ad 87       	std	Y+13, r26	; 0x0d
    184c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1850:	7c 85       	ldd	r23, Y+12	; 0x0c
    1852:	8d 85       	ldd	r24, Y+13	; 0x0d
    1854:	9e 85       	ldd	r25, Y+14	; 0x0e
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a ef       	ldi	r20, 0xFA	; 250
    185c:	54 e4       	ldi	r21, 0x44	; 68
    185e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	8f 83       	std	Y+7, r24	; 0x07
    1868:	98 87       	std	Y+8, r25	; 0x08
    186a:	a9 87       	std	Y+9, r26	; 0x09
    186c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    186e:	6f 81       	ldd	r22, Y+7	; 0x07
    1870:	78 85       	ldd	r23, Y+8	; 0x08
    1872:	89 85       	ldd	r24, Y+9	; 0x09
    1874:	9a 85       	ldd	r25, Y+10	; 0x0a
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1882:	88 23       	and	r24, r24
    1884:	2c f4       	brge	.+10     	; 0x1890 <UART_sendByte+0x8c>
		__ticks = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	3f c0       	rjmp	.+126    	; 0x190e <UART_sendByte+0x10a>
	else if (__tmp > 65535)
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a4:	18 16       	cp	r1, r24
    18a6:	4c f5       	brge	.+82     	; 0x18fa <UART_sendByte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <UART_sendByte+0xec>
    18d2:	88 ec       	ldi	r24, 0xC8	; 200
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <UART_sendByte+0xda>
    18e2:	9c 83       	std	Y+4, r25	; 0x04
    18e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <UART_sendByte+0xce>
    18f8:	14 c0       	rjmp	.+40     	; 0x1922 <UART_sendByte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	8d 83       	std	Y+5, r24	; 0x05
    190e:	8d 81       	ldd	r24, Y+5	; 0x05
    1910:	9e 81       	ldd	r25, Y+6	; 0x06
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <UART_sendByte+0x116>
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	GPIO_writePin(PORTD_ID, PIN7_ID, 0);
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	67 e0       	ldi	r22, 0x07	; 7
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    192c:	2f 96       	adiw	r28, 0x0f	; 15
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	2e 97       	sbiw	r28, 0x0e	; 14
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1952:	eb e2       	ldi	r30, 0x2B	; 43
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	88 23       	and	r24, r24
    195a:	dc f7       	brge	.-10     	; 0x1952 <UART_recieveByte+0x14>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	GPIO_writePin(PORTA_ID, PIN0_ID, 1);
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a6 e9       	ldi	r26, 0x96	; 150
    196c:	b3 e4       	ldi	r27, 0x43	; 67
    196e:	8b 87       	std	Y+11, r24	; 0x0b
    1970:	9c 87       	std	Y+12, r25	; 0x0c
    1972:	ad 87       	std	Y+13, r26	; 0x0d
    1974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	7c 85       	ldd	r23, Y+12	; 0x0c
    197a:	8d 85       	ldd	r24, Y+13	; 0x0d
    197c:	9e 85       	ldd	r25, Y+14	; 0x0e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8f 83       	std	Y+7, r24	; 0x07
    1990:	98 87       	std	Y+8, r25	; 0x08
    1992:	a9 87       	std	Y+9, r26	; 0x09
    1994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <UART_recieveByte+0x7a>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <UART_recieveByte+0xf8>
	else if (__tmp > 65535)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <UART_recieveByte+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <UART_recieveByte+0xda>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <UART_recieveByte+0xc8>
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <UART_recieveByte+0xbc>
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <UART_recieveByte+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <UART_recieveByte+0x104>
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	GPIO_writePin(PORTA_ID, PIN0_ID, 0);
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
    return UDR;		
    1a54:	ec e2       	ldi	r30, 0x2C	; 44
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
}
    1a5a:	2e 96       	adiw	r28, 0x0e	; 14
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <UART_sendString+0x6>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	9b 83       	std	Y+3, r25	; 0x03
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
    1a7e:	0e c0       	rjmp	.+28     	; 0x1a9c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	e2 0f       	add	r30, r18
    1a8e:	f3 1f       	adc	r31, r19
    1a90:	80 81       	ld	r24, Z
    1a92:	0e 94 02 0c 	call	0x1804	; 0x1804 <UART_sendByte>
		i++;
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	e2 0f       	add	r30, r18
    1aaa:	f3 1f       	adc	r31, r19
    1aac:	80 81       	ld	r24, Z
    1aae:	88 23       	and	r24, r24
    1ab0:	39 f7       	brne	.-50     	; 0x1a80 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <UART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_recieveString(uint8 *Str)
{
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <UART_recieveString+0xa>
    1ac8:	0f 92       	push	r0
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	9b 83       	std	Y+3, r25	; 0x03
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ad2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ade:	8c 01       	movw	r16, r24
    1ae0:	02 0f       	add	r16, r18
    1ae2:	13 1f       	adc	r17, r19
    1ae4:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_recieveByte>
    1ae8:	f8 01       	movw	r30, r16
    1aea:	80 83       	st	Z, r24
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <UART_recieveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	8c 01       	movw	r16, r24
    1b00:	02 0f       	add	r16, r18
    1b02:	13 1f       	adc	r17, r19
    1b04:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_recieveByte>
    1b08:	f8 01       	movw	r30, r16
    1b0a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	9b 81       	ldd	r25, Y+3	; 0x03
    1b16:	fc 01       	movw	r30, r24
    1b18:	e2 0f       	add	r30, r18
    1b1a:	f3 1f       	adc	r31, r19
    1b1c:	80 81       	ld	r24, Z
    1b1e:	83 32       	cpi	r24, 0x23	; 35
    1b20:	31 f7       	brne	.-52     	; 0x1aee <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e2 0f       	add	r30, r18
    1b30:	f3 1f       	adc	r31, r19
    1b32:	10 82       	st	Z, r1
}
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <compare>:

typedef enum {
	CREATE_PASSWORD, VALIDATE_PASSWORD, OPEN_DOOR, CHANGE_PASSWORD, UART_ERROR
}UART_message;

int compare(uint8 pass1[PASS_SIZE], uint8 pass2[PASS_SIZE]){
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	28 97       	sbiw	r28, 0x08	; 8
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	7e 83       	std	Y+6, r23	; 0x06
    1b5e:	6d 83       	std	Y+5, r22	; 0x05
	for(int i=0; i<PASS_SIZE; i++){
    1b60:	1a 82       	std	Y+2, r1	; 0x02
    1b62:	19 82       	std	Y+1, r1	; 0x01
    1b64:	1c c0       	rjmp	.+56     	; 0x1b9e <compare+0x5a>
		if(pass1[i]!=pass2[i])
    1b66:	29 81       	ldd	r18, Y+1	; 0x01
    1b68:	3a 81       	ldd	r19, Y+2	; 0x02
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e2 0f       	add	r30, r18
    1b72:	f3 1f       	adc	r31, r19
    1b74:	40 81       	ld	r20, Z
    1b76:	29 81       	ldd	r18, Y+1	; 0x01
    1b78:	3a 81       	ldd	r19, Y+2	; 0x02
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e2 0f       	add	r30, r18
    1b82:	f3 1f       	adc	r31, r19
    1b84:	80 81       	ld	r24, Z
    1b86:	48 17       	cp	r20, r24
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <compare+0x50>
			return -1;
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	98 87       	std	Y+8, r25	; 0x08
    1b90:	8f 83       	std	Y+7, r24	; 0x07
    1b92:	10 c0       	rjmp	.+32     	; 0x1bb4 <compare+0x70>
typedef enum {
	CREATE_PASSWORD, VALIDATE_PASSWORD, OPEN_DOOR, CHANGE_PASSWORD, UART_ERROR
}UART_message;

int compare(uint8 pass1[PASS_SIZE], uint8 pass2[PASS_SIZE]){
	for(int i=0; i<PASS_SIZE; i++){
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	20 91 79 00 	lds	r18, 0x0079
    1ba2:	30 91 7a 00 	lds	r19, 0x007A
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	82 17       	cp	r24, r18
    1bac:	93 07       	cpc	r25, r19
    1bae:	dc f2       	brlt	.-74     	; 0x1b66 <compare+0x22>
		if(pass1[i]!=pass2[i])
			return -1;
	}
	return 0;
    1bb0:	18 86       	std	Y+8, r1	; 0x08
    1bb2:	1f 82       	std	Y+7, r1	; 0x07
    1bb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb6:	98 85       	ldd	r25, Y+8	; 0x08
}
    1bb8:	28 96       	adiw	r28, 0x08	; 8
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <validate_password>:

int validate_password(char p1[PASS_SIZE]){
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <validate_password+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <validate_password+0x8>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <validate_password+0xa>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0; i<5; i++){
    1bdc:	1a 82       	std	Y+2, r1	; 0x02
    1bde:	19 82       	std	Y+1, r1	; 0x01
    1be0:	18 c0       	rjmp	.+48     	; 0x1c12 <validate_password+0x48>
		if(p1[i]!=saved_password[i])
    1be2:	29 81       	ldd	r18, Y+1	; 0x01
    1be4:	3a 81       	ldd	r19, Y+2	; 0x02
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	fc 01       	movw	r30, r24
    1bec:	e2 0f       	add	r30, r18
    1bee:	f3 1f       	adc	r31, r19
    1bf0:	20 81       	ld	r18, Z
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	ea 56       	subi	r30, 0x6A	; 106
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 81       	ld	r24, Z
    1bfe:	28 17       	cp	r18, r24
    1c00:	19 f0       	breq	.+6      	; 0x1c08 <validate_password+0x3e>
			return 0;
    1c02:	1e 82       	std	Y+6, r1	; 0x06
    1c04:	1d 82       	std	Y+5, r1	; 0x05
    1c06:	0e c0       	rjmp	.+28     	; 0x1c24 <validate_password+0x5a>
	}
	return 0;
}

int validate_password(char p1[PASS_SIZE]){
	for(int i=0; i<5; i++){
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	85 30       	cpi	r24, 0x05	; 5
    1c18:	91 05       	cpc	r25, r1
    1c1a:	1c f3       	brlt	.-58     	; 0x1be2 <validate_password+0x18>
		if(p1[i]!=saved_password[i])
			return 0;
	}
	return 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1c28:	26 96       	adiw	r28, 0x06	; 6
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <save_password>:
void save_password(uint8 password[PASS_SIZE]){
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	63 97       	sbiw	r28, 0x13	; 19
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	9b 8b       	std	Y+19, r25	; 0x13
    1c50:	8a 8b       	std	Y+18, r24	; 0x12
	for(int i=0; i<PASS_SIZE; i++){
    1c52:	19 8a       	std	Y+17, r1	; 0x11
    1c54:	18 8a       	std	Y+16, r1	; 0x10
    1c56:	89 c0       	rjmp	.+274    	; 0x1d6a <save_password+0x130>
		uint8 state = EEPROM_writeByte(PASSWORD_ADDRESS_LOCATION + i, password[i]);
    1c58:	88 89       	ldd	r24, Y+16	; 0x10
    1c5a:	99 89       	ldd	r25, Y+17	; 0x11
    1c5c:	80 5b       	subi	r24, 0xB0	; 176
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	ac 01       	movw	r20, r24
    1c62:	28 89       	ldd	r18, Y+16	; 0x10
    1c64:	39 89       	ldd	r19, Y+17	; 0x11
    1c66:	8a 89       	ldd	r24, Y+18	; 0x12
    1c68:	9b 89       	ldd	r25, Y+19	; 0x13
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	e2 0f       	add	r30, r18
    1c6e:	f3 1f       	adc	r31, r19
    1c70:	20 81       	ld	r18, Z
    1c72:	ca 01       	movw	r24, r20
    1c74:	62 2f       	mov	r22, r18
    1c76:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    1c7a:	8f 87       	std	Y+15, r24	; 0x0f
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a8 ec       	ldi	r26, 0xC8	; 200
    1c82:	b3 e4       	ldi	r27, 0x43	; 67
    1c84:	8b 87       	std	Y+11, r24	; 0x0b
    1c86:	9c 87       	std	Y+12, r25	; 0x0c
    1c88:	ad 87       	std	Y+13, r26	; 0x0d
    1c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a ef       	ldi	r20, 0xFA	; 250
    1c9a:	54 e4       	ldi	r21, 0x44	; 68
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8f 83       	std	Y+7, r24	; 0x07
    1ca6:	98 87       	std	Y+8, r25	; 0x08
    1ca8:	a9 87       	std	Y+9, r26	; 0x09
    1caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <save_password+0x94>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <save_password+0x112>
	else if (__tmp > 65535)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <save_password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <save_password+0xf4>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9c 83       	std	Y+4, r25	; 0x04
    1d16:	8b 83       	std	Y+3, r24	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <save_password+0xe2>
    1d20:	9c 83       	std	Y+4, r25	; 0x04
    1d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <save_password+0xd6>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <save_password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <save_password+0x11e>
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
			return 0;
	}
	return 1;
}
void save_password(uint8 password[PASS_SIZE]){
	for(int i=0; i<PASS_SIZE; i++){
    1d60:	88 89       	ldd	r24, Y+16	; 0x10
    1d62:	99 89       	ldd	r25, Y+17	; 0x11
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	99 8b       	std	Y+17, r25	; 0x11
    1d68:	88 8b       	std	Y+16, r24	; 0x10
    1d6a:	20 91 79 00 	lds	r18, 0x0079
    1d6e:	30 91 7a 00 	lds	r19, 0x007A
    1d72:	88 89       	ldd	r24, Y+16	; 0x10
    1d74:	99 89       	ldd	r25, Y+17	; 0x11
    1d76:	82 17       	cp	r24, r18
    1d78:	93 07       	cpc	r25, r19
    1d7a:	0c f4       	brge	.+2      	; 0x1d7e <save_password+0x144>
    1d7c:	6d cf       	rjmp	.-294    	; 0x1c58 <save_password+0x1e>
		uint8 state = EEPROM_writeByte(PASSWORD_ADDRESS_LOCATION + i, password[i]);
		_delay_ms(400);
	}
}
    1d7e:	63 96       	adiw	r28, 0x13	; 19
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <createPassword>:

void createPassword(){
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	cc 55       	subi	r28, 0x5C	; 92
    1d9e:	d0 40       	sbci	r29, 0x00	; 0
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
		UART_sendByte(1);
		password_is_set = 1;
	}


}
    1daa:	2d b7       	in	r18, 0x3d	; 61
    1dac:	3e b7       	in	r19, 0x3e	; 62
    1dae:	6d 96       	adiw	r28, 0x1d	; 29
    1db0:	3f af       	std	Y+63, r19	; 0x3f
    1db2:	2e af       	std	Y+62, r18	; 0x3e
    1db4:	6d 97       	sbiw	r28, 0x1d	; 29
		uint8 state = EEPROM_writeByte(PASSWORD_ADDRESS_LOCATION + i, password[i]);
		_delay_ms(400);
	}
}

void createPassword(){
    1db6:	8d b7       	in	r24, 0x3d	; 61
    1db8:	9e b7       	in	r25, 0x3e	; 62
    1dba:	67 96       	adiw	r28, 0x17	; 23
    1dbc:	9f af       	std	Y+63, r25	; 0x3f
    1dbe:	8e af       	std	Y+62, r24	; 0x3e
    1dc0:	67 97       	sbiw	r28, 0x17	; 23
	uint8 password1[PASS_SIZE], password2[PASS_SIZE];
    1dc2:	80 91 79 00 	lds	r24, 0x0079
    1dc6:	90 91 7a 00 	lds	r25, 0x007A
    1dca:	ed b7       	in	r30, 0x3d	; 61
    1dcc:	fe b7       	in	r31, 0x3e	; 62
    1dce:	e8 1b       	sub	r30, r24
    1dd0:	f9 0b       	sbc	r31, r25
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	fe bf       	out	0x3e, r31	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	ed bf       	out	0x3d, r30	; 61
    1ddc:	2d b7       	in	r18, 0x3d	; 61
    1dde:	3e b7       	in	r19, 0x3e	; 62
    1de0:	2f 5f       	subi	r18, 0xFF	; 255
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255
    1de4:	6b 96       	adiw	r28, 0x1b	; 27
    1de6:	3f af       	std	Y+63, r19	; 0x3f
    1de8:	2e af       	std	Y+62, r18	; 0x3e
    1dea:	6b 97       	sbiw	r28, 0x1b	; 27
    1dec:	6b 96       	adiw	r28, 0x1b	; 27
    1dee:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df2:	6b 97       	sbiw	r28, 0x1b	; 27
    1df4:	00 96       	adiw	r24, 0x00	; 0
    1df6:	6b 96       	adiw	r28, 0x1b	; 27
    1df8:	9f af       	std	Y+63, r25	; 0x3f
    1dfa:	8e af       	std	Y+62, r24	; 0x3e
    1dfc:	6b 97       	sbiw	r28, 0x1b	; 27
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ed 5a       	subi	r30, 0xAD	; 173
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	6b 96       	adiw	r28, 0x1b	; 27
    1e06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e0a:	6b 97       	sbiw	r28, 0x1b	; 27
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
    1e10:	80 91 79 00 	lds	r24, 0x0079
    1e14:	90 91 7a 00 	lds	r25, 0x007A
    1e18:	ed b7       	in	r30, 0x3d	; 61
    1e1a:	fe b7       	in	r31, 0x3e	; 62
    1e1c:	e8 1b       	sub	r30, r24
    1e1e:	f9 0b       	sbc	r31, r25
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	fe bf       	out	0x3e, r31	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	ed bf       	out	0x3d, r30	; 61
    1e2a:	2d b7       	in	r18, 0x3d	; 61
    1e2c:	3e b7       	in	r19, 0x3e	; 62
    1e2e:	2f 5f       	subi	r18, 0xFF	; 255
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	69 96       	adiw	r28, 0x19	; 25
    1e34:	3f af       	std	Y+63, r19	; 0x3f
    1e36:	2e af       	std	Y+62, r18	; 0x3e
    1e38:	69 97       	sbiw	r28, 0x19	; 25
    1e3a:	69 96       	adiw	r28, 0x19	; 25
    1e3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e40:	69 97       	sbiw	r28, 0x19	; 25
    1e42:	00 96       	adiw	r24, 0x00	; 0
    1e44:	69 96       	adiw	r28, 0x19	; 25
    1e46:	9f af       	std	Y+63, r25	; 0x3f
    1e48:	8e af       	std	Y+62, r24	; 0x3e
    1e4a:	69 97       	sbiw	r28, 0x19	; 25
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ef 5a       	subi	r30, 0xAF	; 175
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	69 96       	adiw	r28, 0x19	; 25
    1e54:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e56:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e58:	69 97       	sbiw	r28, 0x19	; 25
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
	//UART_recieveString(password1);
	uint8 rec_byte = '-';
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e0 5b       	subi	r30, 0xB0	; 176
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	8d e2       	ldi	r24, 0x2D	; 45
    1e66:	80 83       	st	Z, r24
	for(int i=0; i<PASS_SIZE; i++){
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e5 5b       	subi	r30, 0xB5	; 181
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	11 82       	std	Z+1, r1	; 0x01
    1e70:	10 82       	st	Z, r1
    1e72:	a9 c0       	rjmp	.+338    	; 0x1fc6 <createPassword+0x236>
		rec_byte = UART_recieveByte();
    1e74:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_recieveByte>
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e0 5b       	subi	r30, 0xB0	; 176
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 83       	st	Z, r24
		password1[i] = rec_byte;
    1e80:	fe 01       	movw	r30, r28
    1e82:	e5 5b       	subi	r30, 0xB5	; 181
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	20 81       	ld	r18, Z
    1e88:	31 81       	ldd	r19, Z+1	; 0x01
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	ed 5a       	subi	r30, 0xAD	; 173
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	91 81       	ldd	r25, Z+1	; 0x01
    1e94:	dc 01       	movw	r26, r24
    1e96:	a2 0f       	add	r26, r18
    1e98:	b3 1f       	adc	r27, r19
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e0 5b       	subi	r30, 0xB0	; 176
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	8c 93       	st	X, r24
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ed 5b       	subi	r30, 0xBD	; 189
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a8 ec       	ldi	r26, 0xC8	; 200
    1eb0:	b2 e4       	ldi	r27, 0x42	; 66
    1eb2:	80 83       	st	Z, r24
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	a2 83       	std	Z+2, r26	; 0x02
    1eb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eba:	8e 01       	movw	r16, r28
    1ebc:	01 5c       	subi	r16, 0xC1	; 193
    1ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ed 5b       	subi	r30, 0xBD	; 189
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	60 81       	ld	r22, Z
    1ec8:	71 81       	ldd	r23, Z+1	; 0x01
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	93 81       	ldd	r25, Z+3	; 0x03
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a ef       	ldi	r20, 0xFA	; 250
    1ed4:	54 e4       	ldi	r21, 0x44	; 68
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	f8 01       	movw	r30, r16
    1ee0:	80 83       	st	Z, r24
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	a2 83       	std	Z+2, r26	; 0x02
    1ee6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee8:	fe 01       	movw	r30, r28
    1eea:	ff 96       	adiw	r30, 0x3f	; 63
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <createPassword+0x17e>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9e af       	std	Y+62, r25	; 0x3e
    1f0a:	8d af       	std	Y+61, r24	; 0x3d
    1f0c:	46 c0       	rjmp	.+140    	; 0x1f9a <createPassword+0x20a>
	else if (__tmp > 65535)
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ff 96       	adiw	r30, 0x3f	; 63
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	57 e4       	ldi	r21, 0x47	; 71
    1f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	64 f5       	brge	.+88     	; 0x1f82 <createPassword+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ed 5b       	subi	r30, 0xBD	; 189
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9e af       	std	Y+62, r25	; 0x3e
    1f56:	8d af       	std	Y+61, r24	; 0x3d
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <createPassword+0x1e8>
    1f5a:	88 ec       	ldi	r24, 0xC8	; 200
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c af       	std	Y+60, r25	; 0x3c
    1f60:	8b af       	std	Y+59, r24	; 0x3b
    1f62:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f64:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <createPassword+0x1d6>
    1f6a:	9c af       	std	Y+60, r25	; 0x3c
    1f6c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9e af       	std	Y+62, r25	; 0x3e
    1f76:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <createPassword+0x1ca>
    1f80:	16 c0       	rjmp	.+44     	; 0x1fae <createPassword+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	fe 01       	movw	r30, r28
    1f84:	ff 96       	adiw	r30, 0x3f	; 63
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9e af       	std	Y+62, r25	; 0x3e
    1f98:	8d af       	std	Y+61, r24	; 0x3d
    1f9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f9e:	9a af       	std	Y+58, r25	; 0x3a
    1fa0:	89 af       	std	Y+57, r24	; 0x39
    1fa2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <createPassword+0x216>
    1faa:	9a af       	std	Y+58, r25	; 0x3a
    1fac:	89 af       	std	Y+57, r24	; 0x39

void createPassword(){
	uint8 password1[PASS_SIZE], password2[PASS_SIZE];
	//UART_recieveString(password1);
	uint8 rec_byte = '-';
	for(int i=0; i<PASS_SIZE; i++){
    1fae:	de 01       	movw	r26, r28
    1fb0:	a5 5b       	subi	r26, 0xB5	; 181
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e5 5b       	subi	r30, 0xB5	; 181
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	11 96       	adiw	r26, 0x01	; 1
    1fc2:	9c 93       	st	X, r25
    1fc4:	8e 93       	st	-X, r24
    1fc6:	80 91 79 00 	lds	r24, 0x0079
    1fca:	90 91 7a 00 	lds	r25, 0x007A
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e5 5b       	subi	r30, 0xB5	; 181
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	20 81       	ld	r18, Z
    1fd6:	31 81       	ldd	r19, Z+1	; 0x01
    1fd8:	28 17       	cp	r18, r24
    1fda:	39 07       	cpc	r19, r25
    1fdc:	0c f4       	brge	.+2      	; 0x1fe0 <createPassword+0x250>
    1fde:	4a cf       	rjmp	.-364    	; 0x1e74 <createPassword+0xe4>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a6 e9       	ldi	r26, 0x96	; 150
    1fe6:	b3 e4       	ldi	r27, 0x43	; 67
    1fe8:	8d ab       	std	Y+53, r24	; 0x35
    1fea:	9e ab       	std	Y+54, r25	; 0x36
    1fec:	af ab       	std	Y+55, r26	; 0x37
    1fee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a ef       	ldi	r20, 0xFA	; 250
    1ffe:	54 e4       	ldi	r21, 0x44	; 68
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	89 ab       	std	Y+49, r24	; 0x31
    200a:	9a ab       	std	Y+50, r25	; 0x32
    200c:	ab ab       	std	Y+51, r26	; 0x33
    200e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2010:	69 a9       	ldd	r22, Y+49	; 0x31
    2012:	7a a9       	ldd	r23, Y+50	; 0x32
    2014:	8b a9       	ldd	r24, Y+51	; 0x33
    2016:	9c a9       	ldd	r25, Y+52	; 0x34
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	2c f4       	brge	.+10     	; 0x2032 <createPassword+0x2a2>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	98 ab       	std	Y+48, r25	; 0x30
    202e:	8f a7       	std	Y+47, r24	; 0x2f
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <createPassword+0x320>
	else if (__tmp > 65535)
    2032:	69 a9       	ldd	r22, Y+49	; 0x31
    2034:	7a a9       	ldd	r23, Y+50	; 0x32
    2036:	8b a9       	ldd	r24, Y+51	; 0x33
    2038:	9c a9       	ldd	r25, Y+52	; 0x34
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2046:	18 16       	cp	r1, r24
    2048:	4c f5       	brge	.+82     	; 0x209c <createPassword+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204a:	6d a9       	ldd	r22, Y+53	; 0x35
    204c:	7e a9       	ldd	r23, Y+54	; 0x36
    204e:	8f a9       	ldd	r24, Y+55	; 0x37
    2050:	98 ad       	ldd	r25, Y+56	; 0x38
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	98 ab       	std	Y+48, r25	; 0x30
    2070:	8f a7       	std	Y+47, r24	; 0x2f
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <createPassword+0x302>
    2074:	88 ec       	ldi	r24, 0xC8	; 200
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9e a7       	std	Y+46, r25	; 0x2e
    207a:	8d a7       	std	Y+45, r24	; 0x2d
    207c:	8d a5       	ldd	r24, Y+45	; 0x2d
    207e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <createPassword+0x2f0>
    2084:	9e a7       	std	Y+46, r25	; 0x2e
    2086:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2088:	8f a5       	ldd	r24, Y+47	; 0x2f
    208a:	98 a9       	ldd	r25, Y+48	; 0x30
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	98 ab       	std	Y+48, r25	; 0x30
    2090:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2092:	8f a5       	ldd	r24, Y+47	; 0x2f
    2094:	98 a9       	ldd	r25, Y+48	; 0x30
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	69 f7       	brne	.-38     	; 0x2074 <createPassword+0x2e4>
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <createPassword+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209c:	69 a9       	ldd	r22, Y+49	; 0x31
    209e:	7a a9       	ldd	r23, Y+50	; 0x32
    20a0:	8b a9       	ldd	r24, Y+51	; 0x33
    20a2:	9c a9       	ldd	r25, Y+52	; 0x34
    20a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	98 ab       	std	Y+48, r25	; 0x30
    20ae:	8f a7       	std	Y+47, r24	; 0x2f
    20b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b2:	98 a9       	ldd	r25, Y+48	; 0x30
    20b4:	9c a7       	std	Y+44, r25	; 0x2c
    20b6:	8b a7       	std	Y+43, r24	; 0x2b
    20b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <createPassword+0x32c>
    20c0:	9c a7       	std	Y+44, r25	; 0x2c
    20c2:	8b a7       	std	Y+43, r24	; 0x2b

	//GPIO_writePin(PORTD_ID, PIN7_ID, 1);
	_delay_ms(300);
	//GPIO_writePin(PORTD_ID, PIN7_ID, 0);

	uint8 rec_byte2 = '-';
    20c4:	fe 01       	movw	r30, r28
    20c6:	e1 5b       	subi	r30, 0xB1	; 177
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	8d e2       	ldi	r24, 0x2D	; 45
    20cc:	80 83       	st	Z, r24
	for(int i=0; i<PASS_SIZE; i++){
    20ce:	fe 01       	movw	r30, r28
    20d0:	e7 5b       	subi	r30, 0xB7	; 183
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	11 82       	std	Z+1, r1	; 0x01
    20d6:	10 82       	st	Z, r1
    20d8:	96 c0       	rjmp	.+300    	; 0x2206 <createPassword+0x476>
		rec_byte2 = UART_recieveByte();
    20da:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_recieveByte>
    20de:	fe 01       	movw	r30, r28
    20e0:	e1 5b       	subi	r30, 0xB1	; 177
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 83       	st	Z, r24
		password2[i] = rec_byte2;
    20e6:	fe 01       	movw	r30, r28
    20e8:	e7 5b       	subi	r30, 0xB7	; 183
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	20 81       	ld	r18, Z
    20ee:	31 81       	ldd	r19, Z+1	; 0x01
    20f0:	fe 01       	movw	r30, r28
    20f2:	ef 5a       	subi	r30, 0xAF	; 175
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	dc 01       	movw	r26, r24
    20fc:	a2 0f       	add	r26, r18
    20fe:	b3 1f       	adc	r27, r19
    2100:	fe 01       	movw	r30, r28
    2102:	e1 5b       	subi	r30, 0xB1	; 177
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	8c 93       	st	X, r24
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a8 ec       	ldi	r26, 0xC8	; 200
    2110:	b2 e4       	ldi	r27, 0x42	; 66
    2112:	8f a3       	std	Y+39, r24	; 0x27
    2114:	98 a7       	std	Y+40, r25	; 0x28
    2116:	a9 a7       	std	Y+41, r26	; 0x29
    2118:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	6f a1       	ldd	r22, Y+39	; 0x27
    211c:	78 a5       	ldd	r23, Y+40	; 0x28
    211e:	89 a5       	ldd	r24, Y+41	; 0x29
    2120:	9a a5       	ldd	r25, Y+42	; 0x2a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a ef       	ldi	r20, 0xFA	; 250
    2128:	54 e4       	ldi	r21, 0x44	; 68
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8b a3       	std	Y+35, r24	; 0x23
    2134:	9c a3       	std	Y+36, r25	; 0x24
    2136:	ad a3       	std	Y+37, r26	; 0x25
    2138:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    213a:	6b a1       	ldd	r22, Y+35	; 0x23
    213c:	7c a1       	ldd	r23, Y+36	; 0x24
    213e:	8d a1       	ldd	r24, Y+37	; 0x25
    2140:	9e a1       	ldd	r25, Y+38	; 0x26
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	2c f4       	brge	.+10     	; 0x215c <createPassword+0x3cc>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9a a3       	std	Y+34, r25	; 0x22
    2158:	89 a3       	std	Y+33, r24	; 0x21
    215a:	3f c0       	rjmp	.+126    	; 0x21da <createPassword+0x44a>
	else if (__tmp > 65535)
    215c:	6b a1       	ldd	r22, Y+35	; 0x23
    215e:	7c a1       	ldd	r23, Y+36	; 0x24
    2160:	8d a1       	ldd	r24, Y+37	; 0x25
    2162:	9e a1       	ldd	r25, Y+38	; 0x26
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	4c f5       	brge	.+82     	; 0x21c6 <createPassword+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	6f a1       	ldd	r22, Y+39	; 0x27
    2176:	78 a5       	ldd	r23, Y+40	; 0x28
    2178:	89 a5       	ldd	r24, Y+41	; 0x29
    217a:	9a a5       	ldd	r25, Y+42	; 0x2a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e2       	ldi	r20, 0x20	; 32
    2182:	51 e4       	ldi	r21, 0x41	; 65
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9a a3       	std	Y+34, r25	; 0x22
    219a:	89 a3       	std	Y+33, r24	; 0x21
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <createPassword+0x42c>
    219e:	88 ec       	ldi	r24, 0xC8	; 200
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	98 a3       	std	Y+32, r25	; 0x20
    21a4:	8f 8f       	std	Y+31, r24	; 0x1f
    21a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21a8:	98 a1       	ldd	r25, Y+32	; 0x20
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <createPassword+0x41a>
    21ae:	98 a3       	std	Y+32, r25	; 0x20
    21b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	89 a1       	ldd	r24, Y+33	; 0x21
    21b4:	9a a1       	ldd	r25, Y+34	; 0x22
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	9a a3       	std	Y+34, r25	; 0x22
    21ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	89 a1       	ldd	r24, Y+33	; 0x21
    21be:	9a a1       	ldd	r25, Y+34	; 0x22
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	69 f7       	brne	.-38     	; 0x219e <createPassword+0x40e>
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <createPassword+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c6:	6b a1       	ldd	r22, Y+35	; 0x23
    21c8:	7c a1       	ldd	r23, Y+36	; 0x24
    21ca:	8d a1       	ldd	r24, Y+37	; 0x25
    21cc:	9e a1       	ldd	r25, Y+38	; 0x26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9a a3       	std	Y+34, r25	; 0x22
    21d8:	89 a3       	std	Y+33, r24	; 0x21
    21da:	89 a1       	ldd	r24, Y+33	; 0x21
    21dc:	9a a1       	ldd	r25, Y+34	; 0x22
    21de:	9e 8f       	std	Y+30, r25	; 0x1e
    21e0:	8d 8f       	std	Y+29, r24	; 0x1d
    21e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <createPassword+0x456>
    21ea:	9e 8f       	std	Y+30, r25	; 0x1e
    21ec:	8d 8f       	std	Y+29, r24	; 0x1d
	//GPIO_writePin(PORTD_ID, PIN7_ID, 1);
	_delay_ms(300);
	//GPIO_writePin(PORTD_ID, PIN7_ID, 0);

	uint8 rec_byte2 = '-';
	for(int i=0; i<PASS_SIZE; i++){
    21ee:	de 01       	movw	r26, r28
    21f0:	a7 5b       	subi	r26, 0xB7	; 183
    21f2:	bf 4f       	sbci	r27, 0xFF	; 255
    21f4:	fe 01       	movw	r30, r28
    21f6:	e7 5b       	subi	r30, 0xB7	; 183
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	11 96       	adiw	r26, 0x01	; 1
    2202:	9c 93       	st	X, r25
    2204:	8e 93       	st	-X, r24
    2206:	80 91 79 00 	lds	r24, 0x0079
    220a:	90 91 7a 00 	lds	r25, 0x007A
    220e:	fe 01       	movw	r30, r28
    2210:	e7 5b       	subi	r30, 0xB7	; 183
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	20 81       	ld	r18, Z
    2216:	31 81       	ldd	r19, Z+1	; 0x01
    2218:	28 17       	cp	r18, r24
    221a:	39 07       	cpc	r19, r25
    221c:	0c f4       	brge	.+2      	; 0x2220 <createPassword+0x490>
    221e:	5d cf       	rjmp	.-326    	; 0x20da <createPassword+0x34a>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a6 e9       	ldi	r26, 0x96	; 150
    2226:	b3 e4       	ldi	r27, 0x43	; 67
    2228:	89 8f       	std	Y+25, r24	; 0x19
    222a:	9a 8f       	std	Y+26, r25	; 0x1a
    222c:	ab 8f       	std	Y+27, r26	; 0x1b
    222e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	69 8d       	ldd	r22, Y+25	; 0x19
    2232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a ef       	ldi	r20, 0xFA	; 250
    223e:	54 e4       	ldi	r21, 0x44	; 68
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8d 8b       	std	Y+21, r24	; 0x15
    224a:	9e 8b       	std	Y+22, r25	; 0x16
    224c:	af 8b       	std	Y+23, r26	; 0x17
    224e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	2c f4       	brge	.+10     	; 0x2272 <createPassword+0x4e2>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9c 8b       	std	Y+20, r25	; 0x14
    226e:	8b 8b       	std	Y+19, r24	; 0x13
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <createPassword+0x560>
	else if (__tmp > 65535)
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	4c f5       	brge	.+82     	; 0x22dc <createPassword+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	69 8d       	ldd	r22, Y+25	; 0x19
    228c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9c 8b       	std	Y+20, r25	; 0x14
    22b0:	8b 8b       	std	Y+19, r24	; 0x13
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <createPassword+0x542>
    22b4:	88 ec       	ldi	r24, 0xC8	; 200
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9a 8b       	std	Y+18, r25	; 0x12
    22ba:	89 8b       	std	Y+17, r24	; 0x11
    22bc:	89 89       	ldd	r24, Y+17	; 0x11
    22be:	9a 89       	ldd	r25, Y+18	; 0x12
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <createPassword+0x530>
    22c4:	9a 8b       	std	Y+18, r25	; 0x12
    22c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ca:	9c 89       	ldd	r25, Y+20	; 0x14
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8b 89       	ldd	r24, Y+19	; 0x13
    22d4:	9c 89       	ldd	r25, Y+20	; 0x14
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <createPassword+0x524>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <createPassword+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6d 89       	ldd	r22, Y+21	; 0x15
    22de:	7e 89       	ldd	r23, Y+22	; 0x16
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	98 8d       	ldd	r25, Y+24	; 0x18
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	98 8b       	std	Y+16, r25	; 0x10
    22f6:	8f 87       	std	Y+15, r24	; 0x0f
    22f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fa:	98 89       	ldd	r25, Y+16	; 0x10
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <createPassword+0x56c>
    2300:	98 8b       	std	Y+16, r25	; 0x10
    2302:	8f 87       	std	Y+15, r24	; 0x0f

	//GPIO_writePin(PORTD_ID, PIN7_ID, 1);
	_delay_ms(300);
	//GPIO_writePin(PORTD_ID, PIN7_ID, 0);

	int match = compare(password1,password2);
    2304:	fe 01       	movw	r30, r28
    2306:	ed 5a       	subi	r30, 0xAD	; 173
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	fe 01       	movw	r30, r28
    2310:	ef 5a       	subi	r30, 0xAF	; 175
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	20 81       	ld	r18, Z
    2316:	31 81       	ldd	r19, Z+1	; 0x01
    2318:	b9 01       	movw	r22, r18
    231a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <compare>
    231e:	fe 01       	movw	r30, r28
    2320:	e3 5b       	subi	r30, 0xB3	; 179
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
	if(match==0){
    2328:	fe 01       	movw	r30, r28
    232a:	e3 5b       	subi	r30, 0xB3	; 179
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	80 81       	ld	r24, Z
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	09 f0       	breq	.+2      	; 0x2338 <createPassword+0x5a8>
    2336:	cf c0       	rjmp	.+414    	; 0x24d6 <createPassword+0x746>
		UART_sendByte(1);
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	0e 94 02 0c 	call	0x1804	; 0x1804 <UART_sendByte>
		save_password(password2);
    233e:	fe 01       	movw	r30, r28
    2340:	ef 5a       	subi	r30, 0xAF	; 175
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <save_password>
		password_is_set = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	90 93 93 00 	sts	0x0093, r25
    2354:	80 93 92 00 	sts	0x0092, r24
    2358:	d6 c0       	rjmp	.+428    	; 0x2506 <createPassword+0x776>
	}
	else{
		while(match != 0){
			UART_sendByte(0);
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	0e 94 02 0c 	call	0x1804	; 0x1804 <UART_sendByte>
			//_delay_ms(500);
			for(int i=0; i<PASS_SIZE ; i++){
    2360:	fe 01       	movw	r30, r28
    2362:	e9 5b       	subi	r30, 0xB9	; 185
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	11 82       	std	Z+1, r1	; 0x01
    2368:	10 82       	st	Z, r1
    236a:	96 c0       	rjmp	.+300    	; 0x2498 <createPassword+0x708>
				rec_byte = UART_recieveByte();
    236c:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_recieveByte>
    2370:	fe 01       	movw	r30, r28
    2372:	e0 5b       	subi	r30, 0xB0	; 176
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 83       	st	Z, r24
				password2[i] = rec_byte;
    2378:	fe 01       	movw	r30, r28
    237a:	e9 5b       	subi	r30, 0xB9	; 185
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	20 81       	ld	r18, Z
    2380:	31 81       	ldd	r19, Z+1	; 0x01
    2382:	fe 01       	movw	r30, r28
    2384:	ef 5a       	subi	r30, 0xAF	; 175
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	dc 01       	movw	r26, r24
    238e:	a2 0f       	add	r26, r18
    2390:	b3 1f       	adc	r27, r19
    2392:	fe 01       	movw	r30, r28
    2394:	e0 5b       	subi	r30, 0xB0	; 176
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 81       	ld	r24, Z
    239a:	8c 93       	st	X, r24
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	a8 ec       	ldi	r26, 0xC8	; 200
    23a2:	b2 e4       	ldi	r27, 0x42	; 66
    23a4:	8b 87       	std	Y+11, r24	; 0x0b
    23a6:	9c 87       	std	Y+12, r25	; 0x0c
    23a8:	ad 87       	std	Y+13, r26	; 0x0d
    23aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a ef       	ldi	r20, 0xFA	; 250
    23ba:	54 e4       	ldi	r21, 0x44	; 68
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8f 83       	std	Y+7, r24	; 0x07
    23c6:	98 87       	std	Y+8, r25	; 0x08
    23c8:	a9 87       	std	Y+9, r26	; 0x09
    23ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <createPassword+0x65e>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	3f c0       	rjmp	.+126    	; 0x246c <createPassword+0x6dc>
	else if (__tmp > 65535)
    23ee:	6f 81       	ldd	r22, Y+7	; 0x07
    23f0:	78 85       	ldd	r23, Y+8	; 0x08
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2402:	18 16       	cp	r1, r24
    2404:	4c f5       	brge	.+82     	; 0x2458 <createPassword+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	6b 85       	ldd	r22, Y+11	; 0x0b
    2408:	7c 85       	ldd	r23, Y+12	; 0x0c
    240a:	8d 85       	ldd	r24, Y+13	; 0x0d
    240c:	9e 85       	ldd	r25, Y+14	; 0x0e
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	0f c0       	rjmp	.+30     	; 0x244e <createPassword+0x6be>
    2430:	88 ec       	ldi	r24, 0xC8	; 200
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <createPassword+0x6ac>
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	69 f7       	brne	.-38     	; 0x2430 <createPassword+0x6a0>
    2456:	14 c0       	rjmp	.+40     	; 0x2480 <createPassword+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <createPassword+0x6e8>
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		while(match != 0){
			UART_sendByte(0);
			//_delay_ms(500);
			for(int i=0; i<PASS_SIZE ; i++){
    2480:	de 01       	movw	r26, r28
    2482:	a9 5b       	subi	r26, 0xB9	; 185
    2484:	bf 4f       	sbci	r27, 0xFF	; 255
    2486:	fe 01       	movw	r30, r28
    2488:	e9 5b       	subi	r30, 0xB9	; 185
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	11 96       	adiw	r26, 0x01	; 1
    2494:	9c 93       	st	X, r25
    2496:	8e 93       	st	-X, r24
    2498:	80 91 79 00 	lds	r24, 0x0079
    249c:	90 91 7a 00 	lds	r25, 0x007A
    24a0:	fe 01       	movw	r30, r28
    24a2:	e9 5b       	subi	r30, 0xB9	; 185
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	20 81       	ld	r18, Z
    24a8:	31 81       	ldd	r19, Z+1	; 0x01
    24aa:	28 17       	cp	r18, r24
    24ac:	39 07       	cpc	r19, r25
    24ae:	0c f4       	brge	.+2      	; 0x24b2 <createPassword+0x722>
    24b0:	5d cf       	rjmp	.-326    	; 0x236c <createPassword+0x5dc>
				rec_byte = UART_recieveByte();
				password2[i] = rec_byte;
				_delay_ms(100);
			}
			match = compare(password2,password1);
    24b2:	fe 01       	movw	r30, r28
    24b4:	ef 5a       	subi	r30, 0xAF	; 175
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	fe 01       	movw	r30, r28
    24be:	ed 5a       	subi	r30, 0xAD	; 173
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	20 81       	ld	r18, Z
    24c4:	31 81       	ldd	r19, Z+1	; 0x01
    24c6:	b9 01       	movw	r22, r18
    24c8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <compare>
    24cc:	fe 01       	movw	r30, r28
    24ce:	e3 5b       	subi	r30, 0xB3	; 179
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
		UART_sendByte(1);
		save_password(password2);
		password_is_set = 1;
	}
	else{
		while(match != 0){
    24d6:	fe 01       	movw	r30, r28
    24d8:	e3 5b       	subi	r30, 0xB3	; 179
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <createPassword+0x756>
    24e4:	3a cf       	rjmp	.-396    	; 0x235a <createPassword+0x5ca>
				password2[i] = rec_byte;
				_delay_ms(100);
			}
			match = compare(password2,password1);
		}
		save_password(password2);
    24e6:	fe 01       	movw	r30, r28
    24e8:	ef 5a       	subi	r30, 0xAF	; 175
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <save_password>
		UART_sendByte(1);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	0e 94 02 0c 	call	0x1804	; 0x1804 <UART_sendByte>
		password_is_set = 1;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	90 93 93 00 	sts	0x0093, r25
    2502:	80 93 92 00 	sts	0x0092, r24
    2506:	67 96       	adiw	r28, 0x17	; 23
    2508:	2e ad       	ldd	r18, Y+62	; 0x3e
    250a:	3f ad       	ldd	r19, Y+63	; 0x3f
    250c:	67 97       	sbiw	r28, 0x17	; 23
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	3e bf       	out	0x3e, r19	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	2d bf       	out	0x3d, r18	; 61
	}


}
    2518:	6d 96       	adiw	r28, 0x1d	; 29
    251a:	8e ad       	ldd	r24, Y+62	; 0x3e
    251c:	9f ad       	ldd	r25, Y+63	; 0x3f
    251e:	6d 97       	sbiw	r28, 0x1d	; 29
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	9e bf       	out	0x3e, r25	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	8d bf       	out	0x3d, r24	; 61
    252a:	c4 5a       	subi	r28, 0xA4	; 164
    252c:	df 4f       	sbci	r29, 0xFF	; 255
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	08 95       	ret

00002542 <countOneSecond>:
void countOneSecond()
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
	/* the call back function to count 1 second */
	g_ticks++;
    254a:	80 91 94 00 	lds	r24, 0x0094
    254e:	90 91 95 00 	lds	r25, 0x0095
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	90 93 95 00 	sts	0x0095, r25
    2558:	80 93 94 00 	sts	0x0094, r24
	if(g_ticks%1==0){
		GPIO_writePin(PORTD_ID, PIN7_ID, 1);
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	67 e0       	ldi	r22, 0x07	; 7
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
	}else{
		GPIO_writePin(PORTD_ID, PIN7_ID, 0);
	}
}
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <countSeconds>:
void countSeconds(uint8 seconds){
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	89 83       	std	Y+1, r24	; 0x01
	// start counting seconds
	//Timer1_ConfigType Timer1_Config = {0,31249,PRESCALER_256,COMPARE_MODE};
	Timer1_setCallBackFunction(countOneSecond);
    2578:	81 ea       	ldi	r24, 0xA1	; 161
    257a:	92 e1       	ldi	r25, 0x12	; 18
    257c:	0e 94 01 0b 	call	0x1602	; 0x1602 <Timer1_setCallBackFunction>
	Timer1_init(&timer_configurations);
    2580:	8d e7       	ldi	r24, 0x7D	; 125
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 92 0a 	call	0x1524	; 0x1524 <Timer1_init>

	g_ticks = 0;
    2588:	10 92 95 00 	sts	0x0095, r1
    258c:	10 92 94 00 	sts	0x0094, r1
	while (g_ticks < seconds) {
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	80 91 94 00 	lds	r24, 0x0094
    259a:	90 91 95 00 	lds	r25, 0x0095
    259e:	82 17       	cp	r24, r18
    25a0:	93 07       	cpc	r25, r19
    25a2:	b4 f3       	brlt	.-20     	; 0x2590 <countSeconds+0x24>
	}

	Timer1_deInit();
    25a4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <Timer1_deInit>
	g_ticks=0;
    25a8:	10 92 95 00 	sts	0x0095, r1
    25ac:	10 92 94 00 	sts	0x0094, r1
}
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <alarmBuzzer>:

void alarmBuzzer(){
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
	Buzzer_on();
    25c0:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
	countSeconds(60);
    25c4:	8c e3       	ldi	r24, 0x3C	; 60
    25c6:	0e 94 b6 12 	call	0x256c	; 0x256c <countSeconds>
	Buzzer_off();
    25ca:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
}
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <compare_to_stored>:
int compare_to_stored(uint8 pass[PASS_SIZE]){
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	28 97       	sbiw	r28, 0x08	; 8
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
	uint8 data;
	for(int i=0; i<PASS_SIZE; i++){
    25ec:	1b 82       	std	Y+3, r1	; 0x03
    25ee:	1a 82       	std	Y+2, r1	; 0x02
    25f0:	20 c0       	rjmp	.+64     	; 0x2632 <compare_to_stored+0x5e>
		uint8 result = EEPROM_readByte(PASSWORD_ADDRESS_LOCATION + i,&data);
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	9b 81       	ldd	r25, Y+3	; 0x03
    25f6:	80 5b       	subi	r24, 0xB0	; 176
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	9e 01       	movw	r18, r28
    25fc:	2c 5f       	subi	r18, 0xFC	; 252
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	b9 01       	movw	r22, r18
    2602:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
    2606:	89 83       	std	Y+1, r24	; 0x01
		if(data != pass[i])
    2608:	2a 81       	ldd	r18, Y+2	; 0x02
    260a:	3b 81       	ldd	r19, Y+3	; 0x03
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	90 81       	ld	r25, Z
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	98 17       	cp	r25, r24
    261c:	29 f0       	breq	.+10     	; 0x2628 <compare_to_stored+0x54>
			return -1;
    261e:	8f ef       	ldi	r24, 0xFF	; 255
    2620:	9f ef       	ldi	r25, 0xFF	; 255
    2622:	98 87       	std	Y+8, r25	; 0x08
    2624:	8f 83       	std	Y+7, r24	; 0x07
    2626:	10 c0       	rjmp	.+32     	; 0x2648 <compare_to_stored+0x74>
	countSeconds(60);
	Buzzer_off();
}
int compare_to_stored(uint8 pass[PASS_SIZE]){
	uint8 data;
	for(int i=0; i<PASS_SIZE; i++){
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	9b 83       	std	Y+3, r25	; 0x03
    2630:	8a 83       	std	Y+2, r24	; 0x02
    2632:	20 91 79 00 	lds	r18, 0x0079
    2636:	30 91 7a 00 	lds	r19, 0x007A
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	82 17       	cp	r24, r18
    2640:	93 07       	cpc	r25, r19
    2642:	bc f2       	brlt	.-82     	; 0x25f2 <compare_to_stored+0x1e>
		uint8 result = EEPROM_readByte(PASSWORD_ADDRESS_LOCATION + i,&data);
		if(data != pass[i])
			return -1;
	}
	return 0 ;
    2644:	18 86       	std	Y+8, r1	; 0x08
    2646:	1f 82       	std	Y+7, r1	; 0x07
    2648:	8f 81       	ldd	r24, Y+7	; 0x07
    264a:	98 85       	ldd	r25, Y+8	; 0x08
}
    264c:	28 96       	adiw	r28, 0x08	; 8
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <verifyPassword>:
void verifyPassword(){
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	6a 97       	sbiw	r28, 0x1a	; 26
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
	valid = compare_to_stored(password_to_check);
	if(valid==0)
		UART_sendByte(1);
	else
		UART_sendByte(0);
}
    2672:	2d b7       	in	r18, 0x3d	; 61
    2674:	3e b7       	in	r19, 0x3e	; 62
    2676:	3a 8f       	std	Y+26, r19	; 0x1a
    2678:	29 8f       	std	Y+25, r18	; 0x19
		if(data != pass[i])
			return -1;
	}
	return 0 ;
}
void verifyPassword(){
    267a:	8d b7       	in	r24, 0x3d	; 61
    267c:	9e b7       	in	r25, 0x3e	; 62
    267e:	9e 8b       	std	Y+22, r25	; 0x16
    2680:	8d 8b       	std	Y+21, r24	; 0x15
	uint8 valid=1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 password_to_check[PASS_SIZE];
    2686:	80 91 79 00 	lds	r24, 0x0079
    268a:	90 91 7a 00 	lds	r25, 0x007A
    268e:	2d b7       	in	r18, 0x3d	; 61
    2690:	3e b7       	in	r19, 0x3e	; 62
    2692:	28 1b       	sub	r18, r24
    2694:	39 0b       	sbc	r19, r25
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	3e bf       	out	0x3e, r19	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	2d bf       	out	0x3d, r18	; 61
    26a0:	8d b7       	in	r24, 0x3d	; 61
    26a2:	9e b7       	in	r25, 0x3e	; 62
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	98 8f       	std	Y+24, r25	; 0x18
    26a8:	8f 8b       	std	Y+23, r24	; 0x17
    26aa:	8f 89       	ldd	r24, Y+23	; 0x17
    26ac:	98 8d       	ldd	r25, Y+24	; 0x18
    26ae:	00 96       	adiw	r24, 0x00	; 0
    26b0:	98 8f       	std	Y+24, r25	; 0x18
    26b2:	8f 8b       	std	Y+23, r24	; 0x17
    26b4:	2f 89       	ldd	r18, Y+23	; 0x17
    26b6:	38 8d       	ldd	r19, Y+24	; 0x18
    26b8:	3c 8b       	std	Y+20, r19	; 0x14
    26ba:	2b 8b       	std	Y+19, r18	; 0x13
	uint8 byte_rec = '-';
    26bc:	8d e2       	ldi	r24, 0x2D	; 45
    26be:	89 8b       	std	Y+17, r24	; 0x11
	for(int i=0; i<PASS_SIZE; i++){
    26c0:	18 8a       	std	Y+16, r1	; 0x10
    26c2:	1f 86       	std	Y+15, r1	; 0x0f
    26c4:	83 c0       	rjmp	.+262    	; 0x27cc <verifyPassword+0x16e>
		byte_rec = UART_recieveByte();
    26c6:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_recieveByte>
    26ca:	89 8b       	std	Y+17, r24	; 0x11
		password_to_check[i] = byte_rec;
    26cc:	2f 85       	ldd	r18, Y+15	; 0x0f
    26ce:	38 89       	ldd	r19, Y+16	; 0x10
    26d0:	8b 89       	ldd	r24, Y+19	; 0x13
    26d2:	9c 89       	ldd	r25, Y+20	; 0x14
    26d4:	fc 01       	movw	r30, r24
    26d6:	e2 0f       	add	r30, r18
    26d8:	f3 1f       	adc	r31, r19
    26da:	89 89       	ldd	r24, Y+17	; 0x11
    26dc:	80 83       	st	Z, r24
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a8 ec       	ldi	r26, 0xC8	; 200
    26e4:	b2 e4       	ldi	r27, 0x42	; 66
    26e6:	8b 87       	std	Y+11, r24	; 0x0b
    26e8:	9c 87       	std	Y+12, r25	; 0x0c
    26ea:	ad 87       	std	Y+13, r26	; 0x0d
    26ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a ef       	ldi	r20, 0xFA	; 250
    26fc:	54 e4       	ldi	r21, 0x44	; 68
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8f 83       	std	Y+7, r24	; 0x07
    2708:	98 87       	std	Y+8, r25	; 0x08
    270a:	a9 87       	std	Y+9, r26	; 0x09
    270c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	2c f4       	brge	.+10     	; 0x2730 <verifyPassword+0xd2>
		__ticks = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	3f c0       	rjmp	.+126    	; 0x27ae <verifyPassword+0x150>
	else if (__tmp > 65535)
    2730:	6f 81       	ldd	r22, Y+7	; 0x07
    2732:	78 85       	ldd	r23, Y+8	; 0x08
    2734:	89 85       	ldd	r24, Y+9	; 0x09
    2736:	9a 85       	ldd	r25, Y+10	; 0x0a
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	4c f5       	brge	.+82     	; 0x279a <verifyPassword+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	6b 85       	ldd	r22, Y+11	; 0x0b
    274a:	7c 85       	ldd	r23, Y+12	; 0x0c
    274c:	8d 85       	ldd	r24, Y+13	; 0x0d
    274e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e2       	ldi	r20, 0x20	; 32
    2756:	51 e4       	ldi	r21, 0x41	; 65
    2758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	0f c0       	rjmp	.+30     	; 0x2790 <verifyPassword+0x132>
    2772:	88 ec       	ldi	r24, 0xC8	; 200
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9c 83       	std	Y+4, r25	; 0x04
    2778:	8b 83       	std	Y+3, r24	; 0x03
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <verifyPassword+0x120>
    2782:	9c 83       	std	Y+4, r25	; 0x04
    2784:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	8d 81       	ldd	r24, Y+5	; 0x05
    2792:	9e 81       	ldd	r25, Y+6	; 0x06
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	69 f7       	brne	.-38     	; 0x2772 <verifyPassword+0x114>
    2798:	14 c0       	rjmp	.+40     	; 0x27c2 <verifyPassword+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <verifyPassword+0x15c>
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	89 83       	std	Y+1, r24	; 0x01
}
void verifyPassword(){
	uint8 valid=1;
	uint8 password_to_check[PASS_SIZE];
	uint8 byte_rec = '-';
	for(int i=0; i<PASS_SIZE; i++){
    27c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c4:	98 89       	ldd	r25, Y+16	; 0x10
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	98 8b       	std	Y+16, r25	; 0x10
    27ca:	8f 87       	std	Y+15, r24	; 0x0f
    27cc:	20 91 79 00 	lds	r18, 0x0079
    27d0:	30 91 7a 00 	lds	r19, 0x007A
    27d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d6:	98 89       	ldd	r25, Y+16	; 0x10
    27d8:	82 17       	cp	r24, r18
    27da:	93 07       	cpc	r25, r19
    27dc:	0c f4       	brge	.+2      	; 0x27e0 <verifyPassword+0x182>
    27de:	73 cf       	rjmp	.-282    	; 0x26c6 <verifyPassword+0x68>
		byte_rec = UART_recieveByte();
		password_to_check[i] = byte_rec;
		_delay_ms(100);
	}
	valid = compare_to_stored(password_to_check);
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	9c 89       	ldd	r25, Y+20	; 0x14
    27e4:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <compare_to_stored>
    27e8:	8a 8b       	std	Y+18, r24	; 0x12
	if(valid==0)
    27ea:	8a 89       	ldd	r24, Y+18	; 0x12
    27ec:	88 23       	and	r24, r24
    27ee:	21 f4       	brne	.+8      	; 0x27f8 <verifyPassword+0x19a>
		UART_sendByte(1);
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	0e 94 02 0c 	call	0x1804	; 0x1804 <UART_sendByte>
    27f6:	03 c0       	rjmp	.+6      	; 0x27fe <verifyPassword+0x1a0>
	else
		UART_sendByte(0);
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	0e 94 02 0c 	call	0x1804	; 0x1804 <UART_sendByte>
    27fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2800:	9e 89       	ldd	r25, Y+22	; 0x16
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	9e bf       	out	0x3e, r25	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	8d bf       	out	0x3d, r24	; 61
}
    280c:	29 8d       	ldd	r18, Y+25	; 0x19
    280e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	3e bf       	out	0x3e, r19	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	2d bf       	out	0x3d, r18	; 61
    281a:	6a 96       	adiw	r28, 0x1a	; 26
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <openDoor>:

void openDoor(){
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
	/*rotate clockwise for 15 seconds (Unlocking the door)*/
	DcMotor_Rotate(Clockwise, 99);
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	63 e6       	ldi	r22, 0x63	; 99
    2838:	0e 94 4d 0a 	call	0x149a	; 0x149a <DcMotor_Rotate>
	countSeconds(15);
    283c:	8f e0       	ldi	r24, 0x0F	; 15
    283e:	0e 94 b6 12 	call	0x256c	; 0x256c <countSeconds>

	DcMotor_Rotate(Stop, 0);
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	0e 94 4d 0a 	call	0x149a	; 0x149a <DcMotor_Rotate>
}
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <closeDoor>:
void closeDoor(){
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	/*rotate clockwise for 15 seconds (locking the door)*/
	DcMotor_Rotate(Anticlockwise, 99);
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	63 e6       	ldi	r22, 0x63	; 99
    285c:	0e 94 4d 0a 	call	0x149a	; 0x149a <DcMotor_Rotate>
	countSeconds(15);
    2860:	8f e0       	ldi	r24, 0x0F	; 15
    2862:	0e 94 b6 12 	call	0x256c	; 0x256c <countSeconds>
	DcMotor_Rotate(Stop, 0);
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	0e 94 4d 0a 	call	0x149a	; 0x149a <DcMotor_Rotate>
}
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <main>:

int main(void){
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	a8 97       	sbiw	r28, 0x28	; 40
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1<<7);
    2888:	af e5       	ldi	r26, 0x5F	; 95
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	ef e5       	ldi	r30, 0x5F	; 95
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	80 68       	ori	r24, 0x80	; 128
    2894:	8c 93       	st	X, r24
	UART_ConfigType UART_Config = {EIGHT,DISABLED,ONE,BAUD_RATE_9600};
    2896:	ce 01       	movw	r24, r28
    2898:	40 96       	adiw	r24, 0x10	; 16
    289a:	98 a3       	std	Y+32, r25	; 0x20
    289c:	8f 8f       	std	Y+31, r24	; 0x1f
    289e:	e9 e8       	ldi	r30, 0x89	; 137
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	fa a3       	std	Y+34, r31	; 0x22
    28a4:	e9 a3       	std	Y+33, r30	; 0x21
    28a6:	f7 e0       	ldi	r31, 0x07	; 7
    28a8:	fb a3       	std	Y+35, r31	; 0x23
    28aa:	e9 a1       	ldd	r30, Y+33	; 0x21
    28ac:	fa a1       	ldd	r31, Y+34	; 0x22
    28ae:	00 80       	ld	r0, Z
    28b0:	89 a1       	ldd	r24, Y+33	; 0x21
    28b2:	9a a1       	ldd	r25, Y+34	; 0x22
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	9a a3       	std	Y+34, r25	; 0x22
    28b8:	89 a3       	std	Y+33, r24	; 0x21
    28ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    28bc:	f8 a1       	ldd	r31, Y+32	; 0x20
    28be:	00 82       	st	Z, r0
    28c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c2:	98 a1       	ldd	r25, Y+32	; 0x20
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	98 a3       	std	Y+32, r25	; 0x20
    28c8:	8f 8f       	std	Y+31, r24	; 0x1f
    28ca:	9b a1       	ldd	r25, Y+35	; 0x23
    28cc:	91 50       	subi	r25, 0x01	; 1
    28ce:	9b a3       	std	Y+35, r25	; 0x23
    28d0:	eb a1       	ldd	r30, Y+35	; 0x23
    28d2:	ee 23       	and	r30, r30
    28d4:	51 f7       	brne	.-44     	; 0x28aa <main+0x36>
	TWI_ConfigType twi_config_ptr = { address_1, bit_rate_400Kbits };
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	8f 8b       	std	Y+23, r24	; 0x17
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	88 8f       	std	Y+24, r24	; 0x18
	Timer1_ConfigType timer_configurations = { 0, 8000, prescale_8, ctc_mode };
    28de:	ce 01       	movw	r24, r28
    28e0:	49 96       	adiw	r24, 0x19	; 25
    28e2:	9d a3       	std	Y+37, r25	; 0x25
    28e4:	8c a3       	std	Y+36, r24	; 0x24
    28e6:	e3 e8       	ldi	r30, 0x83	; 131
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	ff a3       	std	Y+39, r31	; 0x27
    28ec:	ee a3       	std	Y+38, r30	; 0x26
    28ee:	f6 e0       	ldi	r31, 0x06	; 6
    28f0:	f8 a7       	std	Y+40, r31	; 0x28
    28f2:	ee a1       	ldd	r30, Y+38	; 0x26
    28f4:	ff a1       	ldd	r31, Y+39	; 0x27
    28f6:	00 80       	ld	r0, Z
    28f8:	8e a1       	ldd	r24, Y+38	; 0x26
    28fa:	9f a1       	ldd	r25, Y+39	; 0x27
    28fc:	01 96       	adiw	r24, 0x01	; 1
    28fe:	9f a3       	std	Y+39, r25	; 0x27
    2900:	8e a3       	std	Y+38, r24	; 0x26
    2902:	ec a1       	ldd	r30, Y+36	; 0x24
    2904:	fd a1       	ldd	r31, Y+37	; 0x25
    2906:	00 82       	st	Z, r0
    2908:	8c a1       	ldd	r24, Y+36	; 0x24
    290a:	9d a1       	ldd	r25, Y+37	; 0x25
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	9d a3       	std	Y+37, r25	; 0x25
    2910:	8c a3       	std	Y+36, r24	; 0x24
    2912:	98 a5       	ldd	r25, Y+40	; 0x28
    2914:	91 50       	subi	r25, 0x01	; 1
    2916:	98 a7       	std	Y+40, r25	; 0x28
    2918:	e8 a5       	ldd	r30, Y+40	; 0x28
    291a:	ee 23       	and	r30, r30
    291c:	51 f7       	brne	.-44     	; 0x28f2 <main+0x7e>

	TWI_init(&twi_config_ptr);
    291e:	ce 01       	movw	r24, r28
    2920:	47 96       	adiw	r24, 0x17	; 23
    2922:	0e 94 ab 09 	call	0x1356	; 0x1356 <TWI_init>
	DcMotor_Init();
    2926:	0e 94 32 0a 	call	0x1464	; 0x1464 <DcMotor_Init>
	Buzzer_init();
    292a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	UART_init(&UART_Config);
    292e:	ce 01       	movw	r24, r28
    2930:	40 96       	adiw	r24, 0x10	; 16
    2932:	0e 94 91 0b 	call	0x1722	; 0x1722 <UART_init>

	Timer1_setCallBackFunction(countOneSecond);
    2936:	81 ea       	ldi	r24, 0xA1	; 161
    2938:	92 e1       	ldi	r25, 0x12	; 18
    293a:	0e 94 01 0b 	call	0x1602	; 0x1602 <Timer1_setCallBackFunction>

	while(1){
		uint8 choice = UART_recieveByte();
    293e:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_recieveByte>
    2942:	8f 87       	std	Y+15, r24	; 0x0f
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a8 ec       	ldi	r26, 0xC8	; 200
    294a:	b2 e4       	ldi	r27, 0x42	; 66
    294c:	8b 87       	std	Y+11, r24	; 0x0b
    294e:	9c 87       	std	Y+12, r25	; 0x0c
    2950:	ad 87       	std	Y+13, r26	; 0x0d
    2952:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	6b 85       	ldd	r22, Y+11	; 0x0b
    2956:	7c 85       	ldd	r23, Y+12	; 0x0c
    2958:	8d 85       	ldd	r24, Y+13	; 0x0d
    295a:	9e 85       	ldd	r25, Y+14	; 0x0e
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a ef       	ldi	r20, 0xFA	; 250
    2962:	54 e4       	ldi	r21, 0x44	; 68
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8f 83       	std	Y+7, r24	; 0x07
    296e:	98 87       	std	Y+8, r25	; 0x08
    2970:	a9 87       	std	Y+9, r26	; 0x09
    2972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2974:	6f 81       	ldd	r22, Y+7	; 0x07
    2976:	78 85       	ldd	r23, Y+8	; 0x08
    2978:	89 85       	ldd	r24, Y+9	; 0x09
    297a:	9a 85       	ldd	r25, Y+10	; 0x0a
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <main+0x122>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <main+0x1a0>
	else if (__tmp > 65535)
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <main+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <main+0x182>
    29d8:	88 ec       	ldi	r24, 0xC8	; 200
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	8b 83       	std	Y+3, r24	; 0x03
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <main+0x170>
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <main+0x164>
    29fe:	14 c0       	rjmp	.+40     	; 0x2a28 <main+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <main+0x1ac>
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
		//GPIO_writePin(PORTA_ID, PIN0_ID, 1);
		_delay_ms(100);
		//GPIO_writePin(PORTA_ID, PIN0_ID, 0);
		if(choice == CREATE_PASSWORD){
    2a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2a:	88 23       	and	r24, r24
    2a2c:	11 f4       	brne	.+4      	; 0x2a32 <main+0x1be>
			createPassword();
    2a2e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <createPassword>
		}
		if(choice == VALIDATE_PASSWORD){
    2a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	11 f4       	brne	.+4      	; 0x2a3c <main+0x1c8>
			verifyPassword();
    2a38:	0e 94 2f 13 	call	0x265e	; 0x265e <verifyPassword>
		}
		if(choice == OPEN_DOOR){
    2a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	39 f4       	brne	.+14     	; 0x2a50 <main+0x1dc>
			openDoor();
    2a42:	0e 94 16 14 	call	0x282c	; 0x282c <openDoor>
			countSeconds(3);
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	0e 94 b6 12 	call	0x256c	; 0x256c <countSeconds>
			closeDoor();
    2a4c:	0e 94 28 14 	call	0x2850	; 0x2850 <closeDoor>
		}
		if(choice == UART_ERROR){
    2a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a52:	84 30       	cpi	r24, 0x04	; 4
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <main+0x1e4>
    2a56:	73 cf       	rjmp	.-282    	; 0x293e <main+0xca>
			alarmBuzzer();
    2a58:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <alarmBuzzer>
    2a5c:	70 cf       	rjmp	.-288    	; 0x293e <main+0xca>

00002a5e <__udivmodhi4>:
    2a5e:	aa 1b       	sub	r26, r26
    2a60:	bb 1b       	sub	r27, r27
    2a62:	51 e1       	ldi	r21, 0x11	; 17
    2a64:	07 c0       	rjmp	.+14     	; 0x2a74 <__udivmodhi4_ep>

00002a66 <__udivmodhi4_loop>:
    2a66:	aa 1f       	adc	r26, r26
    2a68:	bb 1f       	adc	r27, r27
    2a6a:	a6 17       	cp	r26, r22
    2a6c:	b7 07       	cpc	r27, r23
    2a6e:	10 f0       	brcs	.+4      	; 0x2a74 <__udivmodhi4_ep>
    2a70:	a6 1b       	sub	r26, r22
    2a72:	b7 0b       	sbc	r27, r23

00002a74 <__udivmodhi4_ep>:
    2a74:	88 1f       	adc	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	5a 95       	dec	r21
    2a7a:	a9 f7       	brne	.-22     	; 0x2a66 <__udivmodhi4_loop>
    2a7c:	80 95       	com	r24
    2a7e:	90 95       	com	r25
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	08 95       	ret

00002a86 <__udivmodsi4>:
    2a86:	a1 e2       	ldi	r26, 0x21	; 33
    2a88:	1a 2e       	mov	r1, r26
    2a8a:	aa 1b       	sub	r26, r26
    2a8c:	bb 1b       	sub	r27, r27
    2a8e:	fd 01       	movw	r30, r26
    2a90:	0d c0       	rjmp	.+26     	; 0x2aac <__udivmodsi4_ep>

00002a92 <__udivmodsi4_loop>:
    2a92:	aa 1f       	adc	r26, r26
    2a94:	bb 1f       	adc	r27, r27
    2a96:	ee 1f       	adc	r30, r30
    2a98:	ff 1f       	adc	r31, r31
    2a9a:	a2 17       	cp	r26, r18
    2a9c:	b3 07       	cpc	r27, r19
    2a9e:	e4 07       	cpc	r30, r20
    2aa0:	f5 07       	cpc	r31, r21
    2aa2:	20 f0       	brcs	.+8      	; 0x2aac <__udivmodsi4_ep>
    2aa4:	a2 1b       	sub	r26, r18
    2aa6:	b3 0b       	sbc	r27, r19
    2aa8:	e4 0b       	sbc	r30, r20
    2aaa:	f5 0b       	sbc	r31, r21

00002aac <__udivmodsi4_ep>:
    2aac:	66 1f       	adc	r22, r22
    2aae:	77 1f       	adc	r23, r23
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	1a 94       	dec	r1
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <__udivmodsi4_loop>
    2ab8:	60 95       	com	r22
    2aba:	70 95       	com	r23
    2abc:	80 95       	com	r24
    2abe:	90 95       	com	r25
    2ac0:	9b 01       	movw	r18, r22
    2ac2:	ac 01       	movw	r20, r24
    2ac4:	bd 01       	movw	r22, r26
    2ac6:	cf 01       	movw	r24, r30
    2ac8:	08 95       	ret

00002aca <__prologue_saves__>:
    2aca:	2f 92       	push	r2
    2acc:	3f 92       	push	r3
    2ace:	4f 92       	push	r4
    2ad0:	5f 92       	push	r5
    2ad2:	6f 92       	push	r6
    2ad4:	7f 92       	push	r7
    2ad6:	8f 92       	push	r8
    2ad8:	9f 92       	push	r9
    2ada:	af 92       	push	r10
    2adc:	bf 92       	push	r11
    2ade:	cf 92       	push	r12
    2ae0:	df 92       	push	r13
    2ae2:	ef 92       	push	r14
    2ae4:	ff 92       	push	r15
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	ca 1b       	sub	r28, r26
    2af4:	db 0b       	sbc	r29, r27
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	09 94       	ijmp

00002b02 <__epilogue_restores__>:
    2b02:	2a 88       	ldd	r2, Y+18	; 0x12
    2b04:	39 88       	ldd	r3, Y+17	; 0x11
    2b06:	48 88       	ldd	r4, Y+16	; 0x10
    2b08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b14:	b9 84       	ldd	r11, Y+9	; 0x09
    2b16:	c8 84       	ldd	r12, Y+8	; 0x08
    2b18:	df 80       	ldd	r13, Y+7	; 0x07
    2b1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b20:	1b 81       	ldd	r17, Y+3	; 0x03
    2b22:	aa 81       	ldd	r26, Y+2	; 0x02
    2b24:	b9 81       	ldd	r27, Y+1	; 0x01
    2b26:	ce 0f       	add	r28, r30
    2b28:	d1 1d       	adc	r29, r1
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	ed 01       	movw	r28, r26
    2b36:	08 95       	ret

00002b38 <_exit>:
    2b38:	f8 94       	cli

00002b3a <__stop_program>:
    2b3a:	ff cf       	rjmp	.-2      	; 0x2b3a <__stop_program>
