
HMI_ECU_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000440e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  0000440e  000044a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800102  00800102  00004544  2**0
                  ALLOC
  3 .stab         000038f4  00000000  00000000  00004544  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013cf  00000000  00000000  00007e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009207  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009347  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000094b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bfeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cd98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d185  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d953  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <main>
      8a:	0c 94 05 22 	jmp	0x440a	; 0x440a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 21 	jmp	0x4312	; 0x4312 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ee       	ldi	r26, 0xE8	; 232
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 21 	jmp	0x434a	; 0x434a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 21 	jmp	0x432a	; 0x432a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 21 	jmp	0x432a	; 0x432a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 21 	jmp	0x4312	; 0x4312 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ee       	ldi	r24, 0xE8	; 232
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 21 	jmp	0x434a	; 0x434a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 95 21 	jmp	0x432a	; 0x432a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 95 21 	jmp	0x432a	; 0x432a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 95 21 	jmp	0x432a	; 0x432a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b5 21 	jmp	0x436a	; 0x436a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	60 97       	sbiw	r28, 0x10	; 16
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	64 e0       	ldi	r22, 0x04	; 4
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	65 e0       	ldi	r22, 0x05	; 5
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	66 e0       	ldi	r22, 0x06	; 6
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	67 e0       	ldi	r22, 0x07	; 7
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	62 e0       	ldi	r22, 0x02	; 2
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	63 e0       	ldi	r22, 0x03	; 3
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	64 e0       	ldi	r22, 0x04	; 4
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	65 e0       	ldi	r22, 0x05	; 5
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1226:	1f 86       	std	Y+15, r1	; 0x0f
    1228:	b4 c0       	rjmp	.+360    	; 0x1392 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    122a:	8f 85       	ldd	r24, Y+15	; 0x0f
    122c:	98 2f       	mov	r25, r24
    122e:	9c 5f       	subi	r25, 0xFC	; 252
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	69 2f       	mov	r22, r25
    1234:	41 e0       	ldi	r20, 0x01	; 1
    1236:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    123a:	8f 85       	ldd	r24, Y+15	; 0x0f
    123c:	98 2f       	mov	r25, r24
    123e:	9c 5f       	subi	r25, 0xFC	; 252
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	69 2f       	mov	r22, r25
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    124a:	18 8a       	std	Y+16, r1	; 0x10
    124c:	22 c0       	rjmp	.+68     	; 0x1292 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    124e:	88 89       	ldd	r24, Y+16	; 0x10
    1250:	98 2f       	mov	r25, r24
    1252:	9e 5f       	subi	r25, 0xFE	; 254
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	69 2f       	mov	r22, r25
    1258:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    125c:	88 23       	and	r24, r24
    125e:	b1 f4       	brne	.+44     	; 0x128c <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1260:	8f 85       	ldd	r24, Y+15	; 0x0f
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	98 2f       	mov	r25, r24
    1270:	88 89       	ldd	r24, Y+16	; 0x10
    1272:	89 0f       	add	r24, r25
    1274:	8f 5f       	subi	r24, 0xFF	; 255
    1276:	0e 94 ce 09 	call	0x139c	; 0x139c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    127a:	60 96       	adiw	r28, 0x10	; 16
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    128c:	88 89       	ldd	r24, Y+16	; 0x10
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	88 8b       	std	Y+16, r24	; 0x10
    1292:	88 89       	ldd	r24, Y+16	; 0x10
    1294:	84 30       	cpi	r24, 0x04	; 4
    1296:	d8 f2       	brcs	.-74     	; 0x124e <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1298:	8f 85       	ldd	r24, Y+15	; 0x0f
    129a:	98 2f       	mov	r25, r24
    129c:	9c 5f       	subi	r25, 0xFC	; 252
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	69 2f       	mov	r22, r25
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a0 ea       	ldi	r26, 0xA0	; 160
    12ae:	b0 e4       	ldi	r27, 0x40	; 64
    12b0:	8b 87       	std	Y+11, r24	; 0x0b
    12b2:	9c 87       	std	Y+12, r25	; 0x0c
    12b4:	ad 87       	std	Y+13, r26	; 0x0d
    12b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    12bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12be:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	4a ef       	ldi	r20, 0xFA	; 250
    12c6:	54 e4       	ldi	r21, 0x44	; 68
    12c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	8f 83       	std	Y+7, r24	; 0x07
    12d2:	98 87       	std	Y+8, r25	; 0x08
    12d4:	a9 87       	std	Y+9, r26	; 0x09
    12d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e8       	ldi	r20, 0x80	; 128
    12e6:	5f e3       	ldi	r21, 0x3F	; 63
    12e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ec:	88 23       	and	r24, r24
    12ee:	2c f4       	brge	.+10     	; 0x12fa <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9e 83       	std	Y+6, r25	; 0x06
    12f6:	8d 83       	std	Y+5, r24	; 0x05
    12f8:	3f c0       	rjmp	.+126    	; 0x1378 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    12fa:	6f 81       	ldd	r22, Y+7	; 0x07
    12fc:	78 85       	ldd	r23, Y+8	; 0x08
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	3f ef       	ldi	r19, 0xFF	; 255
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	57 e4       	ldi	r21, 0x47	; 71
    130a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130e:	18 16       	cp	r1, r24
    1310:	4c f5       	brge	.+82     	; 0x1364 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1312:	6b 85       	ldd	r22, Y+11	; 0x0b
    1314:	7c 85       	ldd	r23, Y+12	; 0x0c
    1316:	8d 85       	ldd	r24, Y+13	; 0x0d
    1318:	9e 85       	ldd	r25, Y+14	; 0x0e
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e2       	ldi	r20, 0x20	; 32
    1320:	51 e4       	ldi	r21, 0x41	; 65
    1322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	0f c0       	rjmp	.+30     	; 0x135a <KEYPAD_getPressedKey+0x198>
    133c:	88 ec       	ldi	r24, 0xC8	; 200
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	9c 83       	std	Y+4, r25	; 0x04
    1342:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <KEYPAD_getPressedKey+0x186>
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	9e 83       	std	Y+6, r25	; 0x06
    1358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	69 f7       	brne	.-38     	; 0x133c <KEYPAD_getPressedKey+0x17a>
    1362:	14 c0       	rjmp	.+40     	; 0x138c <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <KEYPAD_getPressedKey+0x1c2>
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    138c:	8f 85       	ldd	r24, Y+15	; 0x0f
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	8f 87       	std	Y+15, r24	; 0x0f
    1392:	8f 85       	ldd	r24, Y+15	; 0x0f
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	08 f4       	brcc	.+2      	; 0x139a <KEYPAD_getPressedKey+0x1d8>
    1398:	48 cf       	rjmp	.-368    	; 0x122a <KEYPAD_getPressedKey+0x68>
    139a:	45 cf       	rjmp	.-374    	; 0x1226 <KEYPAD_getPressedKey+0x64>

0000139c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    13aa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3c 83       	std	Y+4, r19	; 0x04
    13b4:	2b 83       	std	Y+3, r18	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    13c0:	70 c0       	rjmp	.+224    	; 0x14a2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	3c 81       	ldd	r19, Y+4	; 0x04
    13c6:	29 30       	cpi	r18, 0x09	; 9
    13c8:	31 05       	cpc	r19, r1
    13ca:	5c f5       	brge	.+86     	; 0x1422 <KEYPAD_4x4_adjustKeyNumber+0x86>
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	91 05       	cpc	r25, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    13d6:	59 c0       	rjmp	.+178    	; 0x148a <KEYPAD_4x4_adjustKeyNumber+0xee>
    13d8:	2b 81       	ldd	r18, Y+3	; 0x03
    13da:	3c 81       	ldd	r19, Y+4	; 0x04
    13dc:	25 30       	cpi	r18, 0x05	; 5
    13de:	31 05       	cpc	r19, r1
    13e0:	9c f4       	brge	.+38     	; 0x1408 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <KEYPAD_4x4_adjustKeyNumber+0x52>
    13ec:	48 c0       	rjmp	.+144    	; 0x147e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	23 30       	cpi	r18, 0x03	; 3
    13f4:	31 05       	cpc	r19, r1
    13f6:	0c f0       	brlt	.+2      	; 0x13fa <KEYPAD_4x4_adjustKeyNumber+0x5e>
    13f8:	45 c0       	rjmp	.+138    	; 0x1484 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	91 05       	cpc	r25, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1404:	39 c0       	rjmp	.+114    	; 0x1478 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1406:	68 c0       	rjmp	.+208    	; 0x14d8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1408:	2b 81       	ldd	r18, Y+3	; 0x03
    140a:	3c 81       	ldd	r19, Y+4	; 0x04
    140c:	26 30       	cpi	r18, 0x06	; 6
    140e:	31 05       	cpc	r19, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1412:	41 c0       	rjmp	.+130    	; 0x1496 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	87 30       	cpi	r24, 0x07	; 7
    141a:	91 05       	cpc	r25, r1
    141c:	0c f0       	brlt	.+2      	; 0x1420 <KEYPAD_4x4_adjustKeyNumber+0x84>
    141e:	3e c0       	rjmp	.+124    	; 0x149c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1420:	37 c0       	rjmp	.+110    	; 0x1490 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	2c 30       	cpi	r18, 0x0C	; 12
    1428:	31 05       	cpc	r19, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <KEYPAD_4x4_adjustKeyNumber+0x92>
    142c:	46 c0       	rjmp	.+140    	; 0x14ba <KEYPAD_4x4_adjustKeyNumber+0x11e>
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	8d 30       	cpi	r24, 0x0D	; 13
    1434:	91 05       	cpc	r25, r1
    1436:	5c f4       	brge	.+22     	; 0x144e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	2a 30       	cpi	r18, 0x0A	; 10
    143e:	31 05       	cpc	r19, r1
    1440:	b1 f1       	breq	.+108    	; 0x14ae <KEYPAD_4x4_adjustKeyNumber+0x112>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	8b 30       	cpi	r24, 0x0B	; 11
    1448:	91 05       	cpc	r25, r1
    144a:	a4 f5       	brge	.+104    	; 0x14b4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    144c:	2d c0       	rjmp	.+90     	; 0x14a8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	2e 30       	cpi	r18, 0x0E	; 14
    1454:	31 05       	cpc	r19, r1
    1456:	b9 f1       	breq	.+110    	; 0x14c6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	8e 30       	cpi	r24, 0x0E	; 14
    145e:	91 05       	cpc	r25, r1
    1460:	7c f1       	brlt	.+94     	; 0x14c0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	2f 30       	cpi	r18, 0x0F	; 15
    1468:	31 05       	cpc	r19, r1
    146a:	81 f1       	breq	.+96     	; 0x14cc <KEYPAD_4x4_adjustKeyNumber+0x130>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	80 31       	cpi	r24, 0x10	; 16
    1472:	91 05       	cpc	r25, r1
    1474:	71 f1       	breq	.+92     	; 0x14d2 <KEYPAD_4x4_adjustKeyNumber+0x136>
    1476:	30 c0       	rjmp	.+96     	; 0x14d8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    1478:	87 e3       	ldi	r24, 0x37	; 55
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	2f c0       	rjmp	.+94     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    147e:	88 e3       	ldi	r24, 0x38	; 56
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	2c c0       	rjmp	.+88     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    1484:	89 e3       	ldi	r24, 0x39	; 57
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	29 c0       	rjmp	.+82     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    148a:	85 e2       	ldi	r24, 0x25	; 37
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	26 c0       	rjmp	.+76     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    1490:	84 e3       	ldi	r24, 0x34	; 52
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	23 c0       	rjmp	.+70     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    1496:	85 e3       	ldi	r24, 0x35	; 53
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	20 c0       	rjmp	.+64     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    149c:	86 e3       	ldi	r24, 0x36	; 54
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	1d c0       	rjmp	.+58     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    14a2:	8a e2       	ldi	r24, 0x2A	; 42
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	1a c0       	rjmp	.+52     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    14a8:	81 e3       	ldi	r24, 0x31	; 49
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	17 c0       	rjmp	.+46     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    14ae:	82 e3       	ldi	r24, 0x32	; 50
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    14b4:	83 e3       	ldi	r24, 0x33	; 51
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	11 c0       	rjmp	.+34     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    14ba:	8d e2       	ldi	r24, 0x2D	; 45
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	0e c0       	rjmp	.+28     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = '13';  /* ASCII of Enter */
    14c0:	83 e3       	ldi	r24, 0x33	; 51
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    14c6:	80 e3       	ldi	r24, 0x30	; 48
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	08 c0       	rjmp	.+16     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    14cc:	8d e3       	ldi	r24, 0x3D	; 61
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    14d2:	8b e2       	ldi	r24, 0x2B	; 43
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
} 
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	2e 97       	sbiw	r28, 0x0e	; 14
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	62 e0       	ldi	r22, 0x02	; 2
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 ea       	ldi	r26, 0xA0	; 160
    151a:	b1 e4       	ldi	r27, 0x41	; 65
    151c:	8b 87       	std	Y+11, r24	; 0x0b
    151e:	9c 87       	std	Y+12, r25	; 0x0c
    1520:	ad 87       	std	Y+13, r26	; 0x0d
    1522:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a ef       	ldi	r20, 0xFA	; 250
    1532:	54 e4       	ldi	r21, 0x44	; 68
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8f 83       	std	Y+7, r24	; 0x07
    153e:	98 87       	std	Y+8, r25	; 0x08
    1540:	a9 87       	std	Y+9, r26	; 0x09
    1542:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1544:	6f 81       	ldd	r22, Y+7	; 0x07
    1546:	78 85       	ldd	r23, Y+8	; 0x08
    1548:	89 85       	ldd	r24, Y+9	; 0x09
    154a:	9a 85       	ldd	r25, Y+10	; 0x0a
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <LCD_init+0x7a>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1580:	7c 85       	ldd	r23, Y+12	; 0x0c
    1582:	8d 85       	ldd	r24, Y+13	; 0x0d
    1584:	9e 85       	ldd	r25, Y+14	; 0x0e
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <LCD_init+0xda>
    15a8:	88 ec       	ldi	r24, 0xC8	; 200
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <LCD_init+0xc8>
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <LCD_init+0xbc>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_init+0x104>
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	63 e0       	ldi	r22, 0x03	; 3
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	64 e0       	ldi	r22, 0x04	; 4
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	65 e0       	ldi	r22, 0x05	; 5
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	66 e0       	ldi	r22, 0x06	; 6
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1620:	83 e3       	ldi	r24, 0x33	; 51
    1622:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1626:	82 e3       	ldi	r24, 0x32	; 50
    1628:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    162c:	88 e2       	ldi	r24, 0x28	; 40
    162e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1632:	8c e0       	ldi	r24, 0x0C	; 12
    1634:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
}
    163e:	2e 96       	adiw	r28, 0x0e	; 14
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	c3 56       	subi	r28, 0x63	; 99
    165e:	d0 40       	sbci	r29, 0x00	; 0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	fe 01       	movw	r30, r28
    166c:	ed 59       	subi	r30, 0x9D	; 157
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    167c:	fe 01       	movw	r30, r28
    167e:	e1 5a       	subi	r30, 0xA1	; 161
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e8       	ldi	r26, 0x80	; 128
    1688:	bf e3       	ldi	r27, 0x3F	; 63
    168a:	80 83       	st	Z, r24
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	a2 83       	std	Z+2, r26	; 0x02
    1690:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	8e 01       	movw	r16, r28
    1694:	05 5a       	subi	r16, 0xA5	; 165
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	fe 01       	movw	r30, r28
    169a:	e1 5a       	subi	r30, 0xA1	; 161
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 83       	st	Z, r24
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	a2 83       	std	Z+2, r26	; 0x02
    16be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c0:	fe 01       	movw	r30, r28
    16c2:	e5 5a       	subi	r30, 0xA5	; 165
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	60 81       	ld	r22, Z
    16c8:	71 81       	ldd	r23, Z+1	; 0x01
    16ca:	82 81       	ldd	r24, Z+2	; 0x02
    16cc:	93 81       	ldd	r25, Z+3	; 0x03
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e8       	ldi	r20, 0x80	; 128
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16da:	88 23       	and	r24, r24
    16dc:	44 f4       	brge	.+16     	; 0x16ee <LCD_sendCommand+0x9e>
		__ticks = 1;
    16de:	fe 01       	movw	r30, r28
    16e0:	e7 5a       	subi	r30, 0xA7	; 167
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	64 c0       	rjmp	.+200    	; 0x17b6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    16ee:	fe 01       	movw	r30, r28
    16f0:	e5 5a       	subi	r30, 0xA5	; 165
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	0c f0       	brlt	.+2      	; 0x170e <LCD_sendCommand+0xbe>
    170c:	43 c0       	rjmp	.+134    	; 0x1794 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	fe 01       	movw	r30, r28
    1710:	e1 5a       	subi	r30, 0xA1	; 161
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8e 01       	movw	r16, r28
    172e:	07 5a       	subi	r16, 0xA7	; 167
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	f8 01       	movw	r30, r16
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    1744:	1f c0       	rjmp	.+62     	; 0x1784 <LCD_sendCommand+0x134>
    1746:	fe 01       	movw	r30, r28
    1748:	e9 5a       	subi	r30, 0xA9	; 169
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	88 ec       	ldi	r24, 0xC8	; 200
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
    1754:	fe 01       	movw	r30, r28
    1756:	e9 5a       	subi	r30, 0xA9	; 169
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_sendCommand+0x10e>
    1762:	fe 01       	movw	r30, r28
    1764:	e9 5a       	subi	r30, 0xA9	; 169
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176c:	de 01       	movw	r26, r28
    176e:	a7 5a       	subi	r26, 0xA7	; 167
    1770:	bf 4f       	sbci	r27, 0xFF	; 255
    1772:	fe 01       	movw	r30, r28
    1774:	e7 5a       	subi	r30, 0xA7	; 167
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	9c 93       	st	X, r25
    1782:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	fe 01       	movw	r30, r28
    1786:	e7 5a       	subi	r30, 0xA7	; 167
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	d1 f6       	brne	.-76     	; 0x1746 <LCD_sendCommand+0xf6>
    1792:	27 c0       	rjmp	.+78     	; 0x17e2 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	8e 01       	movw	r16, r28
    1796:	07 5a       	subi	r16, 0xA7	; 167
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	fe 01       	movw	r30, r28
    179c:	e5 5a       	subi	r30, 0xA5	; 165
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	f8 01       	movw	r30, r16
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	80 83       	st	Z, r24
    17b6:	de 01       	movw	r26, r28
    17b8:	ab 5a       	subi	r26, 0xAB	; 171
    17ba:	bf 4f       	sbci	r27, 0xFF	; 255
    17bc:	fe 01       	movw	r30, r28
    17be:	e7 5a       	subi	r30, 0xA7	; 167
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	8d 93       	st	X+, r24
    17c8:	9c 93       	st	X, r25
    17ca:	fe 01       	movw	r30, r28
    17cc:	eb 5a       	subi	r30, 0xAB	; 171
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <LCD_sendCommand+0x184>
    17d8:	fe 01       	movw	r30, r28
    17da:	eb 5a       	subi	r30, 0xAB	; 171
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    17ec:	fe 01       	movw	r30, r28
    17ee:	ef 5a       	subi	r30, 0xAF	; 175
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e8       	ldi	r26, 0x80	; 128
    17f8:	bf e3       	ldi	r27, 0x3F	; 63
    17fa:	80 83       	st	Z, r24
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	a2 83       	std	Z+2, r26	; 0x02
    1800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	8e 01       	movw	r16, r28
    1804:	03 5b       	subi	r16, 0xB3	; 179
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	fe 01       	movw	r30, r28
    180a:	ef 5a       	subi	r30, 0xAF	; 175
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a ef       	ldi	r20, 0xFA	; 250
    181c:	54 e4       	ldi	r21, 0x44	; 68
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	80 83       	st	Z, r24
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	a2 83       	std	Z+2, r26	; 0x02
    182e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1830:	fe 01       	movw	r30, r28
    1832:	e3 5b       	subi	r30, 0xB3	; 179
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	44 f4       	brge	.+16     	; 0x185e <LCD_sendCommand+0x20e>
		__ticks = 1;
    184e:	fe 01       	movw	r30, r28
    1850:	e5 5b       	subi	r30, 0xB5	; 181
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	64 c0       	rjmp	.+200    	; 0x1926 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    185e:	fe 01       	movw	r30, r28
    1860:	e3 5b       	subi	r30, 0xB3	; 179
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	4f e7       	ldi	r20, 0x7F	; 127
    1872:	57 e4       	ldi	r21, 0x47	; 71
    1874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1878:	18 16       	cp	r1, r24
    187a:	0c f0       	brlt	.+2      	; 0x187e <LCD_sendCommand+0x22e>
    187c:	43 c0       	rjmp	.+134    	; 0x1904 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	fe 01       	movw	r30, r28
    1880:	ef 5a       	subi	r30, 0xAF	; 175
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8e 01       	movw	r16, r28
    189e:	05 5b       	subi	r16, 0xB5	; 181
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	f8 01       	movw	r30, r16
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
    18b4:	1f c0       	rjmp	.+62     	; 0x18f4 <LCD_sendCommand+0x2a4>
    18b6:	fe 01       	movw	r30, r28
    18b8:	e7 5b       	subi	r30, 0xB7	; 183
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	88 ec       	ldi	r24, 0xC8	; 200
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	fe 01       	movw	r30, r28
    18c6:	e7 5b       	subi	r30, 0xB7	; 183
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <LCD_sendCommand+0x27e>
    18d2:	fe 01       	movw	r30, r28
    18d4:	e7 5b       	subi	r30, 0xB7	; 183
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	de 01       	movw	r26, r28
    18de:	a5 5b       	subi	r26, 0xB5	; 181
    18e0:	bf 4f       	sbci	r27, 0xFF	; 255
    18e2:	fe 01       	movw	r30, r28
    18e4:	e5 5b       	subi	r30, 0xB5	; 181
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	11 96       	adiw	r26, 0x01	; 1
    18f0:	9c 93       	st	X, r25
    18f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f4:	fe 01       	movw	r30, r28
    18f6:	e5 5b       	subi	r30, 0xB5	; 181
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	d1 f6       	brne	.-76     	; 0x18b6 <LCD_sendCommand+0x266>
    1902:	27 c0       	rjmp	.+78     	; 0x1952 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	8e 01       	movw	r16, r28
    1906:	05 5b       	subi	r16, 0xB5	; 181
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	fe 01       	movw	r30, r28
    190c:	e3 5b       	subi	r30, 0xB3	; 179
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	f8 01       	movw	r30, r16
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
    1926:	de 01       	movw	r26, r28
    1928:	a9 5b       	subi	r26, 0xB9	; 185
    192a:	bf 4f       	sbci	r27, 0xFF	; 255
    192c:	fe 01       	movw	r30, r28
    192e:	e5 5b       	subi	r30, 0xB5	; 181
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	8d 93       	st	X+, r24
    1938:	9c 93       	st	X, r25
    193a:	fe 01       	movw	r30, r28
    193c:	e9 5b       	subi	r30, 0xB9	; 185
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 81       	ld	r24, Z
    1942:	91 81       	ldd	r25, Z+1	; 0x01
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_sendCommand+0x2f4>
    1948:	fe 01       	movw	r30, r28
    194a:	e9 5b       	subi	r30, 0xB9	; 185
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1952:	fe 01       	movw	r30, r28
    1954:	ed 59       	subi	r30, 0x9D	; 157
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 81       	ld	r24, Z
    195a:	88 2f       	mov	r24, r24
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	80 71       	andi	r24, 0x10	; 16
    1960:	90 70       	andi	r25, 0x00	; 0
    1962:	95 95       	asr	r25
    1964:	87 95       	ror	r24
    1966:	95 95       	asr	r25
    1968:	87 95       	ror	r24
    196a:	95 95       	asr	r25
    196c:	87 95       	ror	r24
    196e:	95 95       	asr	r25
    1970:	87 95       	ror	r24
    1972:	98 2f       	mov	r25, r24
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	63 e0       	ldi	r22, 0x03	; 3
    1978:	49 2f       	mov	r20, r25
    197a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    197e:	fe 01       	movw	r30, r28
    1980:	ed 59       	subi	r30, 0x9D	; 157
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	80 72       	andi	r24, 0x20	; 32
    198c:	90 70       	andi	r25, 0x00	; 0
    198e:	95 95       	asr	r25
    1990:	87 95       	ror	r24
    1992:	95 95       	asr	r25
    1994:	87 95       	ror	r24
    1996:	95 95       	asr	r25
    1998:	87 95       	ror	r24
    199a:	95 95       	asr	r25
    199c:	87 95       	ror	r24
    199e:	95 95       	asr	r25
    19a0:	87 95       	ror	r24
    19a2:	98 2f       	mov	r25, r24
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	64 e0       	ldi	r22, 0x04	; 4
    19a8:	49 2f       	mov	r20, r25
    19aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    19ae:	fe 01       	movw	r30, r28
    19b0:	ed 59       	subi	r30, 0x9D	; 157
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	80 74       	andi	r24, 0x40	; 64
    19bc:	90 70       	andi	r25, 0x00	; 0
    19be:	08 2e       	mov	r0, r24
    19c0:	89 2f       	mov	r24, r25
    19c2:	00 0c       	add	r0, r0
    19c4:	88 1f       	adc	r24, r24
    19c6:	99 0b       	sbc	r25, r25
    19c8:	00 0c       	add	r0, r0
    19ca:	88 1f       	adc	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	98 2f       	mov	r25, r24
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	65 e0       	ldi	r22, 0x05	; 5
    19d4:	49 2f       	mov	r20, r25
    19d6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    19da:	fe 01       	movw	r30, r28
    19dc:	ed 59       	subi	r30, 0x9D	; 157
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 81       	ld	r24, Z
    19e2:	98 2f       	mov	r25, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	99 27       	eor	r25, r25
    19e8:	99 1f       	adc	r25, r25
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	66 e0       	ldi	r22, 0x06	; 6
    19ee:	49 2f       	mov	r20, r25
    19f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    19f4:	fe 01       	movw	r30, r28
    19f6:	ed 5b       	subi	r30, 0xBD	; 189
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e8       	ldi	r26, 0x80	; 128
    1a00:	bf e3       	ldi	r27, 0x3F	; 63
    1a02:	80 83       	st	Z, r24
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	a2 83       	std	Z+2, r26	; 0x02
    1a08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	8e 01       	movw	r16, r28
    1a0c:	01 5c       	subi	r16, 0xC1	; 193
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	fe 01       	movw	r30, r28
    1a12:	ed 5b       	subi	r30, 0xBD	; 189
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	4a ef       	ldi	r20, 0xFA	; 250
    1a24:	54 e4       	ldi	r21, 0x44	; 68
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	f8 01       	movw	r30, r16
    1a30:	80 83       	st	Z, r24
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	a2 83       	std	Z+2, r26	; 0x02
    1a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ff 96       	adiw	r30, 0x3f	; 63
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <LCD_sendCommand+0x40e>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9e af       	std	Y+62, r25	; 0x3e
    1a5a:	8d af       	std	Y+61, r24	; 0x3d
    1a5c:	46 c0       	rjmp	.+140    	; 0x1aea <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ff 96       	adiw	r30, 0x3f	; 63
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	64 f5       	brge	.+88     	; 0x1ad2 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	ed 5b       	subi	r30, 0xBD	; 189
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e af       	std	Y+62, r25	; 0x3e
    1aa6:	8d af       	std	Y+61, r24	; 0x3d
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_sendCommand+0x478>
    1aaa:	88 ec       	ldi	r24, 0xC8	; 200
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9c af       	std	Y+60, r25	; 0x3c
    1ab0:	8b af       	std	Y+59, r24	; 0x3b
    1ab2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ab4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_sendCommand+0x466>
    1aba:	9c af       	std	Y+60, r25	; 0x3c
    1abc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9e af       	std	Y+62, r25	; 0x3e
    1ac6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <LCD_sendCommand+0x45a>
    1ad0:	16 c0       	rjmp	.+44     	; 0x1afe <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ff 96       	adiw	r30, 0x3f	; 63
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9e af       	std	Y+62, r25	; 0x3e
    1ae8:	8d af       	std	Y+61, r24	; 0x3d
    1aea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aee:	9a af       	std	Y+58, r25	; 0x3a
    1af0:	89 af       	std	Y+57, r24	; 0x39
    1af2:	89 ad       	ldd	r24, Y+57	; 0x39
    1af4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_sendCommand+0x4a6>
    1afa:	9a af       	std	Y+58, r25	; 0x3a
    1afc:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	62 e0       	ldi	r22, 0x02	; 2
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e8       	ldi	r26, 0x80	; 128
    1b0e:	bf e3       	ldi	r27, 0x3F	; 63
    1b10:	8d ab       	std	Y+53, r24	; 0x35
    1b12:	9e ab       	std	Y+54, r25	; 0x36
    1b14:	af ab       	std	Y+55, r26	; 0x37
    1b16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	89 ab       	std	Y+49, r24	; 0x31
    1b32:	9a ab       	std	Y+50, r25	; 0x32
    1b34:	ab ab       	std	Y+51, r26	; 0x33
    1b36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b38:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_sendCommand+0x50a>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	98 ab       	std	Y+48, r25	; 0x30
    1b56:	8f a7       	std	Y+47, r24	; 0x2f
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b60:	9c a9       	ldd	r25, Y+52	; 0x34
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6d a9       	ldd	r22, Y+53	; 0x35
    1b74:	7e a9       	ldd	r23, Y+54	; 0x36
    1b76:	8f a9       	ldd	r24, Y+55	; 0x37
    1b78:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_sendCommand+0x56a>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9e a7       	std	Y+46, r25	; 0x2e
    1ba2:	8d a7       	std	Y+45, r24	; 0x2d
    1ba4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_sendCommand+0x558>
    1bac:	9e a7       	std	Y+46, r25	; 0x2e
    1bae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	98 ab       	std	Y+48, r25	; 0x30
    1bb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_sendCommand+0x54c>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bca:	9c a9       	ldd	r25, Y+52	; 0x34
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	98 ab       	std	Y+48, r25	; 0x30
    1bd6:	8f a7       	std	Y+47, r24	; 0x2f
    1bd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bda:	98 a9       	ldd	r25, Y+48	; 0x30
    1bdc:	9c a7       	std	Y+44, r25	; 0x2c
    1bde:	8b a7       	std	Y+43, r24	; 0x2b
    1be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendCommand+0x594>
    1be8:	9c a7       	std	Y+44, r25	; 0x2c
    1bea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	62 e0       	ldi	r22, 0x02	; 2
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e8       	ldi	r26, 0x80	; 128
    1bfc:	bf e3       	ldi	r27, 0x3F	; 63
    1bfe:	8f a3       	std	Y+39, r24	; 0x27
    1c00:	98 a7       	std	Y+40, r25	; 0x28
    1c02:	a9 a7       	std	Y+41, r26	; 0x29
    1c04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	6f a1       	ldd	r22, Y+39	; 0x27
    1c08:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a ef       	ldi	r20, 0xFA	; 250
    1c14:	54 e4       	ldi	r21, 0x44	; 68
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8b a3       	std	Y+35, r24	; 0x23
    1c20:	9c a3       	std	Y+36, r25	; 0x24
    1c22:	ad a3       	std	Y+37, r26	; 0x25
    1c24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c26:	6b a1       	ldd	r22, Y+35	; 0x23
    1c28:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1c48:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	6f a1       	ldd	r22, Y+39	; 0x27
    1c62:	78 a5       	ldd	r23, Y+40	; 0x28
    1c64:	89 a5       	ldd	r24, Y+41	; 0x29
    1c66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_sendCommand+0x658>
    1c8a:	88 ec       	ldi	r24, 0xC8	; 200
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	98 a3       	std	Y+32, r25	; 0x20
    1c90:	8f 8f       	std	Y+31, r24	; 0x1f
    1c92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c94:	98 a1       	ldd	r25, Y+32	; 0x20
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_sendCommand+0x646>
    1c9a:	98 a3       	std	Y+32, r25	; 0x20
    1c9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9a a3       	std	Y+34, r25	; 0x22
    1ca6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    1caa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <LCD_sendCommand+0x63a>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9a a3       	std	Y+34, r25	; 0x22
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
    1cc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_sendCommand+0x682>
    1cd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ed 59       	subi	r30, 0x9D	; 157
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 81       	ld	r24, Z
    1ce2:	98 2f       	mov	r25, r24
    1ce4:	91 70       	andi	r25, 0x01	; 1
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	49 2f       	mov	r20, r25
    1cec:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	ed 59       	subi	r30, 0x9D	; 157
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	82 70       	andi	r24, 0x02	; 2
    1cfe:	90 70       	andi	r25, 0x00	; 0
    1d00:	95 95       	asr	r25
    1d02:	87 95       	ror	r24
    1d04:	98 2f       	mov	r25, r24
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	64 e0       	ldi	r22, 0x04	; 4
    1d0a:	49 2f       	mov	r20, r25
    1d0c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1d10:	fe 01       	movw	r30, r28
    1d12:	ed 59       	subi	r30, 0x9D	; 157
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	84 70       	andi	r24, 0x04	; 4
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	95 95       	asr	r25
    1d22:	87 95       	ror	r24
    1d24:	95 95       	asr	r25
    1d26:	87 95       	ror	r24
    1d28:	98 2f       	mov	r25, r24
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	65 e0       	ldi	r22, 0x05	; 5
    1d2e:	49 2f       	mov	r20, r25
    1d30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1d34:	fe 01       	movw	r30, r28
    1d36:	ed 59       	subi	r30, 0x9D	; 157
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	88 70       	andi	r24, 0x08	; 8
    1d42:	90 70       	andi	r25, 0x00	; 0
    1d44:	95 95       	asr	r25
    1d46:	87 95       	ror	r24
    1d48:	95 95       	asr	r25
    1d4a:	87 95       	ror	r24
    1d4c:	95 95       	asr	r25
    1d4e:	87 95       	ror	r24
    1d50:	98 2f       	mov	r25, r24
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	66 e0       	ldi	r22, 0x06	; 6
    1d56:	49 2f       	mov	r20, r25
    1d58:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e8       	ldi	r26, 0x80	; 128
    1d62:	bf e3       	ldi	r27, 0x3F	; 63
    1d64:	89 8f       	std	Y+25, r24	; 0x19
    1d66:	9a 8f       	std	Y+26, r25	; 0x1a
    1d68:	ab 8f       	std	Y+27, r26	; 0x1b
    1d6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a ef       	ldi	r20, 0xFA	; 250
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8d 8b       	std	Y+21, r24	; 0x15
    1d86:	9e 8b       	std	Y+22, r25	; 0x16
    1d88:	af 8b       	std	Y+23, r26	; 0x17
    1d8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d90:	8f 89       	ldd	r24, Y+23	; 0x17
    1d92:	98 8d       	ldd	r25, Y+24	; 0x18
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <LCD_sendCommand+0x75e>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9c 8b       	std	Y+20, r25	; 0x14
    1daa:	8b 8b       	std	Y+19, r24	; 0x13
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9c 8b       	std	Y+20, r25	; 0x14
    1dec:	8b 8b       	std	Y+19, r24	; 0x13
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <LCD_sendCommand+0x7be>
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9a 8b       	std	Y+18, r25	; 0x12
    1df6:	89 8b       	std	Y+17, r24	; 0x11
    1df8:	89 89       	ldd	r24, Y+17	; 0x11
    1dfa:	9a 89       	ldd	r25, Y+18	; 0x12
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_sendCommand+0x7ac>
    1e00:	9a 8b       	std	Y+18, r25	; 0x12
    1e02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8b 89       	ldd	r24, Y+19	; 0x13
    1e06:	9c 89       	ldd	r25, Y+20	; 0x14
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	9c 8b       	std	Y+20, r25	; 0x14
    1e0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e10:	9c 89       	ldd	r25, Y+20	; 0x14
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <LCD_sendCommand+0x7a0>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	6d 89       	ldd	r22, Y+21	; 0x15
    1e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9c 8b       	std	Y+20, r25	; 0x14
    1e2a:	8b 8b       	std	Y+19, r24	; 0x13
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	98 8b       	std	Y+16, r25	; 0x10
    1e32:	8f 87       	std	Y+15, r24	; 0x0f
    1e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e36:	98 89       	ldd	r25, Y+16	; 0x10
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_sendCommand+0x7e8>
    1e3c:	98 8b       	std	Y+16, r25	; 0x10
    1e3e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e8       	ldi	r26, 0x80	; 128
    1e50:	bf e3       	ldi	r27, 0x3F	; 63
    1e52:	8b 87       	std	Y+11, r24	; 0x0b
    1e54:	9c 87       	std	Y+12, r25	; 0x0c
    1e56:	ad 87       	std	Y+13, r26	; 0x0d
    1e58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a ef       	ldi	r20, 0xFA	; 250
    1e68:	54 e4       	ldi	r21, 0x44	; 68
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8f 83       	std	Y+7, r24	; 0x07
    1e74:	98 87       	std	Y+8, r25	; 0x08
    1e76:	a9 87       	std	Y+9, r26	; 0x09
    1e78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <LCD_sendCommand+0x84c>
		__ticks = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	3f c0       	rjmp	.+126    	; 0x1f1a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	4c f5       	brge	.+82     	; 0x1f06 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e2       	ldi	r20, 0x20	; 32
    1ec2:	51 e4       	ldi	r21, 0x41	; 65
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <LCD_sendCommand+0x8ac>
    1ede:	88 ec       	ldi	r24, 0xC8	; 200
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_sendCommand+0x89a>
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	69 f7       	brne	.-38     	; 0x1ede <LCD_sendCommand+0x88e>
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f06:	6f 81       	ldd	r22, Y+7	; 0x07
    1f08:	78 85       	ldd	r23, Y+8	; 0x08
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_sendCommand+0x8d6>
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f2e:	cd 59       	subi	r28, 0x9D	; 157
    1f30:	df 4f       	sbci	r29, 0xFF	; 255
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	08 95       	ret

00001f46 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	c3 56       	subi	r28, 0x63	; 99
    1f54:	d0 40       	sbci	r29, 0x00	; 0
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	fe 01       	movw	r30, r28
    1f62:	ed 59       	subi	r30, 0x9D	; 157
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	61 e0       	ldi	r22, 0x01	; 1
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f72:	fe 01       	movw	r30, r28
    1f74:	e1 5a       	subi	r30, 0xA1	; 161
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e8       	ldi	r26, 0x80	; 128
    1f7e:	bf e3       	ldi	r27, 0x3F	; 63
    1f80:	80 83       	st	Z, r24
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	a2 83       	std	Z+2, r26	; 0x02
    1f86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	8e 01       	movw	r16, r28
    1f8a:	05 5a       	subi	r16, 0xA5	; 165
    1f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e1 5a       	subi	r30, 0xA1	; 161
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a ef       	ldi	r20, 0xFA	; 250
    1fa2:	54 e4       	ldi	r21, 0x44	; 68
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	f8 01       	movw	r30, r16
    1fae:	80 83       	st	Z, r24
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	a2 83       	std	Z+2, r26	; 0x02
    1fb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e5 5a       	subi	r30, 0xA5	; 165
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	44 f4       	brge	.+16     	; 0x1fe4 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e7 5a       	subi	r30, 0xA7	; 167
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
    1fe2:	64 c0       	rjmp	.+200    	; 0x20ac <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e5 5a       	subi	r30, 0xA5	; 165
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffe:	18 16       	cp	r1, r24
    2000:	0c f0       	brlt	.+2      	; 0x2004 <LCD_displayCharacter+0xbe>
    2002:	43 c0       	rjmp	.+134    	; 0x208a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2004:	fe 01       	movw	r30, r28
    2006:	e1 5a       	subi	r30, 0xA1	; 161
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	60 81       	ld	r22, Z
    200c:	71 81       	ldd	r23, Z+1	; 0x01
    200e:	82 81       	ldd	r24, Z+2	; 0x02
    2010:	93 81       	ldd	r25, Z+3	; 0x03
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	8e 01       	movw	r16, r28
    2024:	07 5a       	subi	r16, 0xA7	; 167
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
    203a:	1f c0       	rjmp	.+62     	; 0x207a <LCD_displayCharacter+0x134>
    203c:	fe 01       	movw	r30, r28
    203e:	e9 5a       	subi	r30, 0xA9	; 169
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
    204a:	fe 01       	movw	r30, r28
    204c:	e9 5a       	subi	r30, 0xA9	; 169
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_displayCharacter+0x10e>
    2058:	fe 01       	movw	r30, r28
    205a:	e9 5a       	subi	r30, 0xA9	; 169
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	de 01       	movw	r26, r28
    2064:	a7 5a       	subi	r26, 0xA7	; 167
    2066:	bf 4f       	sbci	r27, 0xFF	; 255
    2068:	fe 01       	movw	r30, r28
    206a:	e7 5a       	subi	r30, 0xA7	; 167
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	11 96       	adiw	r26, 0x01	; 1
    2076:	9c 93       	st	X, r25
    2078:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	fe 01       	movw	r30, r28
    207c:	e7 5a       	subi	r30, 0xA7	; 167
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	91 81       	ldd	r25, Z+1	; 0x01
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	d1 f6       	brne	.-76     	; 0x203c <LCD_displayCharacter+0xf6>
    2088:	27 c0       	rjmp	.+78     	; 0x20d8 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	8e 01       	movw	r16, r28
    208c:	07 5a       	subi	r16, 0xA7	; 167
    208e:	1f 4f       	sbci	r17, 0xFF	; 255
    2090:	fe 01       	movw	r30, r28
    2092:	e5 5a       	subi	r30, 0xA5	; 165
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	f8 01       	movw	r30, r16
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	de 01       	movw	r26, r28
    20ae:	ab 5a       	subi	r26, 0xAB	; 171
    20b0:	bf 4f       	sbci	r27, 0xFF	; 255
    20b2:	fe 01       	movw	r30, r28
    20b4:	e7 5a       	subi	r30, 0xA7	; 167
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	8d 93       	st	X+, r24
    20be:	9c 93       	st	X, r25
    20c0:	fe 01       	movw	r30, r28
    20c2:	eb 5a       	subi	r30, 0xAB	; 171
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_displayCharacter+0x184>
    20ce:	fe 01       	movw	r30, r28
    20d0:	eb 5a       	subi	r30, 0xAB	; 171
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20e2:	fe 01       	movw	r30, r28
    20e4:	ef 5a       	subi	r30, 0xAF	; 175
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a0 e8       	ldi	r26, 0x80	; 128
    20ee:	bf e3       	ldi	r27, 0x3F	; 63
    20f0:	80 83       	st	Z, r24
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	a2 83       	std	Z+2, r26	; 0x02
    20f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f8:	8e 01       	movw	r16, r28
    20fa:	03 5b       	subi	r16, 0xB3	; 179
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	fe 01       	movw	r30, r28
    2100:	ef 5a       	subi	r30, 0xAF	; 175
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a ef       	ldi	r20, 0xFA	; 250
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	f8 01       	movw	r30, r16
    211e:	80 83       	st	Z, r24
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	a2 83       	std	Z+2, r26	; 0x02
    2124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2126:	fe 01       	movw	r30, r28
    2128:	e3 5b       	subi	r30, 0xB3	; 179
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	44 f4       	brge	.+16     	; 0x2154 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2144:	fe 01       	movw	r30, r28
    2146:	e5 5b       	subi	r30, 0xB5	; 181
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	64 c0       	rjmp	.+200    	; 0x221c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2154:	fe 01       	movw	r30, r28
    2156:	e3 5b       	subi	r30, 0xB3	; 179
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	3f ef       	ldi	r19, 0xFF	; 255
    2166:	4f e7       	ldi	r20, 0x7F	; 127
    2168:	57 e4       	ldi	r21, 0x47	; 71
    216a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216e:	18 16       	cp	r1, r24
    2170:	0c f0       	brlt	.+2      	; 0x2174 <LCD_displayCharacter+0x22e>
    2172:	43 c0       	rjmp	.+134    	; 0x21fa <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	fe 01       	movw	r30, r28
    2176:	ef 5a       	subi	r30, 0xAF	; 175
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	8e 01       	movw	r16, r28
    2194:	05 5b       	subi	r16, 0xB5	; 181
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	f8 01       	movw	r30, r16
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
    21aa:	1f c0       	rjmp	.+62     	; 0x21ea <LCD_displayCharacter+0x2a4>
    21ac:	fe 01       	movw	r30, r28
    21ae:	e7 5b       	subi	r30, 0xB7	; 183
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	88 ec       	ldi	r24, 0xC8	; 200
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
    21ba:	fe 01       	movw	r30, r28
    21bc:	e7 5b       	subi	r30, 0xB7	; 183
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_displayCharacter+0x27e>
    21c8:	fe 01       	movw	r30, r28
    21ca:	e7 5b       	subi	r30, 0xB7	; 183
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	de 01       	movw	r26, r28
    21d4:	a5 5b       	subi	r26, 0xB5	; 181
    21d6:	bf 4f       	sbci	r27, 0xFF	; 255
    21d8:	fe 01       	movw	r30, r28
    21da:	e5 5b       	subi	r30, 0xB5	; 181
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	11 96       	adiw	r26, 0x01	; 1
    21e6:	9c 93       	st	X, r25
    21e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	fe 01       	movw	r30, r28
    21ec:	e5 5b       	subi	r30, 0xB5	; 181
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	d1 f6       	brne	.-76     	; 0x21ac <LCD_displayCharacter+0x266>
    21f8:	27 c0       	rjmp	.+78     	; 0x2248 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	8e 01       	movw	r16, r28
    21fc:	05 5b       	subi	r16, 0xB5	; 181
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e3 5b       	subi	r30, 0xB3	; 179
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	f8 01       	movw	r30, r16
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	de 01       	movw	r26, r28
    221e:	a9 5b       	subi	r26, 0xB9	; 185
    2220:	bf 4f       	sbci	r27, 0xFF	; 255
    2222:	fe 01       	movw	r30, r28
    2224:	e5 5b       	subi	r30, 0xB5	; 181
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	8d 93       	st	X+, r24
    222e:	9c 93       	st	X, r25
    2230:	fe 01       	movw	r30, r28
    2232:	e9 5b       	subi	r30, 0xB9	; 185
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_displayCharacter+0x2f4>
    223e:	fe 01       	movw	r30, r28
    2240:	e9 5b       	subi	r30, 0xB9	; 185
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2248:	fe 01       	movw	r30, r28
    224a:	ed 59       	subi	r30, 0x9D	; 157
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	80 71       	andi	r24, 0x10	; 16
    2256:	90 70       	andi	r25, 0x00	; 0
    2258:	95 95       	asr	r25
    225a:	87 95       	ror	r24
    225c:	95 95       	asr	r25
    225e:	87 95       	ror	r24
    2260:	95 95       	asr	r25
    2262:	87 95       	ror	r24
    2264:	95 95       	asr	r25
    2266:	87 95       	ror	r24
    2268:	98 2f       	mov	r25, r24
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	63 e0       	ldi	r22, 0x03	; 3
    226e:	49 2f       	mov	r20, r25
    2270:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2274:	fe 01       	movw	r30, r28
    2276:	ed 59       	subi	r30, 0x9D	; 157
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	80 72       	andi	r24, 0x20	; 32
    2282:	90 70       	andi	r25, 0x00	; 0
    2284:	95 95       	asr	r25
    2286:	87 95       	ror	r24
    2288:	95 95       	asr	r25
    228a:	87 95       	ror	r24
    228c:	95 95       	asr	r25
    228e:	87 95       	ror	r24
    2290:	95 95       	asr	r25
    2292:	87 95       	ror	r24
    2294:	95 95       	asr	r25
    2296:	87 95       	ror	r24
    2298:	98 2f       	mov	r25, r24
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	64 e0       	ldi	r22, 0x04	; 4
    229e:	49 2f       	mov	r20, r25
    22a0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 59       	subi	r30, 0x9D	; 157
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	80 74       	andi	r24, 0x40	; 64
    22b2:	90 70       	andi	r25, 0x00	; 0
    22b4:	08 2e       	mov	r0, r24
    22b6:	89 2f       	mov	r24, r25
    22b8:	00 0c       	add	r0, r0
    22ba:	88 1f       	adc	r24, r24
    22bc:	99 0b       	sbc	r25, r25
    22be:	00 0c       	add	r0, r0
    22c0:	88 1f       	adc	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	98 2f       	mov	r25, r24
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	65 e0       	ldi	r22, 0x05	; 5
    22ca:	49 2f       	mov	r20, r25
    22cc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    22d0:	fe 01       	movw	r30, r28
    22d2:	ed 59       	subi	r30, 0x9D	; 157
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 81       	ld	r24, Z
    22d8:	98 2f       	mov	r25, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	99 27       	eor	r25, r25
    22de:	99 1f       	adc	r25, r25
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	66 e0       	ldi	r22, 0x06	; 6
    22e4:	49 2f       	mov	r20, r25
    22e6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22ea:	fe 01       	movw	r30, r28
    22ec:	ed 5b       	subi	r30, 0xBD	; 189
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a0 e8       	ldi	r26, 0x80	; 128
    22f6:	bf e3       	ldi	r27, 0x3F	; 63
    22f8:	80 83       	st	Z, r24
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	a2 83       	std	Z+2, r26	; 0x02
    22fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	8e 01       	movw	r16, r28
    2302:	01 5c       	subi	r16, 0xC1	; 193
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	fe 01       	movw	r30, r28
    2308:	ed 5b       	subi	r30, 0xBD	; 189
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	f8 01       	movw	r30, r16
    2326:	80 83       	st	Z, r24
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	a2 83       	std	Z+2, r26	; 0x02
    232c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    232e:	fe 01       	movw	r30, r28
    2330:	ff 96       	adiw	r30, 0x3f	; 63
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9e af       	std	Y+62, r25	; 0x3e
    2350:	8d af       	std	Y+61, r24	; 0x3d
    2352:	46 c0       	rjmp	.+140    	; 0x23e0 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2354:	fe 01       	movw	r30, r28
    2356:	ff 96       	adiw	r30, 0x3f	; 63
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	64 f5       	brge	.+88     	; 0x23c8 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	fe 01       	movw	r30, r28
    2372:	ed 5b       	subi	r30, 0xBD	; 189
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9e af       	std	Y+62, r25	; 0x3e
    239c:	8d af       	std	Y+61, r24	; 0x3d
    239e:	0f c0       	rjmp	.+30     	; 0x23be <LCD_displayCharacter+0x478>
    23a0:	88 ec       	ldi	r24, 0xC8	; 200
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c af       	std	Y+60, r25	; 0x3c
    23a6:	8b af       	std	Y+59, r24	; 0x3b
    23a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    23aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_displayCharacter+0x466>
    23b0:	9c af       	std	Y+60, r25	; 0x3c
    23b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	9e af       	std	Y+62, r25	; 0x3e
    23bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23be:	8d ad       	ldd	r24, Y+61	; 0x3d
    23c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <LCD_displayCharacter+0x45a>
    23c6:	16 c0       	rjmp	.+44     	; 0x23f4 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	fe 01       	movw	r30, r28
    23ca:	ff 96       	adiw	r30, 0x3f	; 63
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e af       	std	Y+62, r25	; 0x3e
    23de:	8d af       	std	Y+61, r24	; 0x3d
    23e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e4:	9a af       	std	Y+58, r25	; 0x3a
    23e6:	89 af       	std	Y+57, r24	; 0x39
    23e8:	89 ad       	ldd	r24, Y+57	; 0x39
    23ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_displayCharacter+0x4a6>
    23f0:	9a af       	std	Y+58, r25	; 0x3a
    23f2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	62 e0       	ldi	r22, 0x02	; 2
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e8       	ldi	r26, 0x80	; 128
    2404:	bf e3       	ldi	r27, 0x3F	; 63
    2406:	8d ab       	std	Y+53, r24	; 0x35
    2408:	9e ab       	std	Y+54, r25	; 0x36
    240a:	af ab       	std	Y+55, r26	; 0x37
    240c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	6d a9       	ldd	r22, Y+53	; 0x35
    2410:	7e a9       	ldd	r23, Y+54	; 0x36
    2412:	8f a9       	ldd	r24, Y+55	; 0x37
    2414:	98 ad       	ldd	r25, Y+56	; 0x38
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a ef       	ldi	r20, 0xFA	; 250
    241c:	54 e4       	ldi	r21, 0x44	; 68
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	89 ab       	std	Y+49, r24	; 0x31
    2428:	9a ab       	std	Y+50, r25	; 0x32
    242a:	ab ab       	std	Y+51, r26	; 0x33
    242c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    242e:	69 a9       	ldd	r22, Y+49	; 0x31
    2430:	7a a9       	ldd	r23, Y+50	; 0x32
    2432:	8b a9       	ldd	r24, Y+51	; 0x33
    2434:	9c a9       	ldd	r25, Y+52	; 0x34
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	98 ab       	std	Y+48, r25	; 0x30
    244c:	8f a7       	std	Y+47, r24	; 0x2f
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2450:	69 a9       	ldd	r22, Y+49	; 0x31
    2452:	7a a9       	ldd	r23, Y+50	; 0x32
    2454:	8b a9       	ldd	r24, Y+51	; 0x33
    2456:	9c a9       	ldd	r25, Y+52	; 0x34
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	6d a9       	ldd	r22, Y+53	; 0x35
    246a:	7e a9       	ldd	r23, Y+54	; 0x36
    246c:	8f a9       	ldd	r24, Y+55	; 0x37
    246e:	98 ad       	ldd	r25, Y+56	; 0x38
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	98 ab       	std	Y+48, r25	; 0x30
    248e:	8f a7       	std	Y+47, r24	; 0x2f
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <LCD_displayCharacter+0x56a>
    2492:	88 ec       	ldi	r24, 0xC8	; 200
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9e a7       	std	Y+46, r25	; 0x2e
    2498:	8d a7       	std	Y+45, r24	; 0x2d
    249a:	8d a5       	ldd	r24, Y+45	; 0x2d
    249c:	9e a5       	ldd	r25, Y+46	; 0x2e
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_displayCharacter+0x558>
    24a2:	9e a7       	std	Y+46, r25	; 0x2e
    24a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a8:	98 a9       	ldd	r25, Y+48	; 0x30
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	98 ab       	std	Y+48, r25	; 0x30
    24ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b2:	98 a9       	ldd	r25, Y+48	; 0x30
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <LCD_displayCharacter+0x54c>
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	69 a9       	ldd	r22, Y+49	; 0x31
    24bc:	7a a9       	ldd	r23, Y+50	; 0x32
    24be:	8b a9       	ldd	r24, Y+51	; 0x33
    24c0:	9c a9       	ldd	r25, Y+52	; 0x34
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	98 ab       	std	Y+48, r25	; 0x30
    24cc:	8f a7       	std	Y+47, r24	; 0x2f
    24ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d0:	98 a9       	ldd	r25, Y+48	; 0x30
    24d2:	9c a7       	std	Y+44, r25	; 0x2c
    24d4:	8b a7       	std	Y+43, r24	; 0x2b
    24d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <LCD_displayCharacter+0x594>
    24de:	9c a7       	std	Y+44, r25	; 0x2c
    24e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	62 e0       	ldi	r22, 0x02	; 2
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	a0 e8       	ldi	r26, 0x80	; 128
    24f2:	bf e3       	ldi	r27, 0x3F	; 63
    24f4:	8f a3       	std	Y+39, r24	; 0x27
    24f6:	98 a7       	std	Y+40, r25	; 0x28
    24f8:	a9 a7       	std	Y+41, r26	; 0x29
    24fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fc:	6f a1       	ldd	r22, Y+39	; 0x27
    24fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2500:	89 a5       	ldd	r24, Y+41	; 0x29
    2502:	9a a5       	ldd	r25, Y+42	; 0x2a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a ef       	ldi	r20, 0xFA	; 250
    250a:	54 e4       	ldi	r21, 0x44	; 68
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	8b a3       	std	Y+35, r24	; 0x23
    2516:	9c a3       	std	Y+36, r25	; 0x24
    2518:	ad a3       	std	Y+37, r26	; 0x25
    251a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    251c:	6b a1       	ldd	r22, Y+35	; 0x23
    251e:	7c a1       	ldd	r23, Y+36	; 0x24
    2520:	8d a1       	ldd	r24, Y+37	; 0x25
    2522:	9e a1       	ldd	r25, Y+38	; 0x26
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	2c f4       	brge	.+10     	; 0x253e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9a a3       	std	Y+34, r25	; 0x22
    253a:	89 a3       	std	Y+33, r24	; 0x21
    253c:	3f c0       	rjmp	.+126    	; 0x25bc <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    253e:	6b a1       	ldd	r22, Y+35	; 0x23
    2540:	7c a1       	ldd	r23, Y+36	; 0x24
    2542:	8d a1       	ldd	r24, Y+37	; 0x25
    2544:	9e a1       	ldd	r25, Y+38	; 0x26
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	4c f5       	brge	.+82     	; 0x25a8 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	6f a1       	ldd	r22, Y+39	; 0x27
    2558:	78 a5       	ldd	r23, Y+40	; 0x28
    255a:	89 a5       	ldd	r24, Y+41	; 0x29
    255c:	9a a5       	ldd	r25, Y+42	; 0x2a
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9a a3       	std	Y+34, r25	; 0x22
    257c:	89 a3       	std	Y+33, r24	; 0x21
    257e:	0f c0       	rjmp	.+30     	; 0x259e <LCD_displayCharacter+0x658>
    2580:	88 ec       	ldi	r24, 0xC8	; 200
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	98 a3       	std	Y+32, r25	; 0x20
    2586:	8f 8f       	std	Y+31, r24	; 0x1f
    2588:	8f 8d       	ldd	r24, Y+31	; 0x1f
    258a:	98 a1       	ldd	r25, Y+32	; 0x20
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_displayCharacter+0x646>
    2590:	98 a3       	std	Y+32, r25	; 0x20
    2592:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2594:	89 a1       	ldd	r24, Y+33	; 0x21
    2596:	9a a1       	ldd	r25, Y+34	; 0x22
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	9a a3       	std	Y+34, r25	; 0x22
    259c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	89 a1       	ldd	r24, Y+33	; 0x21
    25a0:	9a a1       	ldd	r25, Y+34	; 0x22
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	69 f7       	brne	.-38     	; 0x2580 <LCD_displayCharacter+0x63a>
    25a6:	14 c0       	rjmp	.+40     	; 0x25d0 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	6b a1       	ldd	r22, Y+35	; 0x23
    25aa:	7c a1       	ldd	r23, Y+36	; 0x24
    25ac:	8d a1       	ldd	r24, Y+37	; 0x25
    25ae:	9e a1       	ldd	r25, Y+38	; 0x26
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9a a3       	std	Y+34, r25	; 0x22
    25ba:	89 a3       	std	Y+33, r24	; 0x21
    25bc:	89 a1       	ldd	r24, Y+33	; 0x21
    25be:	9a a1       	ldd	r25, Y+34	; 0x22
    25c0:	9e 8f       	std	Y+30, r25	; 0x1e
    25c2:	8d 8f       	std	Y+29, r24	; 0x1d
    25c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_displayCharacter+0x682>
    25cc:	9e 8f       	std	Y+30, r25	; 0x1e
    25ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    25d0:	fe 01       	movw	r30, r28
    25d2:	ed 59       	subi	r30, 0x9D	; 157
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	98 2f       	mov	r25, r24
    25da:	91 70       	andi	r25, 0x01	; 1
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	63 e0       	ldi	r22, 0x03	; 3
    25e0:	49 2f       	mov	r20, r25
    25e2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    25e6:	fe 01       	movw	r30, r28
    25e8:	ed 59       	subi	r30, 0x9D	; 157
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	80 81       	ld	r24, Z
    25ee:	88 2f       	mov	r24, r24
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	82 70       	andi	r24, 0x02	; 2
    25f4:	90 70       	andi	r25, 0x00	; 0
    25f6:	95 95       	asr	r25
    25f8:	87 95       	ror	r24
    25fa:	98 2f       	mov	r25, r24
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	64 e0       	ldi	r22, 0x04	; 4
    2600:	49 2f       	mov	r20, r25
    2602:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2606:	fe 01       	movw	r30, r28
    2608:	ed 59       	subi	r30, 0x9D	; 157
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	84 70       	andi	r24, 0x04	; 4
    2614:	90 70       	andi	r25, 0x00	; 0
    2616:	95 95       	asr	r25
    2618:	87 95       	ror	r24
    261a:	95 95       	asr	r25
    261c:	87 95       	ror	r24
    261e:	98 2f       	mov	r25, r24
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	65 e0       	ldi	r22, 0x05	; 5
    2624:	49 2f       	mov	r20, r25
    2626:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    262a:	fe 01       	movw	r30, r28
    262c:	ed 59       	subi	r30, 0x9D	; 157
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	88 70       	andi	r24, 0x08	; 8
    2638:	90 70       	andi	r25, 0x00	; 0
    263a:	95 95       	asr	r25
    263c:	87 95       	ror	r24
    263e:	95 95       	asr	r25
    2640:	87 95       	ror	r24
    2642:	95 95       	asr	r25
    2644:	87 95       	ror	r24
    2646:	98 2f       	mov	r25, r24
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	66 e0       	ldi	r22, 0x06	; 6
    264c:	49 2f       	mov	r20, r25
    264e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e8       	ldi	r26, 0x80	; 128
    2658:	bf e3       	ldi	r27, 0x3F	; 63
    265a:	89 8f       	std	Y+25, r24	; 0x19
    265c:	9a 8f       	std	Y+26, r25	; 0x1a
    265e:	ab 8f       	std	Y+27, r26	; 0x1b
    2660:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	69 8d       	ldd	r22, Y+25	; 0x19
    2664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a ef       	ldi	r20, 0xFA	; 250
    2670:	54 e4       	ldi	r21, 0x44	; 68
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8d 8b       	std	Y+21, r24	; 0x15
    267c:	9e 8b       	std	Y+22, r25	; 0x16
    267e:	af 8b       	std	Y+23, r26	; 0x17
    2680:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2682:	6d 89       	ldd	r22, Y+21	; 0x15
    2684:	7e 89       	ldd	r23, Y+22	; 0x16
    2686:	8f 89       	ldd	r24, Y+23	; 0x17
    2688:	98 8d       	ldd	r25, Y+24	; 0x18
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9c 8b       	std	Y+20, r25	; 0x14
    26a0:	8b 8b       	std	Y+19, r24	; 0x13
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    26a4:	6d 89       	ldd	r22, Y+21	; 0x15
    26a6:	7e 89       	ldd	r23, Y+22	; 0x16
    26a8:	8f 89       	ldd	r24, Y+23	; 0x17
    26aa:	98 8d       	ldd	r25, Y+24	; 0x18
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	69 8d       	ldd	r22, Y+25	; 0x19
    26be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9c 8b       	std	Y+20, r25	; 0x14
    26e2:	8b 8b       	std	Y+19, r24	; 0x13
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <LCD_displayCharacter+0x7be>
    26e6:	88 ec       	ldi	r24, 0xC8	; 200
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9a 8b       	std	Y+18, r25	; 0x12
    26ec:	89 8b       	std	Y+17, r24	; 0x11
    26ee:	89 89       	ldd	r24, Y+17	; 0x11
    26f0:	9a 89       	ldd	r25, Y+18	; 0x12
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_displayCharacter+0x7ac>
    26f6:	9a 8b       	std	Y+18, r25	; 0x12
    26f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	8b 89       	ldd	r24, Y+19	; 0x13
    26fc:	9c 89       	ldd	r25, Y+20	; 0x14
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9c 8b       	std	Y+20, r25	; 0x14
    2702:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	8b 89       	ldd	r24, Y+19	; 0x13
    2706:	9c 89       	ldd	r25, Y+20	; 0x14
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <LCD_displayCharacter+0x7a0>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6d 89       	ldd	r22, Y+21	; 0x15
    2710:	7e 89       	ldd	r23, Y+22	; 0x16
    2712:	8f 89       	ldd	r24, Y+23	; 0x17
    2714:	98 8d       	ldd	r25, Y+24	; 0x18
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9c 8b       	std	Y+20, r25	; 0x14
    2720:	8b 8b       	std	Y+19, r24	; 0x13
    2722:	8b 89       	ldd	r24, Y+19	; 0x13
    2724:	9c 89       	ldd	r25, Y+20	; 0x14
    2726:	98 8b       	std	Y+16, r25	; 0x10
    2728:	8f 87       	std	Y+15, r24	; 0x0f
    272a:	8f 85       	ldd	r24, Y+15	; 0x0f
    272c:	98 89       	ldd	r25, Y+16	; 0x10
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <LCD_displayCharacter+0x7e8>
    2732:	98 8b       	std	Y+16, r25	; 0x10
    2734:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	62 e0       	ldi	r22, 0x02	; 2
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 e8       	ldi	r26, 0x80	; 128
    2746:	bf e3       	ldi	r27, 0x3F	; 63
    2748:	8b 87       	std	Y+11, r24	; 0x0b
    274a:	9c 87       	std	Y+12, r25	; 0x0c
    274c:	ad 87       	std	Y+13, r26	; 0x0d
    274e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2750:	6b 85       	ldd	r22, Y+11	; 0x0b
    2752:	7c 85       	ldd	r23, Y+12	; 0x0c
    2754:	8d 85       	ldd	r24, Y+13	; 0x0d
    2756:	9e 85       	ldd	r25, Y+14	; 0x0e
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a ef       	ldi	r20, 0xFA	; 250
    275e:	54 e4       	ldi	r21, 0x44	; 68
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8f 83       	std	Y+7, r24	; 0x07
    276a:	98 87       	std	Y+8, r25	; 0x08
    276c:	a9 87       	std	Y+9, r26	; 0x09
    276e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2770:	6f 81       	ldd	r22, Y+7	; 0x07
    2772:	78 85       	ldd	r23, Y+8	; 0x08
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	2c f4       	brge	.+10     	; 0x2792 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	8d 83       	std	Y+5, r24	; 0x05
    2790:	3f c0       	rjmp	.+126    	; 0x2810 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	4c f5       	brge	.+82     	; 0x27fc <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	bc 01       	movw	r22, r24
    27c4:	cd 01       	movw	r24, r26
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
    27d2:	0f c0       	rjmp	.+30     	; 0x27f2 <LCD_displayCharacter+0x8ac>
    27d4:	88 ec       	ldi	r24, 0xC8	; 200
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	8b 83       	std	Y+3, r24	; 0x03
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_displayCharacter+0x89a>
    27e4:	9c 83       	std	Y+4, r25	; 0x04
    27e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	69 f7       	brne	.-38     	; 0x27d4 <LCD_displayCharacter+0x88e>
    27fa:	14 c0       	rjmp	.+40     	; 0x2824 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	6f 81       	ldd	r22, Y+7	; 0x07
    27fe:	78 85       	ldd	r23, Y+8	; 0x08
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <LCD_displayCharacter+0x8d6>
    2820:	9a 83       	std	Y+2, r25	; 0x02
    2822:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2824:	cd 59       	subi	r28, 0x9D	; 157
    2826:	df 4f       	sbci	r29, 0xFF	; 255
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	08 95       	ret

0000283c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	00 d0       	rcall	.+0      	; 0x2842 <LCD_displayString+0x6>
    2842:	0f 92       	push	r0
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	9b 83       	std	Y+3, r25	; 0x03
    284a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    284c:	19 82       	std	Y+1, r1	; 0x01
    284e:	0e c0       	rjmp	.+28     	; 0x286c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	9b 81       	ldd	r25, Y+3	; 0x03
    285a:	fc 01       	movw	r30, r24
    285c:	e2 0f       	add	r30, r18
    285e:	f3 1f       	adc	r31, r19
    2860:	80 81       	ld	r24, Z
    2862:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_displayCharacter>
		i++;
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	9b 81       	ldd	r25, Y+3	; 0x03
    2876:	fc 01       	movw	r30, r24
    2878:	e2 0f       	add	r30, r18
    287a:	f3 1f       	adc	r31, r19
    287c:	80 81       	ld	r24, Z
    287e:	88 23       	and	r24, r24
    2880:	39 f7       	brne	.-50     	; 0x2850 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	00 d0       	rcall	.+0      	; 0x2894 <LCD_moveCursor+0x6>
    2894:	00 d0       	rcall	.+0      	; 0x2896 <LCD_moveCursor+0x8>
    2896:	0f 92       	push	r0
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	8a 83       	std	Y+2, r24	; 0x02
    289e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	3d 83       	std	Y+5, r19	; 0x05
    28a8:	2c 83       	std	Y+4, r18	; 0x04
    28aa:	8c 81       	ldd	r24, Y+4	; 0x04
    28ac:	9d 81       	ldd	r25, Y+5	; 0x05
    28ae:	81 30       	cpi	r24, 0x01	; 1
    28b0:	91 05       	cpc	r25, r1
    28b2:	c1 f0       	breq	.+48     	; 0x28e4 <LCD_moveCursor+0x56>
    28b4:	2c 81       	ldd	r18, Y+4	; 0x04
    28b6:	3d 81       	ldd	r19, Y+5	; 0x05
    28b8:	22 30       	cpi	r18, 0x02	; 2
    28ba:	31 05       	cpc	r19, r1
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <LCD_moveCursor+0x3a>
    28be:	8c 81       	ldd	r24, Y+4	; 0x04
    28c0:	9d 81       	ldd	r25, Y+5	; 0x05
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	61 f0       	breq	.+24     	; 0x28de <LCD_moveCursor+0x50>
    28c6:	19 c0       	rjmp	.+50     	; 0x28fa <LCD_moveCursor+0x6c>
    28c8:	2c 81       	ldd	r18, Y+4	; 0x04
    28ca:	3d 81       	ldd	r19, Y+5	; 0x05
    28cc:	22 30       	cpi	r18, 0x02	; 2
    28ce:	31 05       	cpc	r19, r1
    28d0:	69 f0       	breq	.+26     	; 0x28ec <LCD_moveCursor+0x5e>
    28d2:	8c 81       	ldd	r24, Y+4	; 0x04
    28d4:	9d 81       	ldd	r25, Y+5	; 0x05
    28d6:	83 30       	cpi	r24, 0x03	; 3
    28d8:	91 05       	cpc	r25, r1
    28da:	61 f0       	breq	.+24     	; 0x28f4 <LCD_moveCursor+0x66>
    28dc:	0e c0       	rjmp	.+28     	; 0x28fa <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	0b c0       	rjmp	.+22     	; 0x28fa <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	80 5c       	subi	r24, 0xC0	; 192
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	07 c0       	rjmp	.+14     	; 0x28fa <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	80 5f       	subi	r24, 0xF0	; 240
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	03 c0       	rjmp	.+6      	; 0x28fa <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	80 5b       	subi	r24, 0xB0	; 176
    28f8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	80 68       	ori	r24, 0x80	; 128
    28fe:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <LCD_displayStringRowColumn+0x6>
    2918:	00 d0       	rcall	.+0      	; 0x291a <LCD_displayStringRowColumn+0x8>
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	6a 83       	std	Y+2, r22	; 0x02
    2922:	5c 83       	std	Y+4, r21	; 0x04
    2924:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	6a 81       	ldd	r22, Y+2	; 0x02
    292a:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_displayString>
}
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	62 97       	sbiw	r28, 0x12	; 18
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	9a 8b       	std	Y+18, r25	; 0x12
    295a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    295c:	89 89       	ldd	r24, Y+17	; 0x11
    295e:	9a 89       	ldd	r25, Y+18	; 0x12
    2960:	9e 01       	movw	r18, r28
    2962:	2f 5f       	subi	r18, 0xFF	; 255
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	b9 01       	movw	r22, r18
    2968:	4a e0       	ldi	r20, 0x0A	; 10
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	0e 94 c0 21 	call	0x4380	; 0x4380 <itoa>
   LCD_displayString(buff); /* Display the string */
    2970:	ce 01       	movw	r24, r28
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_displayString>
}
    2978:	62 96       	adiw	r28, 0x12	; 18
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <Timer1_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <Timer1_init+0x6>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01

	if (Config_Ptr -> mode == ctc_mode)
    29ac:	e9 81       	ldd	r30, Y+1	; 0x01
    29ae:	fa 81       	ldd	r31, Y+2	; 0x02
    29b0:	85 81       	ldd	r24, Z+5	; 0x05
    29b2:	84 30       	cpi	r24, 0x04	; 4
    29b4:	81 f4       	brne	.+32     	; 0x29d6 <Timer1_init+0x38>
	{
		SET_BIT(TIMSK, OCIE1A); /* Enable Timer1 Compare A Interrupt */
    29b6:	a9 e5       	ldi	r26, 0x59	; 89
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e9 e5       	ldi	r30, 0x59	; 89
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	80 61       	ori	r24, 0x10	; 16
    29c2:	8c 93       	st	X, r24
		OCR1A = Config_Ptr-> compare_value;
    29c4:	aa e4       	ldi	r26, 0x4A	; 74
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ca:	fa 81       	ldd	r31, Y+2	; 0x02
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	11 96       	adiw	r26, 0x01	; 1
    29d2:	9c 93       	st	X, r25
    29d4:	8e 93       	st	-X, r24

	}
	if (Config_Ptr->mode == normal_mode) {
    29d6:	e9 81       	ldd	r30, Y+1	; 0x01
    29d8:	fa 81       	ldd	r31, Y+2	; 0x02
    29da:	85 81       	ldd	r24, Z+5	; 0x05
    29dc:	88 23       	and	r24, r24
    29de:	39 f4       	brne	.+14     	; 0x29ee <Timer1_init+0x50>
		TIMSK |= (1 << TOIE0); // Enable Timer0 Overflow Interrupt
    29e0:	a9 e5       	ldi	r26, 0x59	; 89
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e9 e5       	ldi	r30, 0x59	; 89
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	81 60       	ori	r24, 0x01	; 1
    29ec:	8c 93       	st	X, r24
	}
	// 1110 0111
	TCCR1A = (1<<FOC1A);
    29ee:	ef e4       	ldi	r30, 0x4F	; 79
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	88 e0       	ldi	r24, 0x08	; 8
    29f4:	80 83       	st	Z, r24

	//Mode
	TCCR1A = (TCCR1A & 0xFC) | (Config_Ptr->mode);
    29f6:	af e4       	ldi	r26, 0x4F	; 79
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	ef e4       	ldi	r30, 0x4F	; 79
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	98 2f       	mov	r25, r24
    2a02:	9c 7f       	andi	r25, 0xFC	; 252
    2a04:	e9 81       	ldd	r30, Y+1	; 0x01
    2a06:	fa 81       	ldd	r31, Y+2	; 0x02
    2a08:	85 81       	ldd	r24, Z+5	; 0x05
    2a0a:	89 2b       	or	r24, r25
    2a0c:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | (Config_Ptr->mode);
    2a0e:	ae e4       	ldi	r26, 0x4E	; 78
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ee e4       	ldi	r30, 0x4E	; 78
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	98 2f       	mov	r25, r24
    2a1a:	97 7e       	andi	r25, 0xE7	; 231
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	85 81       	ldd	r24, Z+5	; 0x05
    2a22:	89 2b       	or	r24, r25
    2a24:	8c 93       	st	X, r24

	//prescaler 1111 1000
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2a26:	ae e4       	ldi	r26, 0x4E	; 78
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	ee e4       	ldi	r30, 0x4E	; 78
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	98 2f       	mov	r25, r24
    2a32:	98 7f       	andi	r25, 0xF8	; 248
    2a34:	e9 81       	ldd	r30, Y+1	; 0x01
    2a36:	fa 81       	ldd	r31, Y+2	; 0x02
    2a38:	84 81       	ldd	r24, Z+4	; 0x04
    2a3a:	89 2b       	or	r24, r25
    2a3c:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
    2a3e:	ac e4       	ldi	r26, 0x4C	; 76
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e9 81       	ldd	r30, Y+1	; 0x01
    2a44:	fa 81       	ldd	r31, Y+2	; 0x02
    2a46:	80 81       	ld	r24, Z
    2a48:	91 81       	ldd	r25, Z+1	; 0x01
    2a4a:	11 96       	adiw	r26, 0x01	; 1
    2a4c:	9c 93       	st	X, r25
    2a4e:	8e 93       	st	-X, r24

}
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <Timer1_deInit>:


void Timer1_deInit(void)
{
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2a62:	ef e4       	ldi	r30, 0x4F	; 79
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	10 82       	st	Z, r1
	TCCR1B = 0;
    2a68:	ee e4       	ldi	r30, 0x4E	; 78
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	10 82       	st	Z, r1
	g_callBackPtr = NULL_PTR;
    2a6e:	10 92 03 01 	sts	0x0103, r1
    2a72:	10 92 02 01 	sts	0x0102, r1

}
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <Timer1_setCallBackFunction>:

void Timer1_setCallBackFunction(void(*a_ptr)(void))
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <Timer1_setCallBackFunction+0x6>
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	90 93 03 01 	sts	0x0103, r25
    2a92:	80 93 02 01 	sts	0x0102, r24
}
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
    2aa0:	1f 92       	push	r1
    2aa2:	0f 92       	push	r0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	0f 92       	push	r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	2f 93       	push	r18
    2aac:	3f 93       	push	r19
    2aae:	4f 93       	push	r20
    2ab0:	5f 93       	push	r21
    2ab2:	6f 93       	push	r22
    2ab4:	7f 93       	push	r23
    2ab6:	8f 93       	push	r24
    2ab8:	9f 93       	push	r25
    2aba:	af 93       	push	r26
    2abc:	bf 93       	push	r27
    2abe:	ef 93       	push	r30
    2ac0:	ff 93       	push	r31
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2aca:	80 91 02 01 	lds	r24, 0x0102
    2ace:	90 91 03 01 	lds	r25, 0x0103
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	29 f0       	breq	.+10     	; 0x2ae0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2ad6:	e0 91 02 01 	lds	r30, 0x0102
    2ada:	f0 91 03 01 	lds	r31, 0x0103
    2ade:	09 95       	icall
	}
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	ff 91       	pop	r31
    2ae6:	ef 91       	pop	r30
    2ae8:	bf 91       	pop	r27
    2aea:	af 91       	pop	r26
    2aec:	9f 91       	pop	r25
    2aee:	8f 91       	pop	r24
    2af0:	7f 91       	pop	r23
    2af2:	6f 91       	pop	r22
    2af4:	5f 91       	pop	r21
    2af6:	4f 91       	pop	r20
    2af8:	3f 91       	pop	r19
    2afa:	2f 91       	pop	r18
    2afc:	0f 90       	pop	r0
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	0f 90       	pop	r0
    2b02:	1f 90       	pop	r1
    2b04:	18 95       	reti

00002b06 <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_ConfigType * Config_Ptr)
{
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <UART_init+0x6>
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <UART_init+0x8>
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	9c 83       	std	Y+4, r25	; 0x04
    2b14:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2b16:	1a 82       	std	Y+2, r1	; 0x02
    2b18:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b1a:	eb e2       	ldi	r30, 0x2B	; 43
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)| (GET_BIT(Config_Ptr->bit_data,2)<<2);
    2b22:	aa e2       	ldi	r26, 0x2A	; 42
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	eb 81       	ldd	r30, Y+3	; 0x03
    2b28:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2a:	80 81       	ld	r24, Z
    2b2c:	84 70       	andi	r24, 0x04	; 4
    2b2e:	88 61       	ori	r24, 0x18	; 24
    2b30:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data& 6)<<1) | (Config_Ptr->stop_bit <<3) |(Config_Ptr->parity)<<5;
    2b32:	a0 e4       	ldi	r26, 0x40	; 64
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	eb 81       	ldd	r30, Y+3	; 0x03
    2b38:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3a:	80 81       	ld	r24, Z
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	86 70       	andi	r24, 0x06	; 6
    2b42:	90 70       	andi	r25, 0x00	; 0
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	28 2f       	mov	r18, r24
    2b4a:	20 68       	ori	r18, 0x80	; 128
    2b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	28 2b       	or	r18, r24
    2b64:	eb 81       	ldd	r30, Y+3	; 0x03
    2b66:	fc 81       	ldd	r31, Y+4	; 0x04
    2b68:	81 81       	ldd	r24, Z+1	; 0x01
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	82 95       	swap	r24
    2b74:	92 95       	swap	r25
    2b76:	90 7f       	andi	r25, 0xF0	; 240
    2b78:	98 27       	eor	r25, r24
    2b7a:	80 7f       	andi	r24, 0xF0	; 240
    2b7c:	98 27       	eor	r25, r24
    2b7e:	82 2b       	or	r24, r18
    2b80:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2b82:	eb 81       	ldd	r30, Y+3	; 0x03
    2b84:	fc 81       	ldd	r31, Y+4	; 0x04
    2b86:	83 81       	ldd	r24, Z+3	; 0x03
    2b88:	94 81       	ldd	r25, Z+4	; 0x04
    2b8a:	a5 81       	ldd	r26, Z+5	; 0x05
    2b8c:	b6 81       	ldd	r27, Z+6	; 0x06
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	aa 1f       	adc	r26, r26
    2b94:	bb 1f       	adc	r27, r27
    2b96:	88 0f       	add	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	aa 1f       	adc	r26, r26
    2b9c:	bb 1f       	adc	r27, r27
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	aa 1f       	adc	r26, r26
    2ba4:	bb 1f       	adc	r27, r27
    2ba6:	9c 01       	movw	r18, r24
    2ba8:	ad 01       	movw	r20, r26
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	92 e1       	ldi	r25, 0x12	; 18
    2bae:	aa e7       	ldi	r26, 0x7A	; 122
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 67 21 	call	0x42ce	; 0x42ce <__udivmodsi4>
    2bba:	da 01       	movw	r26, r20
    2bbc:	c9 01       	movw	r24, r18
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9a 83       	std	Y+2, r25	; 0x02
    2bc2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2bc4:	e0 e4       	ldi	r30, 0x40	; 64
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	89 2f       	mov	r24, r25
    2bce:	99 27       	eor	r25, r25
    2bd0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2bd2:	e9 e2       	ldi	r30, 0x29	; 41
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	80 83       	st	Z, r24

}
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	2f 97       	sbiw	r28, 0x0f	; 15
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bfe:	eb e2       	ldi	r30, 0x2B	; 43
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	80 72       	andi	r24, 0x20	; 32
    2c0a:	90 70       	andi	r25, 0x00	; 0
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	b9 f3       	breq	.-18     	; 0x2bfe <UART_sendByte+0x16>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c10:	ec e2       	ldi	r30, 0x2C	; 44
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c16:	80 83       	st	Z, r24
	GPIO_writePin(PORTD_ID, PIN7_ID, 1);
    2c18:	83 e0       	ldi	r24, 0x03	; 3
    2c1a:	67 e0       	ldi	r22, 0x07	; 7
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	a6 e9       	ldi	r26, 0x96	; 150
    2c28:	b3 e4       	ldi	r27, 0x43	; 67
    2c2a:	8b 87       	std	Y+11, r24	; 0x0b
    2c2c:	9c 87       	std	Y+12, r25	; 0x0c
    2c2e:	ad 87       	std	Y+13, r26	; 0x0d
    2c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a ef       	ldi	r20, 0xFA	; 250
    2c40:	54 e4       	ldi	r21, 0x44	; 68
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	8f 83       	std	Y+7, r24	; 0x07
    2c4c:	98 87       	std	Y+8, r25	; 0x08
    2c4e:	a9 87       	std	Y+9, r26	; 0x09
    2c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c52:	6f 81       	ldd	r22, Y+7	; 0x07
    2c54:	78 85       	ldd	r23, Y+8	; 0x08
    2c56:	89 85       	ldd	r24, Y+9	; 0x09
    2c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e8       	ldi	r20, 0x80	; 128
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c66:	88 23       	and	r24, r24
    2c68:	2c f4       	brge	.+10     	; 0x2c74 <UART_sendByte+0x8c>
		__ticks = 1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
    2c72:	3f c0       	rjmp	.+126    	; 0x2cf2 <UART_sendByte+0x10a>
	else if (__tmp > 65535)
    2c74:	6f 81       	ldd	r22, Y+7	; 0x07
    2c76:	78 85       	ldd	r23, Y+8	; 0x08
    2c78:	89 85       	ldd	r24, Y+9	; 0x09
    2c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	3f ef       	ldi	r19, 0xFF	; 255
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	57 e4       	ldi	r21, 0x47	; 71
    2c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	4c f5       	brge	.+82     	; 0x2cde <UART_sendByte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	51 e4       	ldi	r21, 0x41	; 65
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <UART_sendByte+0xec>
    2cb6:	88 ec       	ldi	r24, 0xC8	; 200
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9c 83       	std	Y+4, r25	; 0x04
    2cbc:	8b 83       	std	Y+3, r24	; 0x03
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	f1 f7       	brne	.-4      	; 0x2cc2 <UART_sendByte+0xda>
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <UART_sendByte+0xce>
    2cdc:	14 c0       	rjmp	.+40     	; 0x2d06 <UART_sendByte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cde:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce0:	78 85       	ldd	r23, Y+8	; 0x08
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <UART_sendByte+0x116>
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	GPIO_writePin(PORTD_ID, PIN7_ID, 0);
    2d06:	83 e0       	ldi	r24, 0x03	; 3
    2d08:	67 e0       	ldi	r22, 0x07	; 7
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d10:	2f 96       	adiw	r28, 0x0f	; 15
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	2e 97       	sbiw	r28, 0x0e	; 14
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d36:	eb e2       	ldi	r30, 0x2B	; 43
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	88 23       	and	r24, r24
    2d3e:	dc f7       	brge	.-10     	; 0x2d36 <UART_recieveByte+0x14>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	GPIO_writePin(PORTA_ID, PIN0_ID, 1);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	41 e0       	ldi	r20, 0x01	; 1
    2d46:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	a6 e9       	ldi	r26, 0x96	; 150
    2d50:	b3 e4       	ldi	r27, 0x43	; 67
    2d52:	8b 87       	std	Y+11, r24	; 0x0b
    2d54:	9c 87       	std	Y+12, r25	; 0x0c
    2d56:	ad 87       	std	Y+13, r26	; 0x0d
    2d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	4a ef       	ldi	r20, 0xFA	; 250
    2d68:	54 e4       	ldi	r21, 0x44	; 68
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8f 83       	std	Y+7, r24	; 0x07
    2d74:	98 87       	std	Y+8, r25	; 0x08
    2d76:	a9 87       	std	Y+9, r26	; 0x09
    2d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e8       	ldi	r20, 0x80	; 128
    2d88:	5f e3       	ldi	r21, 0x3F	; 63
    2d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8e:	88 23       	and	r24, r24
    2d90:	2c f4       	brge	.+10     	; 0x2d9c <UART_recieveByte+0x7a>
		__ticks = 1;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	3f c0       	rjmp	.+126    	; 0x2e1a <UART_recieveByte+0xf8>
	else if (__tmp > 65535)
    2d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9e:	78 85       	ldd	r23, Y+8	; 0x08
    2da0:	89 85       	ldd	r24, Y+9	; 0x09
    2da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	4f e7       	ldi	r20, 0x7F	; 127
    2daa:	57 e4       	ldi	r21, 0x47	; 71
    2dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db0:	18 16       	cp	r1, r24
    2db2:	4c f5       	brge	.+82     	; 0x2e06 <UART_recieveByte+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	0f c0       	rjmp	.+30     	; 0x2dfc <UART_recieveByte+0xda>
    2dde:	88 ec       	ldi	r24, 0xC8	; 200
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9c 83       	std	Y+4, r25	; 0x04
    2de4:	8b 83       	std	Y+3, r24	; 0x03
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <UART_recieveByte+0xc8>
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	69 f7       	brne	.-38     	; 0x2dde <UART_recieveByte+0xbc>
    2e04:	14 c0       	rjmp	.+40     	; 0x2e2e <UART_recieveByte+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <UART_recieveByte+0x104>
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	GPIO_writePin(PORTA_ID, PIN0_ID, 0);
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    return UDR;		
    2e38:	ec e2       	ldi	r30, 0x2C	; 44
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
}
    2e3e:	2e 96       	adiw	r28, 0x0e	; 14
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <UART_sendString+0x6>
    2e56:	0f 92       	push	r0
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	9b 83       	std	Y+3, r25	; 0x03
    2e5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e60:	19 82       	std	Y+1, r1	; 0x01
    2e62:	0e c0       	rjmp	.+28     	; 0x2e80 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	fc 01       	movw	r30, r24
    2e70:	e2 0f       	add	r30, r18
    2e72:	f3 1f       	adc	r31, r19
    2e74:	80 81       	ld	r24, Z
    2e76:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
		i++;
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	8f 5f       	subi	r24, 0xFF	; 255
    2e7e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	e2 0f       	add	r30, r18
    2e8e:	f3 1f       	adc	r31, r19
    2e90:	80 81       	ld	r24, Z
    2e92:	88 23       	and	r24, r24
    2e94:	39 f7       	brne	.-50     	; 0x2e64 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <UART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_recieveString(uint8 *Str)
{
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <UART_recieveString+0xa>
    2eac:	0f 92       	push	r0
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9b 83       	std	Y+3, r25	; 0x03
    2eb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eb6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec2:	8c 01       	movw	r16, r24
    2ec4:	02 0f       	add	r16, r18
    2ec6:	13 1f       	adc	r17, r19
    2ec8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    2ecc:	f8 01       	movw	r30, r16
    2ece:	80 83       	st	Z, r24
    2ed0:	0f c0       	rjmp	.+30     	; 0x2ef0 <UART_recieveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	8f 5f       	subi	r24, 0xFF	; 255
    2ed6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	28 2f       	mov	r18, r24
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee2:	8c 01       	movw	r16, r24
    2ee4:	02 0f       	add	r16, r18
    2ee6:	13 1f       	adc	r17, r19
    2ee8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    2eec:	f8 01       	movw	r30, r16
    2eee:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    2efa:	fc 01       	movw	r30, r24
    2efc:	e2 0f       	add	r30, r18
    2efe:	f3 1f       	adc	r31, r19
    2f00:	80 81       	ld	r24, Z
    2f02:	83 32       	cpi	r24, 0x23	; 35
    2f04:	31 f7       	brne	.-52     	; 0x2ed2 <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f10:	fc 01       	movw	r30, r24
    2f12:	e2 0f       	add	r30, r18
    2f14:	f3 1f       	adc	r31, r19
    2f16:	10 82       	st	Z, r1
}
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	cf 91       	pop	r28
    2f20:	df 91       	pop	r29
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	08 95       	ret

00002f28 <read_password>:
	CREATE_PASSWORD, VALIDATE_PASSWORD, OPEN_DOOR, CHANGE_PASSWORD, UART_ERROR
}UART_message ;

int Password_Set = 0; //global variable to check if password is set;

void read_password(char pass[PASS_SIZE], char* state){
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	ef 97       	sbiw	r28, 0x3f	; 63
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	9d af       	std	Y+61, r25	; 0x3d
    2f3e:	8c af       	std	Y+60, r24	; 0x3c
    2f40:	7f af       	std	Y+63, r23	; 0x3f
    2f42:	6e af       	std	Y+62, r22	; 0x3e
	//_delay_ms(500);
	int i=0;
    2f44:	1b ae       	std	Y+59, r1	; 0x3b
    2f46:	1a ae       	std	Y+58, r1	; 0x3a
	char digit;
	//LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,state);
    2f48:	2e ad       	ldd	r18, Y+62	; 0x3e
    2f4a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	a9 01       	movw	r20, r18
    2f52:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	aa ef       	ldi	r26, 0xFA	; 250
    2f5c:	b3 e4       	ldi	r27, 0x43	; 67
    2f5e:	8d ab       	std	Y+53, r24	; 0x35
    2f60:	9e ab       	std	Y+54, r25	; 0x36
    2f62:	af ab       	std	Y+55, r26	; 0x37
    2f64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f66:	6d a9       	ldd	r22, Y+53	; 0x35
    2f68:	7e a9       	ldd	r23, Y+54	; 0x36
    2f6a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f6c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	4a ef       	ldi	r20, 0xFA	; 250
    2f74:	54 e4       	ldi	r21, 0x44	; 68
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	89 ab       	std	Y+49, r24	; 0x31
    2f80:	9a ab       	std	Y+50, r25	; 0x32
    2f82:	ab ab       	std	Y+51, r26	; 0x33
    2f84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f86:	69 a9       	ldd	r22, Y+49	; 0x31
    2f88:	7a a9       	ldd	r23, Y+50	; 0x32
    2f8a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f8c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e8       	ldi	r20, 0x80	; 128
    2f94:	5f e3       	ldi	r21, 0x3F	; 63
    2f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9a:	88 23       	and	r24, r24
    2f9c:	2c f4       	brge	.+10     	; 0x2fa8 <read_password+0x80>
		__ticks = 1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	98 ab       	std	Y+48, r25	; 0x30
    2fa4:	8f a7       	std	Y+47, r24	; 0x2f
    2fa6:	3f c0       	rjmp	.+126    	; 0x3026 <read_password+0xfe>
	else if (__tmp > 65535)
    2fa8:	69 a9       	ldd	r22, Y+49	; 0x31
    2faa:	7a a9       	ldd	r23, Y+50	; 0x32
    2fac:	8b a9       	ldd	r24, Y+51	; 0x33
    2fae:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	3f ef       	ldi	r19, 0xFF	; 255
    2fb4:	4f e7       	ldi	r20, 0x7F	; 127
    2fb6:	57 e4       	ldi	r21, 0x47	; 71
    2fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fbc:	18 16       	cp	r1, r24
    2fbe:	4c f5       	brge	.+82     	; 0x3012 <read_password+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc0:	6d a9       	ldd	r22, Y+53	; 0x35
    2fc2:	7e a9       	ldd	r23, Y+54	; 0x36
    2fc4:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc6:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e2       	ldi	r20, 0x20	; 32
    2fce:	51 e4       	ldi	r21, 0x41	; 65
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	98 ab       	std	Y+48, r25	; 0x30
    2fe6:	8f a7       	std	Y+47, r24	; 0x2f
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <read_password+0xe0>
    2fea:	88 ec       	ldi	r24, 0xC8	; 200
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9e a7       	std	Y+46, r25	; 0x2e
    2ff0:	8d a7       	std	Y+45, r24	; 0x2d
    2ff2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ff4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <read_password+0xce>
    2ffa:	9e a7       	std	Y+46, r25	; 0x2e
    2ffc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3000:	98 a9       	ldd	r25, Y+48	; 0x30
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	98 ab       	std	Y+48, r25	; 0x30
    3006:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3008:	8f a5       	ldd	r24, Y+47	; 0x2f
    300a:	98 a9       	ldd	r25, Y+48	; 0x30
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	69 f7       	brne	.-38     	; 0x2fea <read_password+0xc2>
    3010:	35 c1       	rjmp	.+618    	; 0x327c <read_password+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3012:	69 a9       	ldd	r22, Y+49	; 0x31
    3014:	7a a9       	ldd	r23, Y+50	; 0x32
    3016:	8b a9       	ldd	r24, Y+51	; 0x33
    3018:	9c a9       	ldd	r25, Y+52	; 0x34
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	98 ab       	std	Y+48, r25	; 0x30
    3024:	8f a7       	std	Y+47, r24	; 0x2f
    3026:	8f a5       	ldd	r24, Y+47	; 0x2f
    3028:	98 a9       	ldd	r25, Y+48	; 0x30
    302a:	9c a7       	std	Y+44, r25	; 0x2c
    302c:	8b a7       	std	Y+43, r24	; 0x2b
    302e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3030:	9c a5       	ldd	r25, Y+44	; 0x2c
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <read_password+0x10a>
    3036:	9c a7       	std	Y+44, r25	; 0x2c
    3038:	8b a7       	std	Y+43, r24	; 0x2b
    303a:	20 c1       	rjmp	.+576    	; 0x327c <read_password+0x354>
	_delay_ms(500);
	while(i<PASS_SIZE){
		digit = KEYPAD_getPressedKey();
    303c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    3040:	89 af       	std	Y+57, r24	; 0x39
		if(digit!='=' && isdigit(digit)){
    3042:	89 ad       	ldd	r24, Y+57	; 0x39
    3044:	8d 33       	cpi	r24, 0x3D	; 61
    3046:	89 f0       	breq	.+34     	; 0x306a <read_password+0x142>
    3048:	89 ad       	ldd	r24, Y+57	; 0x39
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	c0 97       	sbiw	r24, 0x30	; 48
    3050:	8a 30       	cpi	r24, 0x0A	; 10
    3052:	91 05       	cpc	r25, r1
    3054:	50 f4       	brcc	.+20     	; 0x306a <read_password+0x142>
			LCD_moveCursor(1,i+1);
    3056:	8a ad       	ldd	r24, Y+58	; 0x3a
    3058:	98 2f       	mov	r25, r24
    305a:	9f 5f       	subi	r25, 0xFF	; 255
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	69 2f       	mov	r22, r25
    3060:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_moveCursor>
			LCD_displayCharacter('*');
    3064:	8a e2       	ldi	r24, 0x2A	; 42
    3066:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_displayCharacter>
		}
		if(digit == '='){
    306a:	89 ad       	ldd	r24, Y+57	; 0x39
    306c:	8d 33       	cpi	r24, 0x3D	; 61
    306e:	09 f0       	breq	.+2      	; 0x3072 <read_password+0x14a>
    3070:	85 c0       	rjmp	.+266    	; 0x317c <read_password+0x254>
			if(i>=5)
    3072:	8a ad       	ldd	r24, Y+58	; 0x3a
    3074:	9b ad       	ldd	r25, Y+59	; 0x3b
    3076:	85 30       	cpi	r24, 0x05	; 5
    3078:	91 05       	cpc	r25, r1
    307a:	0c f0       	brlt	.+2      	; 0x307e <read_password+0x156>
    307c:	09 c1       	rjmp	.+530    	; 0x3290 <read_password+0x368>
				break;
			else{
				LCD_clearScreen();
    307e:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,state);
    3082:	2e ad       	ldd	r18, Y+62	; 0x3e
    3084:	3f ad       	ldd	r19, Y+63	; 0x3f
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	a9 01       	movw	r20, r18
    308c:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
				i=-1;
    3090:	8f ef       	ldi	r24, 0xFF	; 255
    3092:	9f ef       	ldi	r25, 0xFF	; 255
    3094:	9b af       	std	Y+59, r25	; 0x3b
    3096:	8a af       	std	Y+58, r24	; 0x3a
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	aa ef       	ldi	r26, 0xFA	; 250
    309e:	b3 e4       	ldi	r27, 0x43	; 67
    30a0:	8f a3       	std	Y+39, r24	; 0x27
    30a2:	98 a7       	std	Y+40, r25	; 0x28
    30a4:	a9 a7       	std	Y+41, r26	; 0x29
    30a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a8:	6f a1       	ldd	r22, Y+39	; 0x27
    30aa:	78 a5       	ldd	r23, Y+40	; 0x28
    30ac:	89 a5       	ldd	r24, Y+41	; 0x29
    30ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	4a ef       	ldi	r20, 0xFA	; 250
    30b6:	54 e4       	ldi	r21, 0x44	; 68
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	8b a3       	std	Y+35, r24	; 0x23
    30c2:	9c a3       	std	Y+36, r25	; 0x24
    30c4:	ad a3       	std	Y+37, r26	; 0x25
    30c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30c8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ca:	7c a1       	ldd	r23, Y+36	; 0x24
    30cc:	8d a1       	ldd	r24, Y+37	; 0x25
    30ce:	9e a1       	ldd	r25, Y+38	; 0x26
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e8       	ldi	r20, 0x80	; 128
    30d6:	5f e3       	ldi	r21, 0x3F	; 63
    30d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30dc:	88 23       	and	r24, r24
    30de:	2c f4       	brge	.+10     	; 0x30ea <read_password+0x1c2>
		__ticks = 1;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	9a a3       	std	Y+34, r25	; 0x22
    30e6:	89 a3       	std	Y+33, r24	; 0x21
    30e8:	3f c0       	rjmp	.+126    	; 0x3168 <read_password+0x240>
	else if (__tmp > 65535)
    30ea:	6b a1       	ldd	r22, Y+35	; 0x23
    30ec:	7c a1       	ldd	r23, Y+36	; 0x24
    30ee:	8d a1       	ldd	r24, Y+37	; 0x25
    30f0:	9e a1       	ldd	r25, Y+38	; 0x26
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	3f ef       	ldi	r19, 0xFF	; 255
    30f6:	4f e7       	ldi	r20, 0x7F	; 127
    30f8:	57 e4       	ldi	r21, 0x47	; 71
    30fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fe:	18 16       	cp	r1, r24
    3100:	4c f5       	brge	.+82     	; 0x3154 <read_password+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3102:	6f a1       	ldd	r22, Y+39	; 0x27
    3104:	78 a5       	ldd	r23, Y+40	; 0x28
    3106:	89 a5       	ldd	r24, Y+41	; 0x29
    3108:	9a a5       	ldd	r25, Y+42	; 0x2a
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e2       	ldi	r20, 0x20	; 32
    3110:	51 e4       	ldi	r21, 0x41	; 65
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	bc 01       	movw	r22, r24
    311c:	cd 01       	movw	r24, r26
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	9a a3       	std	Y+34, r25	; 0x22
    3128:	89 a3       	std	Y+33, r24	; 0x21
    312a:	0f c0       	rjmp	.+30     	; 0x314a <read_password+0x222>
    312c:	88 ec       	ldi	r24, 0xC8	; 200
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	98 a3       	std	Y+32, r25	; 0x20
    3132:	8f 8f       	std	Y+31, r24	; 0x1f
    3134:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3136:	98 a1       	ldd	r25, Y+32	; 0x20
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <read_password+0x210>
    313c:	98 a3       	std	Y+32, r25	; 0x20
    313e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3140:	89 a1       	ldd	r24, Y+33	; 0x21
    3142:	9a a1       	ldd	r25, Y+34	; 0x22
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	9a a3       	std	Y+34, r25	; 0x22
    3148:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314a:	89 a1       	ldd	r24, Y+33	; 0x21
    314c:	9a a1       	ldd	r25, Y+34	; 0x22
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	69 f7       	brne	.-38     	; 0x312c <read_password+0x204>
    3152:	14 c0       	rjmp	.+40     	; 0x317c <read_password+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3154:	6b a1       	ldd	r22, Y+35	; 0x23
    3156:	7c a1       	ldd	r23, Y+36	; 0x24
    3158:	8d a1       	ldd	r24, Y+37	; 0x25
    315a:	9e a1       	ldd	r25, Y+38	; 0x26
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9a a3       	std	Y+34, r25	; 0x22
    3166:	89 a3       	std	Y+33, r24	; 0x21
    3168:	89 a1       	ldd	r24, Y+33	; 0x21
    316a:	9a a1       	ldd	r25, Y+34	; 0x22
    316c:	9e 8f       	std	Y+30, r25	; 0x1e
    316e:	8d 8f       	std	Y+29, r24	; 0x1d
    3170:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3172:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <read_password+0x24c>
    3178:	9e 8f       	std	Y+30, r25	; 0x1e
    317a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
			}
		}
		pass[i] = digit;
    317c:	2a ad       	ldd	r18, Y+58	; 0x3a
    317e:	3b ad       	ldd	r19, Y+59	; 0x3b
    3180:	8c ad       	ldd	r24, Y+60	; 0x3c
    3182:	9d ad       	ldd	r25, Y+61	; 0x3d
    3184:	fc 01       	movw	r30, r24
    3186:	e2 0f       	add	r30, r18
    3188:	f3 1f       	adc	r31, r19
    318a:	89 ad       	ldd	r24, Y+57	; 0x39
    318c:	80 83       	st	Z, r24
		//UART_sendByte(pass[i]);
		i++;
    318e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3190:	9b ad       	ldd	r25, Y+59	; 0x3b
    3192:	01 96       	adiw	r24, 0x01	; 1
    3194:	9b af       	std	Y+59, r25	; 0x3b
    3196:	8a af       	std	Y+58, r24	; 0x3a
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	aa ef       	ldi	r26, 0xFA	; 250
    319e:	b3 e4       	ldi	r27, 0x43	; 67
    31a0:	89 8f       	std	Y+25, r24	; 0x19
    31a2:	9a 8f       	std	Y+26, r25	; 0x1a
    31a4:	ab 8f       	std	Y+27, r26	; 0x1b
    31a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a8:	69 8d       	ldd	r22, Y+25	; 0x19
    31aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	4a ef       	ldi	r20, 0xFA	; 250
    31b6:	54 e4       	ldi	r21, 0x44	; 68
    31b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	8d 8b       	std	Y+21, r24	; 0x15
    31c2:	9e 8b       	std	Y+22, r25	; 0x16
    31c4:	af 8b       	std	Y+23, r26	; 0x17
    31c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31c8:	6d 89       	ldd	r22, Y+21	; 0x15
    31ca:	7e 89       	ldd	r23, Y+22	; 0x16
    31cc:	8f 89       	ldd	r24, Y+23	; 0x17
    31ce:	98 8d       	ldd	r25, Y+24	; 0x18
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e8       	ldi	r20, 0x80	; 128
    31d6:	5f e3       	ldi	r21, 0x3F	; 63
    31d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31dc:	88 23       	and	r24, r24
    31de:	2c f4       	brge	.+10     	; 0x31ea <read_password+0x2c2>
		__ticks = 1;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9c 8b       	std	Y+20, r25	; 0x14
    31e6:	8b 8b       	std	Y+19, r24	; 0x13
    31e8:	3f c0       	rjmp	.+126    	; 0x3268 <read_password+0x340>
	else if (__tmp > 65535)
    31ea:	6d 89       	ldd	r22, Y+21	; 0x15
    31ec:	7e 89       	ldd	r23, Y+22	; 0x16
    31ee:	8f 89       	ldd	r24, Y+23	; 0x17
    31f0:	98 8d       	ldd	r25, Y+24	; 0x18
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	3f ef       	ldi	r19, 0xFF	; 255
    31f6:	4f e7       	ldi	r20, 0x7F	; 127
    31f8:	57 e4       	ldi	r21, 0x47	; 71
    31fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31fe:	18 16       	cp	r1, r24
    3200:	4c f5       	brge	.+82     	; 0x3254 <read_password+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3202:	69 8d       	ldd	r22, Y+25	; 0x19
    3204:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e2       	ldi	r20, 0x20	; 32
    3210:	51 e4       	ldi	r21, 0x41	; 65
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	9c 8b       	std	Y+20, r25	; 0x14
    3228:	8b 8b       	std	Y+19, r24	; 0x13
    322a:	0f c0       	rjmp	.+30     	; 0x324a <read_password+0x322>
    322c:	88 ec       	ldi	r24, 0xC8	; 200
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9a 8b       	std	Y+18, r25	; 0x12
    3232:	89 8b       	std	Y+17, r24	; 0x11
    3234:	89 89       	ldd	r24, Y+17	; 0x11
    3236:	9a 89       	ldd	r25, Y+18	; 0x12
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <read_password+0x310>
    323c:	9a 8b       	std	Y+18, r25	; 0x12
    323e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3240:	8b 89       	ldd	r24, Y+19	; 0x13
    3242:	9c 89       	ldd	r25, Y+20	; 0x14
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	9c 8b       	std	Y+20, r25	; 0x14
    3248:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324a:	8b 89       	ldd	r24, Y+19	; 0x13
    324c:	9c 89       	ldd	r25, Y+20	; 0x14
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	69 f7       	brne	.-38     	; 0x322c <read_password+0x304>
    3252:	14 c0       	rjmp	.+40     	; 0x327c <read_password+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3254:	6d 89       	ldd	r22, Y+21	; 0x15
    3256:	7e 89       	ldd	r23, Y+22	; 0x16
    3258:	8f 89       	ldd	r24, Y+23	; 0x17
    325a:	98 8d       	ldd	r25, Y+24	; 0x18
    325c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	9c 8b       	std	Y+20, r25	; 0x14
    3266:	8b 8b       	std	Y+19, r24	; 0x13
    3268:	8b 89       	ldd	r24, Y+19	; 0x13
    326a:	9c 89       	ldd	r25, Y+20	; 0x14
    326c:	98 8b       	std	Y+16, r25	; 0x10
    326e:	8f 87       	std	Y+15, r24	; 0x0f
    3270:	8f 85       	ldd	r24, Y+15	; 0x0f
    3272:	98 89       	ldd	r25, Y+16	; 0x10
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <read_password+0x34c>
    3278:	98 8b       	std	Y+16, r25	; 0x10
    327a:	8f 87       	std	Y+15, r24	; 0x0f
	int i=0;
	char digit;
	//LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,state);
	_delay_ms(500);
	while(i<PASS_SIZE){
    327c:	20 91 f0 00 	lds	r18, 0x00F0
    3280:	30 91 f1 00 	lds	r19, 0x00F1
    3284:	8a ad       	ldd	r24, Y+58	; 0x3a
    3286:	9b ad       	ldd	r25, Y+59	; 0x3b
    3288:	82 17       	cp	r24, r18
    328a:	93 07       	cpc	r25, r19
    328c:	0c f4       	brge	.+2      	; 0x3290 <read_password+0x368>
    328e:	d6 ce       	rjmp	.-596    	; 0x303c <read_password+0x114>
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	aa ef       	ldi	r26, 0xFA	; 250
    3296:	b3 e4       	ldi	r27, 0x43	; 67
    3298:	8b 87       	std	Y+11, r24	; 0x0b
    329a:	9c 87       	std	Y+12, r25	; 0x0c
    329c:	ad 87       	std	Y+13, r26	; 0x0d
    329e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	4a ef       	ldi	r20, 0xFA	; 250
    32ae:	54 e4       	ldi	r21, 0x44	; 68
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	8f 83       	std	Y+7, r24	; 0x07
    32ba:	98 87       	std	Y+8, r25	; 0x08
    32bc:	a9 87       	std	Y+9, r26	; 0x09
    32be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c0:	6f 81       	ldd	r22, Y+7	; 0x07
    32c2:	78 85       	ldd	r23, Y+8	; 0x08
    32c4:	89 85       	ldd	r24, Y+9	; 0x09
    32c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e8       	ldi	r20, 0x80	; 128
    32ce:	5f e3       	ldi	r21, 0x3F	; 63
    32d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32d4:	88 23       	and	r24, r24
    32d6:	2c f4       	brge	.+10     	; 0x32e2 <read_password+0x3ba>
		__ticks = 1;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	9e 83       	std	Y+6, r25	; 0x06
    32de:	8d 83       	std	Y+5, r24	; 0x05
    32e0:	3f c0       	rjmp	.+126    	; 0x3360 <read_password+0x438>
	else if (__tmp > 65535)
    32e2:	6f 81       	ldd	r22, Y+7	; 0x07
    32e4:	78 85       	ldd	r23, Y+8	; 0x08
    32e6:	89 85       	ldd	r24, Y+9	; 0x09
    32e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	3f ef       	ldi	r19, 0xFF	; 255
    32ee:	4f e7       	ldi	r20, 0x7F	; 127
    32f0:	57 e4       	ldi	r21, 0x47	; 71
    32f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32f6:	18 16       	cp	r1, r24
    32f8:	4c f5       	brge	.+82     	; 0x334c <read_password+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3300:	9e 85       	ldd	r25, Y+14	; 0x0e
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	40 e2       	ldi	r20, 0x20	; 32
    3308:	51 e4       	ldi	r21, 0x41	; 65
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	bc 01       	movw	r22, r24
    3314:	cd 01       	movw	r24, r26
    3316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	9e 83       	std	Y+6, r25	; 0x06
    3320:	8d 83       	std	Y+5, r24	; 0x05
    3322:	0f c0       	rjmp	.+30     	; 0x3342 <read_password+0x41a>
    3324:	88 ec       	ldi	r24, 0xC8	; 200
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	9c 83       	std	Y+4, r25	; 0x04
    332a:	8b 83       	std	Y+3, r24	; 0x03
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	f1 f7       	brne	.-4      	; 0x3330 <read_password+0x408>
    3334:	9c 83       	std	Y+4, r25	; 0x04
    3336:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3338:	8d 81       	ldd	r24, Y+5	; 0x05
    333a:	9e 81       	ldd	r25, Y+6	; 0x06
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	9e 83       	std	Y+6, r25	; 0x06
    3340:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3342:	8d 81       	ldd	r24, Y+5	; 0x05
    3344:	9e 81       	ldd	r25, Y+6	; 0x06
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	69 f7       	brne	.-38     	; 0x3324 <read_password+0x3fc>
    334a:	14 c0       	rjmp	.+40     	; 0x3374 <read_password+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334c:	6f 81       	ldd	r22, Y+7	; 0x07
    334e:	78 85       	ldd	r23, Y+8	; 0x08
    3350:	89 85       	ldd	r24, Y+9	; 0x09
    3352:	9a 85       	ldd	r25, Y+10	; 0x0a
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
    3360:	8d 81       	ldd	r24, Y+5	; 0x05
    3362:	9e 81       	ldd	r25, Y+6	; 0x06
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	89 83       	std	Y+1, r24	; 0x01
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	9a 81       	ldd	r25, Y+2	; 0x02
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <read_password+0x444>
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01
		//UART_sendByte(pass[i]);
		i++;
		_delay_ms(500);
	}
	_delay_ms(500);
	pass[5]='#';
    3374:	8c ad       	ldd	r24, Y+60	; 0x3c
    3376:	9d ad       	ldd	r25, Y+61	; 0x3d
    3378:	fc 01       	movw	r30, r24
    337a:	35 96       	adiw	r30, 0x05	; 5
    337c:	83 e2       	ldi	r24, 0x23	; 35
    337e:	80 83       	st	Z, r24
	//LCD_displayStringRowColumn(1,0,pass);
}
    3380:	ef 96       	adiw	r28, 0x3f	; 63
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <create_password>:

void create_password(char password[PASS_SIZE], char* state){
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	df 93       	push	r29
    3398:	cf 93       	push	r28
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	c9 56       	subi	r28, 0x69	; 105
    33a0:	d0 40       	sbci	r29, 0x00	; 0
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
    33ac:	fe 01       	movw	r30, r28
    33ae:	e0 5a       	subi	r30, 0xA0	; 160
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	80 83       	st	Z, r24
    33b6:	fe 01       	movw	r30, r28
    33b8:	ee 59       	subi	r30, 0x9E	; 158
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	71 83       	std	Z+1, r23	; 0x01
    33be:	60 83       	st	Z, r22
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"PASS SET");
	_delay_ms(500);

	return;
}
    33c0:	2d b7       	in	r18, 0x3d	; 61
    33c2:	3e b7       	in	r19, 0x3e	; 62
    33c4:	aa 96       	adiw	r28, 0x2a	; 42
    33c6:	3f af       	std	Y+63, r19	; 0x3f
    33c8:	2e af       	std	Y+62, r18	; 0x3e
    33ca:	aa 97       	sbiw	r28, 0x2a	; 42
	_delay_ms(500);
	pass[5]='#';
	//LCD_displayStringRowColumn(1,0,pass);
}

void create_password(char password[PASS_SIZE], char* state){
    33cc:	8d b7       	in	r24, 0x3d	; 61
    33ce:	9e b7       	in	r25, 0x3e	; 62
    33d0:	a6 96       	adiw	r28, 0x26	; 38
    33d2:	9f af       	std	Y+63, r25	; 0x3f
    33d4:	8e af       	std	Y+62, r24	; 0x3e
    33d6:	a6 97       	sbiw	r28, 0x26	; 38

	LCD_displayStringRowColumn(0,0,state);
    33d8:	fe 01       	movw	r30, r28
    33da:	ee 59       	subi	r30, 0x9E	; 158
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	20 81       	ld	r18, Z
    33e0:	31 81       	ldd	r19, Z+1	; 0x01
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	a9 01       	movw	r20, r18
    33e8:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
	read_password(password, state);
    33ec:	fe 01       	movw	r30, r28
    33ee:	e0 5a       	subi	r30, 0xA0	; 160
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	80 81       	ld	r24, Z
    33f4:	91 81       	ldd	r25, Z+1	; 0x01
    33f6:	fe 01       	movw	r30, r28
    33f8:	ee 59       	subi	r30, 0x9E	; 158
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	20 81       	ld	r18, Z
    33fe:	31 81       	ldd	r19, Z+1	; 0x01
    3400:	b9 01       	movw	r22, r18
    3402:	0e 94 94 17 	call	0x2f28	; 0x2f28 <read_password>
	//_delay_ms(500);
	//_delay_ms(500);

	for(int i=0; i<PASS_SIZE; i++){
    3406:	fe 01       	movw	r30, r28
    3408:	e7 5a       	subi	r30, 0xA7	; 167
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	11 82       	std	Z+1, r1	; 0x01
    340e:	10 82       	st	Z, r1
    3410:	cf c0       	rjmp	.+414    	; 0x35b0 <create_password+0x21e>
		UART_sendByte(password[i]);
    3412:	fe 01       	movw	r30, r28
    3414:	e7 5a       	subi	r30, 0xA7	; 167
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	20 81       	ld	r18, Z
    341a:	31 81       	ldd	r19, Z+1	; 0x01
    341c:	fe 01       	movw	r30, r28
    341e:	e0 5a       	subi	r30, 0xA0	; 160
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	80 81       	ld	r24, Z
    3424:	91 81       	ldd	r25, Z+1	; 0x01
    3426:	fc 01       	movw	r30, r24
    3428:	e2 0f       	add	r30, r18
    342a:	f3 1f       	adc	r31, r19
    342c:	80 81       	ld	r24, Z
    342e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
    3432:	fe 01       	movw	r30, r28
    3434:	ef 5a       	subi	r30, 0xAF	; 175
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	a8 ec       	ldi	r26, 0xC8	; 200
    343e:	b2 e4       	ldi	r27, 0x42	; 66
    3440:	80 83       	st	Z, r24
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	a2 83       	std	Z+2, r26	; 0x02
    3446:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3448:	8e 01       	movw	r16, r28
    344a:	03 5b       	subi	r16, 0xB3	; 179
    344c:	1f 4f       	sbci	r17, 0xFF	; 255
    344e:	fe 01       	movw	r30, r28
    3450:	ef 5a       	subi	r30, 0xAF	; 175
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	60 81       	ld	r22, Z
    3456:	71 81       	ldd	r23, Z+1	; 0x01
    3458:	82 81       	ldd	r24, Z+2	; 0x02
    345a:	93 81       	ldd	r25, Z+3	; 0x03
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	4a ef       	ldi	r20, 0xFA	; 250
    3462:	54 e4       	ldi	r21, 0x44	; 68
    3464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	f8 01       	movw	r30, r16
    346e:	80 83       	st	Z, r24
    3470:	91 83       	std	Z+1, r25	; 0x01
    3472:	a2 83       	std	Z+2, r26	; 0x02
    3474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3476:	fe 01       	movw	r30, r28
    3478:	e3 5b       	subi	r30, 0xB3	; 179
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	82 81       	ldd	r24, Z+2	; 0x02
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e8       	ldi	r20, 0x80	; 128
    348a:	5f e3       	ldi	r21, 0x3F	; 63
    348c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3490:	88 23       	and	r24, r24
    3492:	44 f4       	brge	.+16     	; 0x34a4 <create_password+0x112>
		__ticks = 1;
    3494:	fe 01       	movw	r30, r28
    3496:	e5 5b       	subi	r30, 0xB5	; 181
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
    34a2:	64 c0       	rjmp	.+200    	; 0x356c <create_password+0x1da>
	else if (__tmp > 65535)
    34a4:	fe 01       	movw	r30, r28
    34a6:	e3 5b       	subi	r30, 0xB3	; 179
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	60 81       	ld	r22, Z
    34ac:	71 81       	ldd	r23, Z+1	; 0x01
    34ae:	82 81       	ldd	r24, Z+2	; 0x02
    34b0:	93 81       	ldd	r25, Z+3	; 0x03
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	3f ef       	ldi	r19, 0xFF	; 255
    34b6:	4f e7       	ldi	r20, 0x7F	; 127
    34b8:	57 e4       	ldi	r21, 0x47	; 71
    34ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34be:	18 16       	cp	r1, r24
    34c0:	0c f0       	brlt	.+2      	; 0x34c4 <create_password+0x132>
    34c2:	43 c0       	rjmp	.+134    	; 0x354a <create_password+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c4:	fe 01       	movw	r30, r28
    34c6:	ef 5a       	subi	r30, 0xAF	; 175
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	60 81       	ld	r22, Z
    34cc:	71 81       	ldd	r23, Z+1	; 0x01
    34ce:	82 81       	ldd	r24, Z+2	; 0x02
    34d0:	93 81       	ldd	r25, Z+3	; 0x03
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e2       	ldi	r20, 0x20	; 32
    34d8:	51 e4       	ldi	r21, 0x41	; 65
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	8e 01       	movw	r16, r28
    34e4:	05 5b       	subi	r16, 0xB5	; 181
    34e6:	1f 4f       	sbci	r17, 0xFF	; 255
    34e8:	bc 01       	movw	r22, r24
    34ea:	cd 01       	movw	r24, r26
    34ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	f8 01       	movw	r30, r16
    34f6:	91 83       	std	Z+1, r25	; 0x01
    34f8:	80 83       	st	Z, r24
    34fa:	1f c0       	rjmp	.+62     	; 0x353a <create_password+0x1a8>
    34fc:	fe 01       	movw	r30, r28
    34fe:	e7 5b       	subi	r30, 0xB7	; 183
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	88 ec       	ldi	r24, 0xC8	; 200
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	91 83       	std	Z+1, r25	; 0x01
    3508:	80 83       	st	Z, r24
    350a:	fe 01       	movw	r30, r28
    350c:	e7 5b       	subi	r30, 0xB7	; 183
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <create_password+0x182>
    3518:	fe 01       	movw	r30, r28
    351a:	e7 5b       	subi	r30, 0xB7	; 183
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	91 83       	std	Z+1, r25	; 0x01
    3520:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3522:	de 01       	movw	r26, r28
    3524:	a5 5b       	subi	r26, 0xB5	; 181
    3526:	bf 4f       	sbci	r27, 0xFF	; 255
    3528:	fe 01       	movw	r30, r28
    352a:	e5 5b       	subi	r30, 0xB5	; 181
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	80 81       	ld	r24, Z
    3530:	91 81       	ldd	r25, Z+1	; 0x01
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	11 96       	adiw	r26, 0x01	; 1
    3536:	9c 93       	st	X, r25
    3538:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353a:	fe 01       	movw	r30, r28
    353c:	e5 5b       	subi	r30, 0xB5	; 181
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 81       	ld	r24, Z
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	d1 f6       	brne	.-76     	; 0x34fc <create_password+0x16a>
    3548:	27 c0       	rjmp	.+78     	; 0x3598 <create_password+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354a:	8e 01       	movw	r16, r28
    354c:	05 5b       	subi	r16, 0xB5	; 181
    354e:	1f 4f       	sbci	r17, 0xFF	; 255
    3550:	fe 01       	movw	r30, r28
    3552:	e3 5b       	subi	r30, 0xB3	; 179
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	60 81       	ld	r22, Z
    3558:	71 81       	ldd	r23, Z+1	; 0x01
    355a:	82 81       	ldd	r24, Z+2	; 0x02
    355c:	93 81       	ldd	r25, Z+3	; 0x03
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	f8 01       	movw	r30, r16
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	80 83       	st	Z, r24
    356c:	de 01       	movw	r26, r28
    356e:	a9 5b       	subi	r26, 0xB9	; 185
    3570:	bf 4f       	sbci	r27, 0xFF	; 255
    3572:	fe 01       	movw	r30, r28
    3574:	e5 5b       	subi	r30, 0xB5	; 181
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	80 81       	ld	r24, Z
    357a:	91 81       	ldd	r25, Z+1	; 0x01
    357c:	8d 93       	st	X+, r24
    357e:	9c 93       	st	X, r25
    3580:	fe 01       	movw	r30, r28
    3582:	e9 5b       	subi	r30, 0xB9	; 185
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	80 81       	ld	r24, Z
    3588:	91 81       	ldd	r25, Z+1	; 0x01
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <create_password+0x1f8>
    358e:	fe 01       	movw	r30, r28
    3590:	e9 5b       	subi	r30, 0xB9	; 185
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	91 83       	std	Z+1, r25	; 0x01
    3596:	80 83       	st	Z, r24
	LCD_displayStringRowColumn(0,0,state);
	read_password(password, state);
	//_delay_ms(500);
	//_delay_ms(500);

	for(int i=0; i<PASS_SIZE; i++){
    3598:	de 01       	movw	r26, r28
    359a:	a7 5a       	subi	r26, 0xA7	; 167
    359c:	bf 4f       	sbci	r27, 0xFF	; 255
    359e:	fe 01       	movw	r30, r28
    35a0:	e7 5a       	subi	r30, 0xA7	; 167
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 81       	ld	r24, Z
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	01 96       	adiw	r24, 0x01	; 1
    35aa:	11 96       	adiw	r26, 0x01	; 1
    35ac:	9c 93       	st	X, r25
    35ae:	8e 93       	st	-X, r24
    35b0:	80 91 f0 00 	lds	r24, 0x00F0
    35b4:	90 91 f1 00 	lds	r25, 0x00F1
    35b8:	fe 01       	movw	r30, r28
    35ba:	e7 5a       	subi	r30, 0xA7	; 167
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	20 81       	ld	r18, Z
    35c0:	31 81       	ldd	r19, Z+1	; 0x01
    35c2:	28 17       	cp	r18, r24
    35c4:	39 07       	cpc	r19, r25
    35c6:	0c f4       	brge	.+2      	; 0x35ca <create_password+0x238>
    35c8:	24 cf       	rjmp	.-440    	; 0x3412 <create_password+0x80>
		UART_sendByte(password[i]);
		_delay_ms(100);
	}

	char* confirm_password = "enter same pass:";
    35ca:	fe 01       	movw	r30, r28
    35cc:	e4 5a       	subi	r30, 0xA4	; 164
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	81 e7       	ldi	r24, 0x71	; 113
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
	char password2[PASS_SIZE];
    35d8:	80 91 f0 00 	lds	r24, 0x00F0
    35dc:	90 91 f1 00 	lds	r25, 0x00F1
    35e0:	2d b7       	in	r18, 0x3d	; 61
    35e2:	3e b7       	in	r19, 0x3e	; 62
    35e4:	28 1b       	sub	r18, r24
    35e6:	39 0b       	sbc	r19, r25
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	3e bf       	out	0x3e, r19	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	2d bf       	out	0x3d, r18	; 61
    35f2:	8d b7       	in	r24, 0x3d	; 61
    35f4:	9e b7       	in	r25, 0x3e	; 62
    35f6:	01 96       	adiw	r24, 0x01	; 1
    35f8:	a8 96       	adiw	r28, 0x28	; 40
    35fa:	9f af       	std	Y+63, r25	; 0x3f
    35fc:	8e af       	std	Y+62, r24	; 0x3e
    35fe:	a8 97       	sbiw	r28, 0x28	; 40
    3600:	a8 96       	adiw	r28, 0x28	; 40
    3602:	8e ad       	ldd	r24, Y+62	; 0x3e
    3604:	9f ad       	ldd	r25, Y+63	; 0x3f
    3606:	a8 97       	sbiw	r28, 0x28	; 40
    3608:	00 96       	adiw	r24, 0x00	; 0
    360a:	a8 96       	adiw	r28, 0x28	; 40
    360c:	9f af       	std	Y+63, r25	; 0x3f
    360e:	8e af       	std	Y+62, r24	; 0x3e
    3610:	a8 97       	sbiw	r28, 0x28	; 40
    3612:	fe 01       	movw	r30, r28
    3614:	e2 5a       	subi	r30, 0xA2	; 162
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	a8 96       	adiw	r28, 0x28	; 40
    361a:	2e ad       	ldd	r18, Y+62	; 0x3e
    361c:	3f ad       	ldd	r19, Y+63	; 0x3f
    361e:	a8 97       	sbiw	r28, 0x28	; 40
    3620:	31 83       	std	Z+1, r19	; 0x01
    3622:	20 83       	st	Z, r18
    3624:	fe 01       	movw	r30, r28
    3626:	ed 5b       	subi	r30, 0xBD	; 189
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	aa ef       	ldi	r26, 0xFA	; 250
    3630:	b3 e4       	ldi	r27, 0x43	; 67
    3632:	80 83       	st	Z, r24
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	a2 83       	std	Z+2, r26	; 0x02
    3638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363a:	8e 01       	movw	r16, r28
    363c:	01 5c       	subi	r16, 0xC1	; 193
    363e:	1f 4f       	sbci	r17, 0xFF	; 255
    3640:	fe 01       	movw	r30, r28
    3642:	ed 5b       	subi	r30, 0xBD	; 189
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	4a ef       	ldi	r20, 0xFA	; 250
    3654:	54 e4       	ldi	r21, 0x44	; 68
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	f8 01       	movw	r30, r16
    3660:	80 83       	st	Z, r24
    3662:	91 83       	std	Z+1, r25	; 0x01
    3664:	a2 83       	std	Z+2, r26	; 0x02
    3666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3668:	fe 01       	movw	r30, r28
    366a:	ff 96       	adiw	r30, 0x3f	; 63
    366c:	60 81       	ld	r22, Z
    366e:	71 81       	ldd	r23, Z+1	; 0x01
    3670:	82 81       	ldd	r24, Z+2	; 0x02
    3672:	93 81       	ldd	r25, Z+3	; 0x03
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	40 e8       	ldi	r20, 0x80	; 128
    367a:	5f e3       	ldi	r21, 0x3F	; 63
    367c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3680:	88 23       	and	r24, r24
    3682:	2c f4       	brge	.+10     	; 0x368e <create_password+0x2fc>
		__ticks = 1;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	9e af       	std	Y+62, r25	; 0x3e
    368a:	8d af       	std	Y+61, r24	; 0x3d
    368c:	46 c0       	rjmp	.+140    	; 0x371a <create_password+0x388>
	else if (__tmp > 65535)
    368e:	fe 01       	movw	r30, r28
    3690:	ff 96       	adiw	r30, 0x3f	; 63
    3692:	60 81       	ld	r22, Z
    3694:	71 81       	ldd	r23, Z+1	; 0x01
    3696:	82 81       	ldd	r24, Z+2	; 0x02
    3698:	93 81       	ldd	r25, Z+3	; 0x03
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	3f ef       	ldi	r19, 0xFF	; 255
    369e:	4f e7       	ldi	r20, 0x7F	; 127
    36a0:	57 e4       	ldi	r21, 0x47	; 71
    36a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36a6:	18 16       	cp	r1, r24
    36a8:	64 f5       	brge	.+88     	; 0x3702 <create_password+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36aa:	fe 01       	movw	r30, r28
    36ac:	ed 5b       	subi	r30, 0xBD	; 189
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 e2       	ldi	r20, 0x20	; 32
    36be:	51 e4       	ldi	r21, 0x41	; 65
    36c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	bc 01       	movw	r22, r24
    36ca:	cd 01       	movw	r24, r26
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	9e af       	std	Y+62, r25	; 0x3e
    36d6:	8d af       	std	Y+61, r24	; 0x3d
    36d8:	0f c0       	rjmp	.+30     	; 0x36f8 <create_password+0x366>
    36da:	88 ec       	ldi	r24, 0xC8	; 200
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	9c af       	std	Y+60, r25	; 0x3c
    36e0:	8b af       	std	Y+59, r24	; 0x3b
    36e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    36e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <create_password+0x354>
    36ea:	9c af       	std	Y+60, r25	; 0x3c
    36ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    36f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	9e af       	std	Y+62, r25	; 0x3e
    36f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    36fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	69 f7       	brne	.-38     	; 0x36da <create_password+0x348>
    3700:	16 c0       	rjmp	.+44     	; 0x372e <create_password+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3702:	fe 01       	movw	r30, r28
    3704:	ff 96       	adiw	r30, 0x3f	; 63
    3706:	60 81       	ld	r22, Z
    3708:	71 81       	ldd	r23, Z+1	; 0x01
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	9e af       	std	Y+62, r25	; 0x3e
    3718:	8d af       	std	Y+61, r24	; 0x3d
    371a:	8d ad       	ldd	r24, Y+61	; 0x3d
    371c:	9e ad       	ldd	r25, Y+62	; 0x3e
    371e:	9a af       	std	Y+58, r25	; 0x3a
    3720:	89 af       	std	Y+57, r24	; 0x39
    3722:	89 ad       	ldd	r24, Y+57	; 0x39
    3724:	9a ad       	ldd	r25, Y+58	; 0x3a
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	f1 f7       	brne	.-4      	; 0x3726 <create_password+0x394>
    372a:	9a af       	std	Y+58, r25	; 0x3a
    372c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(500);
	LCD_clearScreen();
    372e:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,confirm_password);
    3732:	fe 01       	movw	r30, r28
    3734:	e4 5a       	subi	r30, 0xA4	; 164
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	20 81       	ld	r18, Z
    373a:	31 81       	ldd	r19, Z+1	; 0x01
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	a9 01       	movw	r20, r18
    3742:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
	read_password(password2, confirm_password);
    3746:	fe 01       	movw	r30, r28
    3748:	e2 5a       	subi	r30, 0xA2	; 162
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	80 81       	ld	r24, Z
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	fe 01       	movw	r30, r28
    3752:	e4 5a       	subi	r30, 0xA4	; 164
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	20 81       	ld	r18, Z
    3758:	31 81       	ldd	r19, Z+1	; 0x01
    375a:	b9 01       	movw	r22, r18
    375c:	0e 94 94 17 	call	0x2f28	; 0x2f28 <read_password>
	password2[5]='#';
    3760:	fe 01       	movw	r30, r28
    3762:	e2 5a       	subi	r30, 0xA2	; 162
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	01 90       	ld	r0, Z+
    3768:	f0 81       	ld	r31, Z
    376a:	e0 2d       	mov	r30, r0
    376c:	83 e2       	ldi	r24, 0x23	; 35
    376e:	85 83       	std	Z+5, r24	; 0x05

	//UART_sendString((uint8*)password2);
	for(int i=0; i<PASS_SIZE; i++){
    3770:	fe 01       	movw	r30, r28
    3772:	e9 5a       	subi	r30, 0xA9	; 169
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	11 82       	std	Z+1, r1	; 0x01
    3778:	10 82       	st	Z, r1
    377a:	8e c0       	rjmp	.+284    	; 0x3898 <create_password+0x506>
		UART_sendByte(password2[i]);
    377c:	fe 01       	movw	r30, r28
    377e:	e9 5a       	subi	r30, 0xA9	; 169
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	20 81       	ld	r18, Z
    3784:	31 81       	ldd	r19, Z+1	; 0x01
    3786:	fe 01       	movw	r30, r28
    3788:	e2 5a       	subi	r30, 0xA2	; 162
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	fc 01       	movw	r30, r24
    3792:	e2 0f       	add	r30, r18
    3794:	f3 1f       	adc	r31, r19
    3796:	80 81       	ld	r24, Z
    3798:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	a8 ec       	ldi	r26, 0xC8	; 200
    37a2:	b2 e4       	ldi	r27, 0x42	; 66
    37a4:	8d ab       	std	Y+53, r24	; 0x35
    37a6:	9e ab       	std	Y+54, r25	; 0x36
    37a8:	af ab       	std	Y+55, r26	; 0x37
    37aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ac:	6d a9       	ldd	r22, Y+53	; 0x35
    37ae:	7e a9       	ldd	r23, Y+54	; 0x36
    37b0:	8f a9       	ldd	r24, Y+55	; 0x37
    37b2:	98 ad       	ldd	r25, Y+56	; 0x38
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	4a ef       	ldi	r20, 0xFA	; 250
    37ba:	54 e4       	ldi	r21, 0x44	; 68
    37bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	89 ab       	std	Y+49, r24	; 0x31
    37c6:	9a ab       	std	Y+50, r25	; 0x32
    37c8:	ab ab       	std	Y+51, r26	; 0x33
    37ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37cc:	69 a9       	ldd	r22, Y+49	; 0x31
    37ce:	7a a9       	ldd	r23, Y+50	; 0x32
    37d0:	8b a9       	ldd	r24, Y+51	; 0x33
    37d2:	9c a9       	ldd	r25, Y+52	; 0x34
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e8       	ldi	r20, 0x80	; 128
    37da:	5f e3       	ldi	r21, 0x3F	; 63
    37dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37e0:	88 23       	and	r24, r24
    37e2:	2c f4       	brge	.+10     	; 0x37ee <create_password+0x45c>
		__ticks = 1;
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	98 ab       	std	Y+48, r25	; 0x30
    37ea:	8f a7       	std	Y+47, r24	; 0x2f
    37ec:	3f c0       	rjmp	.+126    	; 0x386c <create_password+0x4da>
	else if (__tmp > 65535)
    37ee:	69 a9       	ldd	r22, Y+49	; 0x31
    37f0:	7a a9       	ldd	r23, Y+50	; 0x32
    37f2:	8b a9       	ldd	r24, Y+51	; 0x33
    37f4:	9c a9       	ldd	r25, Y+52	; 0x34
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	3f ef       	ldi	r19, 0xFF	; 255
    37fa:	4f e7       	ldi	r20, 0x7F	; 127
    37fc:	57 e4       	ldi	r21, 0x47	; 71
    37fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3802:	18 16       	cp	r1, r24
    3804:	4c f5       	brge	.+82     	; 0x3858 <create_password+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3806:	6d a9       	ldd	r22, Y+53	; 0x35
    3808:	7e a9       	ldd	r23, Y+54	; 0x36
    380a:	8f a9       	ldd	r24, Y+55	; 0x37
    380c:	98 ad       	ldd	r25, Y+56	; 0x38
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e2       	ldi	r20, 0x20	; 32
    3814:	51 e4       	ldi	r21, 0x41	; 65
    3816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	bc 01       	movw	r22, r24
    3820:	cd 01       	movw	r24, r26
    3822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	98 ab       	std	Y+48, r25	; 0x30
    382c:	8f a7       	std	Y+47, r24	; 0x2f
    382e:	0f c0       	rjmp	.+30     	; 0x384e <create_password+0x4bc>
    3830:	88 ec       	ldi	r24, 0xC8	; 200
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	9e a7       	std	Y+46, r25	; 0x2e
    3836:	8d a7       	std	Y+45, r24	; 0x2d
    3838:	8d a5       	ldd	r24, Y+45	; 0x2d
    383a:	9e a5       	ldd	r25, Y+46	; 0x2e
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	f1 f7       	brne	.-4      	; 0x383c <create_password+0x4aa>
    3840:	9e a7       	std	Y+46, r25	; 0x2e
    3842:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3844:	8f a5       	ldd	r24, Y+47	; 0x2f
    3846:	98 a9       	ldd	r25, Y+48	; 0x30
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	98 ab       	std	Y+48, r25	; 0x30
    384c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    384e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3850:	98 a9       	ldd	r25, Y+48	; 0x30
    3852:	00 97       	sbiw	r24, 0x00	; 0
    3854:	69 f7       	brne	.-38     	; 0x3830 <create_password+0x49e>
    3856:	14 c0       	rjmp	.+40     	; 0x3880 <create_password+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3858:	69 a9       	ldd	r22, Y+49	; 0x31
    385a:	7a a9       	ldd	r23, Y+50	; 0x32
    385c:	8b a9       	ldd	r24, Y+51	; 0x33
    385e:	9c a9       	ldd	r25, Y+52	; 0x34
    3860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	98 ab       	std	Y+48, r25	; 0x30
    386a:	8f a7       	std	Y+47, r24	; 0x2f
    386c:	8f a5       	ldd	r24, Y+47	; 0x2f
    386e:	98 a9       	ldd	r25, Y+48	; 0x30
    3870:	9c a7       	std	Y+44, r25	; 0x2c
    3872:	8b a7       	std	Y+43, r24	; 0x2b
    3874:	8b a5       	ldd	r24, Y+43	; 0x2b
    3876:	9c a5       	ldd	r25, Y+44	; 0x2c
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <create_password+0x4e6>
    387c:	9c a7       	std	Y+44, r25	; 0x2c
    387e:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_displayStringRowColumn(0,0,confirm_password);
	read_password(password2, confirm_password);
	password2[5]='#';

	//UART_sendString((uint8*)password2);
	for(int i=0; i<PASS_SIZE; i++){
    3880:	de 01       	movw	r26, r28
    3882:	a9 5a       	subi	r26, 0xA9	; 169
    3884:	bf 4f       	sbci	r27, 0xFF	; 255
    3886:	fe 01       	movw	r30, r28
    3888:	e9 5a       	subi	r30, 0xA9	; 169
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	80 81       	ld	r24, Z
    388e:	91 81       	ldd	r25, Z+1	; 0x01
    3890:	01 96       	adiw	r24, 0x01	; 1
    3892:	11 96       	adiw	r26, 0x01	; 1
    3894:	9c 93       	st	X, r25
    3896:	8e 93       	st	-X, r24
    3898:	80 91 f0 00 	lds	r24, 0x00F0
    389c:	90 91 f1 00 	lds	r25, 0x00F1
    38a0:	fe 01       	movw	r30, r28
    38a2:	e9 5a       	subi	r30, 0xA9	; 169
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	20 81       	ld	r18, Z
    38a8:	31 81       	ldd	r19, Z+1	; 0x01
    38aa:	28 17       	cp	r18, r24
    38ac:	39 07       	cpc	r19, r25
    38ae:	0c f4       	brge	.+2      	; 0x38b2 <create_password+0x520>
    38b0:	65 cf       	rjmp	.-310    	; 0x377c <create_password+0x3ea>
		UART_sendByte(password2[i]);
		_delay_ms(100);
	}

	uint8 valid;
	valid = UART_recieveByte();
    38b2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    38b6:	fe 01       	movw	r30, r28
    38b8:	e5 5a       	subi	r30, 0xA5	; 165
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 83       	st	Z, r24
    38be:	3a c1       	rjmp	.+628    	; 0x3b34 <create_password+0x7a2>
	while(valid == 0){
		LCD_clearScreen();
    38c0:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,confirm_password);
    38c4:	fe 01       	movw	r30, r28
    38c6:	e4 5a       	subi	r30, 0xA4	; 164
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	20 81       	ld	r18, Z
    38cc:	31 81       	ldd	r19, Z+1	; 0x01
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	60 e0       	ldi	r22, 0x00	; 0
    38d2:	a9 01       	movw	r20, r18
    38d4:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
		read_password(password2, confirm_password);
    38d8:	fe 01       	movw	r30, r28
    38da:	e2 5a       	subi	r30, 0xA2	; 162
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	80 81       	ld	r24, Z
    38e0:	91 81       	ldd	r25, Z+1	; 0x01
    38e2:	fe 01       	movw	r30, r28
    38e4:	e4 5a       	subi	r30, 0xA4	; 164
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	20 81       	ld	r18, Z
    38ea:	31 81       	ldd	r19, Z+1	; 0x01
    38ec:	b9 01       	movw	r22, r18
    38ee:	0e 94 94 17 	call	0x2f28	; 0x2f28 <read_password>
		password2[5]='#';
    38f2:	fe 01       	movw	r30, r28
    38f4:	e2 5a       	subi	r30, 0xA2	; 162
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	01 90       	ld	r0, Z+
    38fa:	f0 81       	ld	r31, Z
    38fc:	e0 2d       	mov	r30, r0
    38fe:	83 e2       	ldi	r24, 0x23	; 35
    3900:	85 83       	std	Z+5, r24	; 0x05
		//_delay_ms(100);
		//UART_sendString((uint8*)password2);
		for(int i=0; i<PASS_SIZE; i++){
    3902:	fe 01       	movw	r30, r28
    3904:	eb 5a       	subi	r30, 0xAB	; 171
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	11 82       	std	Z+1, r1	; 0x01
    390a:	10 82       	st	Z, r1
    390c:	8e c0       	rjmp	.+284    	; 0x3a2a <create_password+0x698>
			UART_sendByte(password2[i]);
    390e:	fe 01       	movw	r30, r28
    3910:	eb 5a       	subi	r30, 0xAB	; 171
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	20 81       	ld	r18, Z
    3916:	31 81       	ldd	r19, Z+1	; 0x01
    3918:	fe 01       	movw	r30, r28
    391a:	e2 5a       	subi	r30, 0xA2	; 162
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	80 81       	ld	r24, Z
    3920:	91 81       	ldd	r25, Z+1	; 0x01
    3922:	fc 01       	movw	r30, r24
    3924:	e2 0f       	add	r30, r18
    3926:	f3 1f       	adc	r31, r19
    3928:	80 81       	ld	r24, Z
    392a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	a8 ec       	ldi	r26, 0xC8	; 200
    3934:	b2 e4       	ldi	r27, 0x42	; 66
    3936:	8f a3       	std	Y+39, r24	; 0x27
    3938:	98 a7       	std	Y+40, r25	; 0x28
    393a:	a9 a7       	std	Y+41, r26	; 0x29
    393c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393e:	6f a1       	ldd	r22, Y+39	; 0x27
    3940:	78 a5       	ldd	r23, Y+40	; 0x28
    3942:	89 a5       	ldd	r24, Y+41	; 0x29
    3944:	9a a5       	ldd	r25, Y+42	; 0x2a
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	4a ef       	ldi	r20, 0xFA	; 250
    394c:	54 e4       	ldi	r21, 0x44	; 68
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	8b a3       	std	Y+35, r24	; 0x23
    3958:	9c a3       	std	Y+36, r25	; 0x24
    395a:	ad a3       	std	Y+37, r26	; 0x25
    395c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    395e:	6b a1       	ldd	r22, Y+35	; 0x23
    3960:	7c a1       	ldd	r23, Y+36	; 0x24
    3962:	8d a1       	ldd	r24, Y+37	; 0x25
    3964:	9e a1       	ldd	r25, Y+38	; 0x26
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	40 e8       	ldi	r20, 0x80	; 128
    396c:	5f e3       	ldi	r21, 0x3F	; 63
    396e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3972:	88 23       	and	r24, r24
    3974:	2c f4       	brge	.+10     	; 0x3980 <create_password+0x5ee>
		__ticks = 1;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	9a a3       	std	Y+34, r25	; 0x22
    397c:	89 a3       	std	Y+33, r24	; 0x21
    397e:	3f c0       	rjmp	.+126    	; 0x39fe <create_password+0x66c>
	else if (__tmp > 65535)
    3980:	6b a1       	ldd	r22, Y+35	; 0x23
    3982:	7c a1       	ldd	r23, Y+36	; 0x24
    3984:	8d a1       	ldd	r24, Y+37	; 0x25
    3986:	9e a1       	ldd	r25, Y+38	; 0x26
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	3f ef       	ldi	r19, 0xFF	; 255
    398c:	4f e7       	ldi	r20, 0x7F	; 127
    398e:	57 e4       	ldi	r21, 0x47	; 71
    3990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3994:	18 16       	cp	r1, r24
    3996:	4c f5       	brge	.+82     	; 0x39ea <create_password+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3998:	6f a1       	ldd	r22, Y+39	; 0x27
    399a:	78 a5       	ldd	r23, Y+40	; 0x28
    399c:	89 a5       	ldd	r24, Y+41	; 0x29
    399e:	9a a5       	ldd	r25, Y+42	; 0x2a
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	40 e2       	ldi	r20, 0x20	; 32
    39a6:	51 e4       	ldi	r21, 0x41	; 65
    39a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	bc 01       	movw	r22, r24
    39b2:	cd 01       	movw	r24, r26
    39b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	9a a3       	std	Y+34, r25	; 0x22
    39be:	89 a3       	std	Y+33, r24	; 0x21
    39c0:	0f c0       	rjmp	.+30     	; 0x39e0 <create_password+0x64e>
    39c2:	88 ec       	ldi	r24, 0xC8	; 200
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	98 a3       	std	Y+32, r25	; 0x20
    39c8:	8f 8f       	std	Y+31, r24	; 0x1f
    39ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39cc:	98 a1       	ldd	r25, Y+32	; 0x20
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <create_password+0x63c>
    39d2:	98 a3       	std	Y+32, r25	; 0x20
    39d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d6:	89 a1       	ldd	r24, Y+33	; 0x21
    39d8:	9a a1       	ldd	r25, Y+34	; 0x22
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	9a a3       	std	Y+34, r25	; 0x22
    39de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e0:	89 a1       	ldd	r24, Y+33	; 0x21
    39e2:	9a a1       	ldd	r25, Y+34	; 0x22
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	69 f7       	brne	.-38     	; 0x39c2 <create_password+0x630>
    39e8:	14 c0       	rjmp	.+40     	; 0x3a12 <create_password+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ea:	6b a1       	ldd	r22, Y+35	; 0x23
    39ec:	7c a1       	ldd	r23, Y+36	; 0x24
    39ee:	8d a1       	ldd	r24, Y+37	; 0x25
    39f0:	9e a1       	ldd	r25, Y+38	; 0x26
    39f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	9a a3       	std	Y+34, r25	; 0x22
    39fc:	89 a3       	std	Y+33, r24	; 0x21
    39fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3a00:	9a a1       	ldd	r25, Y+34	; 0x22
    3a02:	9e 8f       	std	Y+30, r25	; 0x1e
    3a04:	8d 8f       	std	Y+29, r24	; 0x1d
    3a06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <create_password+0x678>
    3a0e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a10:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayStringRowColumn(0,0,confirm_password);
		read_password(password2, confirm_password);
		password2[5]='#';
		//_delay_ms(100);
		//UART_sendString((uint8*)password2);
		for(int i=0; i<PASS_SIZE; i++){
    3a12:	de 01       	movw	r26, r28
    3a14:	ab 5a       	subi	r26, 0xAB	; 171
    3a16:	bf 4f       	sbci	r27, 0xFF	; 255
    3a18:	fe 01       	movw	r30, r28
    3a1a:	eb 5a       	subi	r30, 0xAB	; 171
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	80 81       	ld	r24, Z
    3a20:	91 81       	ldd	r25, Z+1	; 0x01
    3a22:	01 96       	adiw	r24, 0x01	; 1
    3a24:	11 96       	adiw	r26, 0x01	; 1
    3a26:	9c 93       	st	X, r25
    3a28:	8e 93       	st	-X, r24
    3a2a:	80 91 f0 00 	lds	r24, 0x00F0
    3a2e:	90 91 f1 00 	lds	r25, 0x00F1
    3a32:	fe 01       	movw	r30, r28
    3a34:	eb 5a       	subi	r30, 0xAB	; 171
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	20 81       	ld	r18, Z
    3a3a:	31 81       	ldd	r19, Z+1	; 0x01
    3a3c:	28 17       	cp	r18, r24
    3a3e:	39 07       	cpc	r19, r25
    3a40:	0c f4       	brge	.+2      	; 0x3a44 <create_password+0x6b2>
    3a42:	65 cf       	rjmp	.-310    	; 0x390e <create_password+0x57c>
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	a8 ec       	ldi	r26, 0xC8	; 200
    3a4a:	b2 e4       	ldi	r27, 0x42	; 66
    3a4c:	89 8f       	std	Y+25, r24	; 0x19
    3a4e:	9a 8f       	std	Y+26, r25	; 0x1a
    3a50:	ab 8f       	std	Y+27, r26	; 0x1b
    3a52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a54:	69 8d       	ldd	r22, Y+25	; 0x19
    3a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	4a ef       	ldi	r20, 0xFA	; 250
    3a62:	54 e4       	ldi	r21, 0x44	; 68
    3a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	8d 8b       	std	Y+21, r24	; 0x15
    3a6e:	9e 8b       	std	Y+22, r25	; 0x16
    3a70:	af 8b       	std	Y+23, r26	; 0x17
    3a72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a74:	6d 89       	ldd	r22, Y+21	; 0x15
    3a76:	7e 89       	ldd	r23, Y+22	; 0x16
    3a78:	8f 89       	ldd	r24, Y+23	; 0x17
    3a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e8       	ldi	r20, 0x80	; 128
    3a82:	5f e3       	ldi	r21, 0x3F	; 63
    3a84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a88:	88 23       	and	r24, r24
    3a8a:	2c f4       	brge	.+10     	; 0x3a96 <create_password+0x704>
		__ticks = 1;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	9c 8b       	std	Y+20, r25	; 0x14
    3a92:	8b 8b       	std	Y+19, r24	; 0x13
    3a94:	3f c0       	rjmp	.+126    	; 0x3b14 <create_password+0x782>
	else if (__tmp > 65535)
    3a96:	6d 89       	ldd	r22, Y+21	; 0x15
    3a98:	7e 89       	ldd	r23, Y+22	; 0x16
    3a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	3f ef       	ldi	r19, 0xFF	; 255
    3aa2:	4f e7       	ldi	r20, 0x7F	; 127
    3aa4:	57 e4       	ldi	r21, 0x47	; 71
    3aa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aaa:	18 16       	cp	r1, r24
    3aac:	4c f5       	brge	.+82     	; 0x3b00 <create_password+0x76e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aae:	69 8d       	ldd	r22, Y+25	; 0x19
    3ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	40 e2       	ldi	r20, 0x20	; 32
    3abc:	51 e4       	ldi	r21, 0x41	; 65
    3abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	cd 01       	movw	r24, r26
    3aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	9c 8b       	std	Y+20, r25	; 0x14
    3ad4:	8b 8b       	std	Y+19, r24	; 0x13
    3ad6:	0f c0       	rjmp	.+30     	; 0x3af6 <create_password+0x764>
    3ad8:	88 ec       	ldi	r24, 0xC8	; 200
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	9a 8b       	std	Y+18, r25	; 0x12
    3ade:	89 8b       	std	Y+17, r24	; 0x11
    3ae0:	89 89       	ldd	r24, Y+17	; 0x11
    3ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <create_password+0x752>
    3ae8:	9a 8b       	std	Y+18, r25	; 0x12
    3aea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aec:	8b 89       	ldd	r24, Y+19	; 0x13
    3aee:	9c 89       	ldd	r25, Y+20	; 0x14
    3af0:	01 97       	sbiw	r24, 0x01	; 1
    3af2:	9c 8b       	std	Y+20, r25	; 0x14
    3af4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af6:	8b 89       	ldd	r24, Y+19	; 0x13
    3af8:	9c 89       	ldd	r25, Y+20	; 0x14
    3afa:	00 97       	sbiw	r24, 0x00	; 0
    3afc:	69 f7       	brne	.-38     	; 0x3ad8 <create_password+0x746>
    3afe:	14 c0       	rjmp	.+40     	; 0x3b28 <create_password+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b00:	6d 89       	ldd	r22, Y+21	; 0x15
    3b02:	7e 89       	ldd	r23, Y+22	; 0x16
    3b04:	8f 89       	ldd	r24, Y+23	; 0x17
    3b06:	98 8d       	ldd	r25, Y+24	; 0x18
    3b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	9c 8b       	std	Y+20, r25	; 0x14
    3b12:	8b 8b       	std	Y+19, r24	; 0x13
    3b14:	8b 89       	ldd	r24, Y+19	; 0x13
    3b16:	9c 89       	ldd	r25, Y+20	; 0x14
    3b18:	98 8b       	std	Y+16, r25	; 0x10
    3b1a:	8f 87       	std	Y+15, r24	; 0x0f
    3b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b1e:	98 89       	ldd	r25, Y+16	; 0x10
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	f1 f7       	brne	.-4      	; 0x3b20 <create_password+0x78e>
    3b24:	98 8b       	std	Y+16, r25	; 0x10
    3b26:	8f 87       	std	Y+15, r24	; 0x0f
			UART_sendByte(password2[i]);
			_delay_ms(100);
		}
		_delay_ms(100);
		valid = UART_recieveByte();
    3b28:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e5 5a       	subi	r30, 0xA5	; 165
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	80 83       	st	Z, r24
		_delay_ms(100);
	}

	uint8 valid;
	valid = UART_recieveByte();
	while(valid == 0){
    3b34:	fe 01       	movw	r30, r28
    3b36:	e5 5a       	subi	r30, 0xA5	; 165
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 81       	ld	r24, Z
    3b3c:	88 23       	and	r24, r24
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <create_password+0x7b0>
    3b40:	bf ce       	rjmp	.-642    	; 0x38c0 <create_password+0x52e>
			_delay_ms(100);
		}
		_delay_ms(100);
		valid = UART_recieveByte();
	}
	Password_Set=1;
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	90 93 07 01 	sts	0x0107, r25
    3b4a:	80 93 06 01 	sts	0x0106, r24
	LCD_clearScreen();
    3b4e:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PASS SET");
    3b52:	22 e8       	ldi	r18, 0x82	; 130
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	60 e0       	ldi	r22, 0x00	; 0
    3b5a:	a9 01       	movw	r20, r18
    3b5c:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	aa ef       	ldi	r26, 0xFA	; 250
    3b66:	b3 e4       	ldi	r27, 0x43	; 67
    3b68:	8b 87       	std	Y+11, r24	; 0x0b
    3b6a:	9c 87       	std	Y+12, r25	; 0x0c
    3b6c:	ad 87       	std	Y+13, r26	; 0x0d
    3b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	4a ef       	ldi	r20, 0xFA	; 250
    3b7e:	54 e4       	ldi	r21, 0x44	; 68
    3b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	8f 83       	std	Y+7, r24	; 0x07
    3b8a:	98 87       	std	Y+8, r25	; 0x08
    3b8c:	a9 87       	std	Y+9, r26	; 0x09
    3b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b90:	6f 81       	ldd	r22, Y+7	; 0x07
    3b92:	78 85       	ldd	r23, Y+8	; 0x08
    3b94:	89 85       	ldd	r24, Y+9	; 0x09
    3b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e8       	ldi	r20, 0x80	; 128
    3b9e:	5f e3       	ldi	r21, 0x3F	; 63
    3ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ba4:	88 23       	and	r24, r24
    3ba6:	2c f4       	brge	.+10     	; 0x3bb2 <create_password+0x820>
		__ticks = 1;
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	9e 83       	std	Y+6, r25	; 0x06
    3bae:	8d 83       	std	Y+5, r24	; 0x05
    3bb0:	3f c0       	rjmp	.+126    	; 0x3c30 <create_password+0x89e>
	else if (__tmp > 65535)
    3bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb4:	78 85       	ldd	r23, Y+8	; 0x08
    3bb6:	89 85       	ldd	r24, Y+9	; 0x09
    3bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	3f ef       	ldi	r19, 0xFF	; 255
    3bbe:	4f e7       	ldi	r20, 0x7F	; 127
    3bc0:	57 e4       	ldi	r21, 0x47	; 71
    3bc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bc6:	18 16       	cp	r1, r24
    3bc8:	4c f5       	brge	.+82     	; 0x3c1c <create_password+0x88a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	40 e2       	ldi	r20, 0x20	; 32
    3bd8:	51 e4       	ldi	r21, 0x41	; 65
    3bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	bc 01       	movw	r22, r24
    3be4:	cd 01       	movw	r24, r26
    3be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	9e 83       	std	Y+6, r25	; 0x06
    3bf0:	8d 83       	std	Y+5, r24	; 0x05
    3bf2:	0f c0       	rjmp	.+30     	; 0x3c12 <create_password+0x880>
    3bf4:	88 ec       	ldi	r24, 0xC8	; 200
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	9c 83       	std	Y+4, r25	; 0x04
    3bfa:	8b 83       	std	Y+3, r24	; 0x03
    3bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <create_password+0x86e>
    3c04:	9c 83       	std	Y+4, r25	; 0x04
    3c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c08:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c0c:	01 97       	sbiw	r24, 0x01	; 1
    3c0e:	9e 83       	std	Y+6, r25	; 0x06
    3c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c12:	8d 81       	ldd	r24, Y+5	; 0x05
    3c14:	9e 81       	ldd	r25, Y+6	; 0x06
    3c16:	00 97       	sbiw	r24, 0x00	; 0
    3c18:	69 f7       	brne	.-38     	; 0x3bf4 <create_password+0x862>
    3c1a:	14 c0       	rjmp	.+40     	; 0x3c44 <create_password+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1e:	78 85       	ldd	r23, Y+8	; 0x08
    3c20:	89 85       	ldd	r24, Y+9	; 0x09
    3c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	9e 83       	std	Y+6, r25	; 0x06
    3c2e:	8d 83       	std	Y+5, r24	; 0x05
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	9e 81       	ldd	r25, Y+6	; 0x06
    3c34:	9a 83       	std	Y+2, r25	; 0x02
    3c36:	89 83       	std	Y+1, r24	; 0x01
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	f1 f7       	brne	.-4      	; 0x3c3c <create_password+0x8aa>
    3c40:	9a 83       	std	Y+2, r25	; 0x02
    3c42:	89 83       	std	Y+1, r24	; 0x01
    3c44:	a6 96       	adiw	r28, 0x26	; 38
    3c46:	2e ad       	ldd	r18, Y+62	; 0x3e
    3c48:	3f ad       	ldd	r19, Y+63	; 0x3f
    3c4a:	a6 97       	sbiw	r28, 0x26	; 38
    3c4c:	0f b6       	in	r0, 0x3f	; 63
    3c4e:	f8 94       	cli
    3c50:	3e bf       	out	0x3e, r19	; 62
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	2d bf       	out	0x3d, r18	; 61
	_delay_ms(500);

	return;
}
    3c56:	aa 96       	adiw	r28, 0x2a	; 42
    3c58:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c5c:	aa 97       	sbiw	r28, 0x2a	; 42
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	9e bf       	out	0x3e, r25	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	8d bf       	out	0x3d, r24	; 61
    3c68:	c7 59       	subi	r28, 0x97	; 151
    3c6a:	df 4f       	sbci	r29, 0xFF	; 255
    3c6c:	0f b6       	in	r0, 0x3f	; 63
    3c6e:	f8 94       	cli
    3c70:	de bf       	out	0x3e, r29	; 62
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	1f 91       	pop	r17
    3c7c:	0f 91       	pop	r16
    3c7e:	08 95       	ret

00003c80 <display_main_screen>:


void display_main_screen(){
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    3c88:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0, "+ : Open Door");
    3c8c:	2b e8       	ldi	r18, 0x8B	; 139
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	60 e0       	ldi	r22, 0x00	; 0
    3c94:	a9 01       	movw	r20, r18
    3c96:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0, "- : Change Pass");
    3c9a:	29 e9       	ldi	r18, 0x99	; 153
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	a9 01       	movw	r20, r18
    3ca4:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
}
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <verify_user>:
//void save_password(char pass[7]){
//	Password = pass;
//}

//send password to another control
uint8 verify_user(){
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
    3cb6:	ac 97       	sbiw	r28, 0x2c	; 44
    3cb8:	0f b6       	in	r0, 0x3f	; 63
    3cba:	f8 94       	cli
    3cbc:	de bf       	out	0x3e, r29	; 62
    3cbe:	0f be       	out	0x3f, r0	; 63
    3cc0:	cd bf       	out	0x3d, r28	; 61
			counter++;
		}
	}

	return state;
}
    3cc2:	2d b7       	in	r18, 0x3d	; 61
    3cc4:	3e b7       	in	r19, 0x3e	; 62
    3cc6:	3c a7       	std	Y+44, r19	; 0x2c
    3cc8:	2b a7       	std	Y+43, r18	; 0x2b
//void save_password(char pass[7]){
//	Password = pass;
//}

//send password to another control
uint8 verify_user(){
    3cca:	8d b7       	in	r24, 0x3d	; 61
    3ccc:	9e b7       	in	r25, 0x3e	; 62
    3cce:	9f a3       	std	Y+39, r25	; 0x27
    3cd0:	8e a3       	std	Y+38, r24	; 0x26
	char password [PASS_SIZE];
    3cd2:	80 91 f0 00 	lds	r24, 0x00F0
    3cd6:	90 91 f1 00 	lds	r25, 0x00F1
    3cda:	2d b7       	in	r18, 0x3d	; 61
    3cdc:	3e b7       	in	r19, 0x3e	; 62
    3cde:	28 1b       	sub	r18, r24
    3ce0:	39 0b       	sbc	r19, r25
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	3e bf       	out	0x3e, r19	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	2d bf       	out	0x3d, r18	; 61
    3cec:	8d b7       	in	r24, 0x3d	; 61
    3cee:	9e b7       	in	r25, 0x3e	; 62
    3cf0:	01 96       	adiw	r24, 0x01	; 1
    3cf2:	9a a7       	std	Y+42, r25	; 0x2a
    3cf4:	89 a7       	std	Y+41, r24	; 0x29
    3cf6:	89 a5       	ldd	r24, Y+41	; 0x29
    3cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cfa:	00 96       	adiw	r24, 0x00	; 0
    3cfc:	9a a7       	std	Y+42, r25	; 0x2a
    3cfe:	89 a7       	std	Y+41, r24	; 0x29
    3d00:	29 a5       	ldd	r18, Y+41	; 0x29
    3d02:	3a a5       	ldd	r19, Y+42	; 0x2a
    3d04:	3d a3       	std	Y+37, r19	; 0x25
    3d06:	2c a3       	std	Y+36, r18	; 0x24
	LCD_clearScreen();
    3d08:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
	read_password(password, ask_for_password);
    3d0c:	8c a1       	ldd	r24, Y+36	; 0x24
    3d0e:	9d a1       	ldd	r25, Y+37	; 0x25
    3d10:	20 91 f2 00 	lds	r18, 0x00F2
    3d14:	30 91 f3 00 	lds	r19, 0x00F3
    3d18:	b9 01       	movw	r22, r18
    3d1a:	0e 94 94 17 	call	0x2f28	; 0x2f28 <read_password>

	//UART_sendString((uint8*)password);
	for(int i=0; i<PASS_SIZE; i++){
    3d1e:	1a a2       	std	Y+34, r1	; 0x22
    3d20:	19 a2       	std	Y+33, r1	; 0x21
    3d22:	81 c0       	rjmp	.+258    	; 0x3e26 <verify_user+0x178>
		UART_sendByte(password[i]);
    3d24:	29 a1       	ldd	r18, Y+33	; 0x21
    3d26:	3a a1       	ldd	r19, Y+34	; 0x22
    3d28:	8c a1       	ldd	r24, Y+36	; 0x24
    3d2a:	9d a1       	ldd	r25, Y+37	; 0x25
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	e2 0f       	add	r30, r18
    3d30:	f3 1f       	adc	r31, r19
    3d32:	80 81       	ld	r24, Z
    3d34:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	a8 ec       	ldi	r26, 0xC8	; 200
    3d3e:	b2 e4       	ldi	r27, 0x42	; 66
    3d40:	89 8f       	std	Y+25, r24	; 0x19
    3d42:	9a 8f       	std	Y+26, r25	; 0x1a
    3d44:	ab 8f       	std	Y+27, r26	; 0x1b
    3d46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d48:	69 8d       	ldd	r22, Y+25	; 0x19
    3d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	4a ef       	ldi	r20, 0xFA	; 250
    3d56:	54 e4       	ldi	r21, 0x44	; 68
    3d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	8d 8b       	std	Y+21, r24	; 0x15
    3d62:	9e 8b       	std	Y+22, r25	; 0x16
    3d64:	af 8b       	std	Y+23, r26	; 0x17
    3d66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d68:	6d 89       	ldd	r22, Y+21	; 0x15
    3d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	40 e8       	ldi	r20, 0x80	; 128
    3d76:	5f e3       	ldi	r21, 0x3F	; 63
    3d78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d7c:	88 23       	and	r24, r24
    3d7e:	2c f4       	brge	.+10     	; 0x3d8a <verify_user+0xdc>
		__ticks = 1;
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	9c 8b       	std	Y+20, r25	; 0x14
    3d86:	8b 8b       	std	Y+19, r24	; 0x13
    3d88:	3f c0       	rjmp	.+126    	; 0x3e08 <verify_user+0x15a>
	else if (__tmp > 65535)
    3d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d90:	98 8d       	ldd	r25, Y+24	; 0x18
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	3f ef       	ldi	r19, 0xFF	; 255
    3d96:	4f e7       	ldi	r20, 0x7F	; 127
    3d98:	57 e4       	ldi	r21, 0x47	; 71
    3d9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d9e:	18 16       	cp	r1, r24
    3da0:	4c f5       	brge	.+82     	; 0x3df4 <verify_user+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da2:	69 8d       	ldd	r22, Y+25	; 0x19
    3da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	40 e2       	ldi	r20, 0x20	; 32
    3db0:	51 e4       	ldi	r21, 0x41	; 65
    3db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	bc 01       	movw	r22, r24
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	9c 8b       	std	Y+20, r25	; 0x14
    3dc8:	8b 8b       	std	Y+19, r24	; 0x13
    3dca:	0f c0       	rjmp	.+30     	; 0x3dea <verify_user+0x13c>
    3dcc:	88 ec       	ldi	r24, 0xC8	; 200
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	9a 8b       	std	Y+18, r25	; 0x12
    3dd2:	89 8b       	std	Y+17, r24	; 0x11
    3dd4:	89 89       	ldd	r24, Y+17	; 0x11
    3dd6:	9a 89       	ldd	r25, Y+18	; 0x12
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <verify_user+0x12a>
    3ddc:	9a 8b       	std	Y+18, r25	; 0x12
    3dde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de0:	8b 89       	ldd	r24, Y+19	; 0x13
    3de2:	9c 89       	ldd	r25, Y+20	; 0x14
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	9c 8b       	std	Y+20, r25	; 0x14
    3de8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dea:	8b 89       	ldd	r24, Y+19	; 0x13
    3dec:	9c 89       	ldd	r25, Y+20	; 0x14
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	69 f7       	brne	.-38     	; 0x3dcc <verify_user+0x11e>
    3df2:	14 c0       	rjmp	.+40     	; 0x3e1c <verify_user+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df4:	6d 89       	ldd	r22, Y+21	; 0x15
    3df6:	7e 89       	ldd	r23, Y+22	; 0x16
    3df8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    3dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	9c 8b       	std	Y+20, r25	; 0x14
    3e06:	8b 8b       	std	Y+19, r24	; 0x13
    3e08:	8b 89       	ldd	r24, Y+19	; 0x13
    3e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e0c:	98 8b       	std	Y+16, r25	; 0x10
    3e0e:	8f 87       	std	Y+15, r24	; 0x0f
    3e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e12:	98 89       	ldd	r25, Y+16	; 0x10
    3e14:	01 97       	sbiw	r24, 0x01	; 1
    3e16:	f1 f7       	brne	.-4      	; 0x3e14 <verify_user+0x166>
    3e18:	98 8b       	std	Y+16, r25	; 0x10
    3e1a:	8f 87       	std	Y+15, r24	; 0x0f
	char password [PASS_SIZE];
	LCD_clearScreen();
	read_password(password, ask_for_password);

	//UART_sendString((uint8*)password);
	for(int i=0; i<PASS_SIZE; i++){
    3e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e20:	01 96       	adiw	r24, 0x01	; 1
    3e22:	9a a3       	std	Y+34, r25	; 0x22
    3e24:	89 a3       	std	Y+33, r24	; 0x21
    3e26:	20 91 f0 00 	lds	r18, 0x00F0
    3e2a:	30 91 f1 00 	lds	r19, 0x00F1
    3e2e:	89 a1       	ldd	r24, Y+33	; 0x21
    3e30:	9a a1       	ldd	r25, Y+34	; 0x22
    3e32:	82 17       	cp	r24, r18
    3e34:	93 07       	cpc	r25, r19
    3e36:	0c f4       	brge	.+2      	; 0x3e3a <verify_user+0x18c>
    3e38:	75 cf       	rjmp	.-278    	; 0x3d24 <verify_user+0x76>
		UART_sendByte(password[i]);
		_delay_ms(100);
	}
	uint8 state = UART_recieveByte();
    3e3a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    3e3e:	8b a3       	std	Y+35, r24	; 0x23
	if(state==1)
    3e40:	8b a1       	ldd	r24, Y+35	; 0x23
    3e42:	81 30       	cpi	r24, 0x01	; 1
    3e44:	19 f4       	brne	.+6      	; 0x3e4c <verify_user+0x19e>
		return state;
    3e46:	3b a1       	ldd	r19, Y+35	; 0x23
    3e48:	38 a7       	std	Y+40, r19	; 0x28
    3e4a:	b2 c0       	rjmp	.+356    	; 0x3fb0 <verify_user+0x302>
	else{
		int counter=0;
    3e4c:	18 a2       	std	Y+32, r1	; 0x20
    3e4e:	1f 8e       	std	Y+31, r1	; 0x1f
    3e50:	a4 c0       	rjmp	.+328    	; 0x3f9a <verify_user+0x2ec>
		while(state == 0 && counter<2){
			//_delay_ms(100);
			LCD_clearScreen();
    3e52:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
			read_password(password, ask_for_password);
    3e56:	8c a1       	ldd	r24, Y+36	; 0x24
    3e58:	9d a1       	ldd	r25, Y+37	; 0x25
    3e5a:	20 91 f2 00 	lds	r18, 0x00F2
    3e5e:	30 91 f3 00 	lds	r19, 0x00F3
    3e62:	b9 01       	movw	r22, r18
    3e64:	0e 94 94 17 	call	0x2f28	; 0x2f28 <read_password>
			UART_sendByte(VALIDATE_PASSWORD);
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
			for(int i=0; i<PASS_SIZE; i++){
    3e6e:	1e 8e       	std	Y+30, r1	; 0x1e
    3e70:	1d 8e       	std	Y+29, r1	; 0x1d
    3e72:	81 c0       	rjmp	.+258    	; 0x3f76 <verify_user+0x2c8>
				UART_sendByte(password[i]);
    3e74:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3e76:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3e78:	8c a1       	ldd	r24, Y+36	; 0x24
    3e7a:	9d a1       	ldd	r25, Y+37	; 0x25
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	e2 0f       	add	r30, r18
    3e80:	f3 1f       	adc	r31, r19
    3e82:	80 81       	ld	r24, Z
    3e84:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	a8 ec       	ldi	r26, 0xC8	; 200
    3e8e:	b2 e4       	ldi	r27, 0x42	; 66
    3e90:	8b 87       	std	Y+11, r24	; 0x0b
    3e92:	9c 87       	std	Y+12, r25	; 0x0c
    3e94:	ad 87       	std	Y+13, r26	; 0x0d
    3e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	4a ef       	ldi	r20, 0xFA	; 250
    3ea6:	54 e4       	ldi	r21, 0x44	; 68
    3ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	8f 83       	std	Y+7, r24	; 0x07
    3eb2:	98 87       	std	Y+8, r25	; 0x08
    3eb4:	a9 87       	std	Y+9, r26	; 0x09
    3eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eba:	78 85       	ldd	r23, Y+8	; 0x08
    3ebc:	89 85       	ldd	r24, Y+9	; 0x09
    3ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e8       	ldi	r20, 0x80	; 128
    3ec6:	5f e3       	ldi	r21, 0x3F	; 63
    3ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ecc:	88 23       	and	r24, r24
    3ece:	2c f4       	brge	.+10     	; 0x3eda <verify_user+0x22c>
		__ticks = 1;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	9e 83       	std	Y+6, r25	; 0x06
    3ed6:	8d 83       	std	Y+5, r24	; 0x05
    3ed8:	3f c0       	rjmp	.+126    	; 0x3f58 <verify_user+0x2aa>
	else if (__tmp > 65535)
    3eda:	6f 81       	ldd	r22, Y+7	; 0x07
    3edc:	78 85       	ldd	r23, Y+8	; 0x08
    3ede:	89 85       	ldd	r24, Y+9	; 0x09
    3ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	3f ef       	ldi	r19, 0xFF	; 255
    3ee6:	4f e7       	ldi	r20, 0x7F	; 127
    3ee8:	57 e4       	ldi	r21, 0x47	; 71
    3eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eee:	18 16       	cp	r1, r24
    3ef0:	4c f5       	brge	.+82     	; 0x3f44 <verify_user+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 e2       	ldi	r20, 0x20	; 32
    3f00:	51 e4       	ldi	r21, 0x41	; 65
    3f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	cd 01       	movw	r24, r26
    3f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	9e 83       	std	Y+6, r25	; 0x06
    3f18:	8d 83       	std	Y+5, r24	; 0x05
    3f1a:	0f c0       	rjmp	.+30     	; 0x3f3a <verify_user+0x28c>
    3f1c:	88 ec       	ldi	r24, 0xC8	; 200
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	9c 83       	std	Y+4, r25	; 0x04
    3f22:	8b 83       	std	Y+3, r24	; 0x03
    3f24:	8b 81       	ldd	r24, Y+3	; 0x03
    3f26:	9c 81       	ldd	r25, Y+4	; 0x04
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	f1 f7       	brne	.-4      	; 0x3f28 <verify_user+0x27a>
    3f2c:	9c 83       	std	Y+4, r25	; 0x04
    3f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f30:	8d 81       	ldd	r24, Y+5	; 0x05
    3f32:	9e 81       	ldd	r25, Y+6	; 0x06
    3f34:	01 97       	sbiw	r24, 0x01	; 1
    3f36:	9e 83       	std	Y+6, r25	; 0x06
    3f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	69 f7       	brne	.-38     	; 0x3f1c <verify_user+0x26e>
    3f42:	14 c0       	rjmp	.+40     	; 0x3f6c <verify_user+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f44:	6f 81       	ldd	r22, Y+7	; 0x07
    3f46:	78 85       	ldd	r23, Y+8	; 0x08
    3f48:	89 85       	ldd	r24, Y+9	; 0x09
    3f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	9e 83       	std	Y+6, r25	; 0x06
    3f56:	8d 83       	std	Y+5, r24	; 0x05
    3f58:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5c:	9a 83       	std	Y+2, r25	; 0x02
    3f5e:	89 83       	std	Y+1, r24	; 0x01
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	9a 81       	ldd	r25, Y+2	; 0x02
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	f1 f7       	brne	.-4      	; 0x3f64 <verify_user+0x2b6>
    3f68:	9a 83       	std	Y+2, r25	; 0x02
    3f6a:	89 83       	std	Y+1, r24	; 0x01
		while(state == 0 && counter<2){
			//_delay_ms(100);
			LCD_clearScreen();
			read_password(password, ask_for_password);
			UART_sendByte(VALIDATE_PASSWORD);
			for(int i=0; i<PASS_SIZE; i++){
    3f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f70:	01 96       	adiw	r24, 0x01	; 1
    3f72:	9e 8f       	std	Y+30, r25	; 0x1e
    3f74:	8d 8f       	std	Y+29, r24	; 0x1d
    3f76:	20 91 f0 00 	lds	r18, 0x00F0
    3f7a:	30 91 f1 00 	lds	r19, 0x00F1
    3f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f82:	82 17       	cp	r24, r18
    3f84:	93 07       	cpc	r25, r19
    3f86:	0c f4       	brge	.+2      	; 0x3f8a <verify_user+0x2dc>
    3f88:	75 cf       	rjmp	.-278    	; 0x3e74 <verify_user+0x1c6>
				UART_sendByte(password[i]);
				_delay_ms(100);
			}
			state = UART_recieveByte();
    3f8a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    3f8e:	8b a3       	std	Y+35, r24	; 0x23
			counter++;
    3f90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f92:	98 a1       	ldd	r25, Y+32	; 0x20
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	98 a3       	std	Y+32, r25	; 0x20
    3f98:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 state = UART_recieveByte();
	if(state==1)
		return state;
	else{
		int counter=0;
		while(state == 0 && counter<2){
    3f9a:	8b a1       	ldd	r24, Y+35	; 0x23
    3f9c:	88 23       	and	r24, r24
    3f9e:	31 f4       	brne	.+12     	; 0x3fac <verify_user+0x2fe>
    3fa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fa2:	98 a1       	ldd	r25, Y+32	; 0x20
    3fa4:	82 30       	cpi	r24, 0x02	; 2
    3fa6:	91 05       	cpc	r25, r1
    3fa8:	0c f4       	brge	.+2      	; 0x3fac <verify_user+0x2fe>
    3faa:	53 cf       	rjmp	.-346    	; 0x3e52 <verify_user+0x1a4>
			state = UART_recieveByte();
			counter++;
		}
	}

	return state;
    3fac:	8b a1       	ldd	r24, Y+35	; 0x23
    3fae:	88 a7       	std	Y+40, r24	; 0x28
    3fb0:	2e a1       	ldd	r18, Y+38	; 0x26
    3fb2:	3f a1       	ldd	r19, Y+39	; 0x27
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	3e bf       	out	0x3e, r19	; 62
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	2d bf       	out	0x3d, r18	; 61
    3fbe:	88 a5       	ldd	r24, Y+40	; 0x28
}
    3fc0:	2b a5       	ldd	r18, Y+43	; 0x2b
    3fc2:	3c a5       	ldd	r19, Y+44	; 0x2c
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	f8 94       	cli
    3fc8:	3e bf       	out	0x3e, r19	; 62
    3fca:	0f be       	out	0x3f, r0	; 63
    3fcc:	2d bf       	out	0x3d, r18	; 61
    3fce:	ac 96       	adiw	r28, 0x2c	; 44
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	f8 94       	cli
    3fd4:	de bf       	out	0x3e, r29	; 62
    3fd6:	0f be       	out	0x3f, r0	; 63
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	cf 91       	pop	r28
    3fdc:	df 91       	pop	r29
    3fde:	08 95       	ret

00003fe0 <countOneSecond>:


void countOneSecond()
{
    3fe0:	df 93       	push	r29
    3fe2:	cf 93       	push	r28
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
	/* the call back function to count 1 second */
	g_ticks++;
    3fe8:	80 91 04 01 	lds	r24, 0x0104
    3fec:	90 91 05 01 	lds	r25, 0x0105
    3ff0:	01 96       	adiw	r24, 0x01	; 1
    3ff2:	90 93 05 01 	sts	0x0105, r25
    3ff6:	80 93 04 01 	sts	0x0104, r24
}
    3ffa:	cf 91       	pop	r28
    3ffc:	df 91       	pop	r29
    3ffe:	08 95       	ret

00004000 <countSeconds>:

void countSeconds(uint8 seconds){
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	0f 92       	push	r0
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	89 83       	std	Y+1, r24	; 0x01
	// start counting seconds
	//Timer1_ConfigType Timer1_Config = {0,31249,PRESCALER_256,COMPARE_MODE};
	Timer1_setCallBackFunction(countOneSecond);
    400c:	80 ef       	ldi	r24, 0xF0	; 240
    400e:	9f e1       	ldi	r25, 0x1F	; 31
    4010:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <Timer1_setCallBackFunction>
	Timer1_init(&timer_configurations);
    4014:	84 ef       	ldi	r24, 0xF4	; 244
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 cf 14 	call	0x299e	; 0x299e <Timer1_init>

	g_ticks = 0;
    401c:	10 92 05 01 	sts	0x0105, r1
    4020:	10 92 04 01 	sts	0x0104, r1
	while (g_ticks < seconds) {
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	28 2f       	mov	r18, r24
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	80 91 04 01 	lds	r24, 0x0104
    402e:	90 91 05 01 	lds	r25, 0x0105
    4032:	82 17       	cp	r24, r18
    4034:	93 07       	cpc	r25, r19
    4036:	b4 f3       	brlt	.-20     	; 0x4024 <countSeconds+0x24>
	}

	Timer1_deInit();
    4038:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <Timer1_deInit>
	g_ticks=0;
    403c:	10 92 05 01 	sts	0x0105, r1
    4040:	10 92 04 01 	sts	0x0104, r1
}
    4044:	0f 90       	pop	r0
    4046:	cf 91       	pop	r28
    4048:	df 91       	pop	r29
    404a:	08 95       	ret

0000404c <openCloseDoor>:

void openCloseDoor(){
    404c:	df 93       	push	r29
    404e:	cf 93       	push	r28
    4050:	cd b7       	in	r28, 0x3d	; 61
    4052:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    4054:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door opening");
    4058:	29 ea       	ldi	r18, 0xA9	; 169
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	a9 01       	movw	r20, r18
    4062:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
	// start counting 15 seconds
	countSeconds(15);
    4066:	8f e0       	ldi	r24, 0x0F	; 15
    4068:	0e 94 00 20 	call	0x4000	; 0x4000 <countSeconds>

	LCD_clearScreen();
    406c:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"HOLD");
    4070:	26 eb       	ldi	r18, 0xB6	; 182
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	60 e0       	ldi	r22, 0x00	; 0
    4078:	a9 01       	movw	r20, r18
    407a:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
	countSeconds(3);
    407e:	83 e0       	ldi	r24, 0x03	; 3
    4080:	0e 94 00 20 	call	0x4000	; 0x4000 <countSeconds>
	LCD_clearScreen();
    4084:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>

	LCD_clearScreen();
    4088:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door closing");
    408c:	2b eb       	ldi	r18, 0xBB	; 187
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	80 e0       	ldi	r24, 0x00	; 0
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	a9 01       	movw	r20, r18
    4096:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
	countSeconds(15);
    409a:	8f e0       	ldi	r24, 0x0F	; 15
    409c:	0e 94 00 20 	call	0x4000	; 0x4000 <countSeconds>
	LCD_clearScreen();
    40a0:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
}
    40a4:	cf 91       	pop	r28
    40a6:	df 91       	pop	r29
    40a8:	08 95       	ret

000040aa <displayError>:

void displayError(){
    40aa:	df 93       	push	r29
    40ac:	cf 93       	push	r28
    40ae:	cd b7       	in	r28, 0x3d	; 61
    40b0:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    40b2:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"LOCKED");
    40b6:	28 ec       	ldi	r18, 0xC8	; 200
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	a9 01       	movw	r20, r18
    40c0:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
	countSeconds(60);
    40c4:	8c e3       	ldi	r24, 0x3C	; 60
    40c6:	0e 94 00 20 	call	0x4000	; 0x4000 <countSeconds>
	LCD_clearScreen();
    40ca:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
}
    40ce:	cf 91       	pop	r28
    40d0:	df 91       	pop	r29
    40d2:	08 95       	ret

000040d4 <main>:
int main(void){
    40d4:	df 93       	push	r29
    40d6:	cf 93       	push	r28
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
    40dc:	ab 97       	sbiw	r28, 0x2b	; 43
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    40e8:	af e5       	ldi	r26, 0x5F	; 95
    40ea:	b0 e0       	ldi	r27, 0x00	; 0
    40ec:	ef e5       	ldi	r30, 0x5F	; 95
    40ee:	f0 e0       	ldi	r31, 0x00	; 0
    40f0:	80 81       	ld	r24, Z
    40f2:	80 68       	ori	r24, 0x80	; 128
    40f4:	8c 93       	st	X, r24

	UART_ConfigType UART_config = {EIGHT, DISABLED, ONE, BAUD_RATE_9600  };
    40f6:	ce 01       	movw	r24, r28
    40f8:	42 96       	adiw	r24, 0x12	; 18
    40fa:	98 a7       	std	Y+40, r25	; 0x28
    40fc:	8f a3       	std	Y+39, r24	; 0x27
    40fe:	ea ef       	ldi	r30, 0xFA	; 250
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	fa a7       	std	Y+42, r31	; 0x2a
    4104:	e9 a7       	std	Y+41, r30	; 0x29
    4106:	f7 e0       	ldi	r31, 0x07	; 7
    4108:	fb a7       	std	Y+43, r31	; 0x2b
    410a:	e9 a5       	ldd	r30, Y+41	; 0x29
    410c:	fa a5       	ldd	r31, Y+42	; 0x2a
    410e:	00 80       	ld	r0, Z
    4110:	89 a5       	ldd	r24, Y+41	; 0x29
    4112:	9a a5       	ldd	r25, Y+42	; 0x2a
    4114:	01 96       	adiw	r24, 0x01	; 1
    4116:	9a a7       	std	Y+42, r25	; 0x2a
    4118:	89 a7       	std	Y+41, r24	; 0x29
    411a:	ef a1       	ldd	r30, Y+39	; 0x27
    411c:	f8 a5       	ldd	r31, Y+40	; 0x28
    411e:	00 82       	st	Z, r0
    4120:	8f a1       	ldd	r24, Y+39	; 0x27
    4122:	98 a5       	ldd	r25, Y+40	; 0x28
    4124:	01 96       	adiw	r24, 0x01	; 1
    4126:	98 a7       	std	Y+40, r25	; 0x28
    4128:	8f a3       	std	Y+39, r24	; 0x27
    412a:	9b a5       	ldd	r25, Y+43	; 0x2b
    412c:	91 50       	subi	r25, 0x01	; 1
    412e:	9b a7       	std	Y+43, r25	; 0x2b
    4130:	eb a5       	ldd	r30, Y+43	; 0x2b
    4132:	ee 23       	and	r30, r30
    4134:	51 f7       	brne	.-44     	; 0x410a <main+0x36>

	LCD_init();
    4136:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_init>
	UART_init(&UART_config);
    413a:	ce 01       	movw	r24, r28
    413c:	42 96       	adiw	r24, 0x12	; 18
    413e:	0e 94 83 15 	call	0x2b06	; 0x2b06 <UART_init>
	//	uint8 dummy = UART_recieveByte();
	//	UART_sendByte(1);
	// Timer1_setCallBackFunction(countOneSecond);
	while(1){
		char pass[7];
		if(Password_Set==0){
    4142:	80 91 06 01 	lds	r24, 0x0106
    4146:	90 91 07 01 	lds	r25, 0x0107
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	69 f4       	brne	.+26     	; 0x4168 <main+0x94>
			UART_sendByte(CREATE_PASSWORD);
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
			create_password(pass,ask_for_password);
    4154:	20 91 f2 00 	lds	r18, 0x00F2
    4158:	30 91 f3 00 	lds	r19, 0x00F3
    415c:	ce 01       	movw	r24, r28
    415e:	49 96       	adiw	r24, 0x19	; 25
    4160:	b9 01       	movw	r22, r18
    4162:	0e 94 c9 19 	call	0x3392	; 0x3392 <create_password>
    4166:	ed cf       	rjmp	.-38     	; 0x4142 <main+0x6e>
		}
		else{
			display_main_screen();
    4168:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <display_main_screen>
			uint8 choice='0';
    416c:	80 e3       	ldi	r24, 0x30	; 48
    416e:	89 8b       	std	Y+17, r24	; 0x11
			while(1){
				choice = KEYPAD_getPressedKey();
    4170:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    4174:	89 8b       	std	Y+17, r24	; 0x11
				if(choice == '+' || choice == '-'){
    4176:	89 89       	ldd	r24, Y+17	; 0x11
    4178:	8b 32       	cpi	r24, 0x2B	; 43
    417a:	19 f0       	breq	.+6      	; 0x4182 <main+0xae>
    417c:	89 89       	ldd	r24, Y+17	; 0x11
    417e:	8d 32       	cpi	r24, 0x2D	; 45
    4180:	b9 f7       	brne	.-18     	; 0x4170 <main+0x9c>
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	a8 ec       	ldi	r26, 0xC8	; 200
    4188:	b2 e4       	ldi	r27, 0x42	; 66
    418a:	8b 87       	std	Y+11, r24	; 0x0b
    418c:	9c 87       	std	Y+12, r25	; 0x0c
    418e:	ad 87       	std	Y+13, r26	; 0x0d
    4190:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4192:	6b 85       	ldd	r22, Y+11	; 0x0b
    4194:	7c 85       	ldd	r23, Y+12	; 0x0c
    4196:	8d 85       	ldd	r24, Y+13	; 0x0d
    4198:	9e 85       	ldd	r25, Y+14	; 0x0e
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	4a ef       	ldi	r20, 0xFA	; 250
    41a0:	54 e4       	ldi	r21, 0x44	; 68
    41a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	8f 83       	std	Y+7, r24	; 0x07
    41ac:	98 87       	std	Y+8, r25	; 0x08
    41ae:	a9 87       	std	Y+9, r26	; 0x09
    41b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41b2:	6f 81       	ldd	r22, Y+7	; 0x07
    41b4:	78 85       	ldd	r23, Y+8	; 0x08
    41b6:	89 85       	ldd	r24, Y+9	; 0x09
    41b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	40 e8       	ldi	r20, 0x80	; 128
    41c0:	5f e3       	ldi	r21, 0x3F	; 63
    41c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41c6:	88 23       	and	r24, r24
    41c8:	2c f4       	brge	.+10     	; 0x41d4 <main+0x100>
		__ticks = 1;
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	9e 83       	std	Y+6, r25	; 0x06
    41d0:	8d 83       	std	Y+5, r24	; 0x05
    41d2:	3f c0       	rjmp	.+126    	; 0x4252 <main+0x17e>
	else if (__tmp > 65535)
    41d4:	6f 81       	ldd	r22, Y+7	; 0x07
    41d6:	78 85       	ldd	r23, Y+8	; 0x08
    41d8:	89 85       	ldd	r24, Y+9	; 0x09
    41da:	9a 85       	ldd	r25, Y+10	; 0x0a
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	3f ef       	ldi	r19, 0xFF	; 255
    41e0:	4f e7       	ldi	r20, 0x7F	; 127
    41e2:	57 e4       	ldi	r21, 0x47	; 71
    41e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41e8:	18 16       	cp	r1, r24
    41ea:	4c f5       	brge	.+82     	; 0x423e <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    41f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	40 e2       	ldi	r20, 0x20	; 32
    41fa:	51 e4       	ldi	r21, 0x41	; 65
    41fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	bc 01       	movw	r22, r24
    4206:	cd 01       	movw	r24, r26
    4208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	9e 83       	std	Y+6, r25	; 0x06
    4212:	8d 83       	std	Y+5, r24	; 0x05
    4214:	0f c0       	rjmp	.+30     	; 0x4234 <main+0x160>
    4216:	88 ec       	ldi	r24, 0xC8	; 200
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	9c 83       	std	Y+4, r25	; 0x04
    421c:	8b 83       	std	Y+3, r24	; 0x03
    421e:	8b 81       	ldd	r24, Y+3	; 0x03
    4220:	9c 81       	ldd	r25, Y+4	; 0x04
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	f1 f7       	brne	.-4      	; 0x4222 <main+0x14e>
    4226:	9c 83       	std	Y+4, r25	; 0x04
    4228:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    422a:	8d 81       	ldd	r24, Y+5	; 0x05
    422c:	9e 81       	ldd	r25, Y+6	; 0x06
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	9e 83       	std	Y+6, r25	; 0x06
    4232:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4234:	8d 81       	ldd	r24, Y+5	; 0x05
    4236:	9e 81       	ldd	r25, Y+6	; 0x06
    4238:	00 97       	sbiw	r24, 0x00	; 0
    423a:	69 f7       	brne	.-38     	; 0x4216 <main+0x142>
    423c:	14 c0       	rjmp	.+40     	; 0x4266 <main+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    423e:	6f 81       	ldd	r22, Y+7	; 0x07
    4240:	78 85       	ldd	r23, Y+8	; 0x08
    4242:	89 85       	ldd	r24, Y+9	; 0x09
    4244:	9a 85       	ldd	r25, Y+10	; 0x0a
    4246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	9e 83       	std	Y+6, r25	; 0x06
    4250:	8d 83       	std	Y+5, r24	; 0x05
    4252:	8d 81       	ldd	r24, Y+5	; 0x05
    4254:	9e 81       	ldd	r25, Y+6	; 0x06
    4256:	9a 83       	std	Y+2, r25	; 0x02
    4258:	89 83       	std	Y+1, r24	; 0x01
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	9a 81       	ldd	r25, Y+2	; 0x02
    425e:	01 97       	sbiw	r24, 0x01	; 1
    4260:	f1 f7       	brne	.-4      	; 0x425e <main+0x18a>
    4262:	9a 83       	std	Y+2, r25	; 0x02
    4264:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(100);
					break;
				}

			}
			UART_sendByte(VALIDATE_PASSWORD);
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
			//_delay_ms(500);
			int verified = verify_user();
    426c:	0e 94 57 1e 	call	0x3cae	; 0x3cae <verify_user>
    4270:	88 2f       	mov	r24, r24
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	98 8b       	std	Y+16, r25	; 0x10
    4276:	8f 87       	std	Y+15, r24	; 0x0f

			if(verified==0){
    4278:	8f 85       	ldd	r24, Y+15	; 0x0f
    427a:	98 89       	ldd	r25, Y+16	; 0x10
    427c:	00 97       	sbiw	r24, 0x00	; 0
    427e:	31 f4       	brne	.+12     	; 0x428c <main+0x1b8>
				UART_sendByte(UART_ERROR);
    4280:	84 e0       	ldi	r24, 0x04	; 4
    4282:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
				displayError();
    4286:	0e 94 55 20 	call	0x40aa	; 0x40aa <displayError>
    428a:	5b cf       	rjmp	.-330    	; 0x4142 <main+0x6e>
			}
			else{
				LCD_clearScreen();
    428c:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Verified");
    4290:	2f ec       	ldi	r18, 0xCF	; 207
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	60 e0       	ldi	r22, 0x00	; 0
    4298:	a9 01       	movw	r20, r18
    429a:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_displayStringRowColumn>
				//_delay_ms(200);
				if(choice == '+'){
    429e:	89 89       	ldd	r24, Y+17	; 0x11
    42a0:	8b 32       	cpi	r24, 0x2B	; 43
    42a2:	31 f4       	brne	.+12     	; 0x42b0 <main+0x1dc>
					UART_sendByte(OPEN_DOOR);
    42a4:	82 e0       	ldi	r24, 0x02	; 2
    42a6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
					openCloseDoor();
    42aa:	0e 94 26 20 	call	0x404c	; 0x404c <openCloseDoor>
    42ae:	49 cf       	rjmp	.-366    	; 0x4142 <main+0x6e>
				}
				else if(choice == '-'){
    42b0:	89 89       	ldd	r24, Y+17	; 0x11
    42b2:	8d 32       	cpi	r24, 0x2D	; 45
    42b4:	09 f0       	breq	.+2      	; 0x42b8 <main+0x1e4>
    42b6:	45 cf       	rjmp	.-374    	; 0x4142 <main+0x6e>
					UART_sendByte(CREATE_PASSWORD);
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <UART_sendByte>
					char password[7];
					create_password(password, "Enter new pass:");
    42be:	ce 01       	movw	r24, r28
    42c0:	80 96       	adiw	r24, 0x20	; 32
    42c2:	28 ed       	ldi	r18, 0xD8	; 216
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	b9 01       	movw	r22, r18
    42c8:	0e 94 c9 19 	call	0x3392	; 0x3392 <create_password>
    42cc:	3a cf       	rjmp	.-396    	; 0x4142 <main+0x6e>

000042ce <__udivmodsi4>:
    42ce:	a1 e2       	ldi	r26, 0x21	; 33
    42d0:	1a 2e       	mov	r1, r26
    42d2:	aa 1b       	sub	r26, r26
    42d4:	bb 1b       	sub	r27, r27
    42d6:	fd 01       	movw	r30, r26
    42d8:	0d c0       	rjmp	.+26     	; 0x42f4 <__udivmodsi4_ep>

000042da <__udivmodsi4_loop>:
    42da:	aa 1f       	adc	r26, r26
    42dc:	bb 1f       	adc	r27, r27
    42de:	ee 1f       	adc	r30, r30
    42e0:	ff 1f       	adc	r31, r31
    42e2:	a2 17       	cp	r26, r18
    42e4:	b3 07       	cpc	r27, r19
    42e6:	e4 07       	cpc	r30, r20
    42e8:	f5 07       	cpc	r31, r21
    42ea:	20 f0       	brcs	.+8      	; 0x42f4 <__udivmodsi4_ep>
    42ec:	a2 1b       	sub	r26, r18
    42ee:	b3 0b       	sbc	r27, r19
    42f0:	e4 0b       	sbc	r30, r20
    42f2:	f5 0b       	sbc	r31, r21

000042f4 <__udivmodsi4_ep>:
    42f4:	66 1f       	adc	r22, r22
    42f6:	77 1f       	adc	r23, r23
    42f8:	88 1f       	adc	r24, r24
    42fa:	99 1f       	adc	r25, r25
    42fc:	1a 94       	dec	r1
    42fe:	69 f7       	brne	.-38     	; 0x42da <__udivmodsi4_loop>
    4300:	60 95       	com	r22
    4302:	70 95       	com	r23
    4304:	80 95       	com	r24
    4306:	90 95       	com	r25
    4308:	9b 01       	movw	r18, r22
    430a:	ac 01       	movw	r20, r24
    430c:	bd 01       	movw	r22, r26
    430e:	cf 01       	movw	r24, r30
    4310:	08 95       	ret

00004312 <__prologue_saves__>:
    4312:	2f 92       	push	r2
    4314:	3f 92       	push	r3
    4316:	4f 92       	push	r4
    4318:	5f 92       	push	r5
    431a:	6f 92       	push	r6
    431c:	7f 92       	push	r7
    431e:	8f 92       	push	r8
    4320:	9f 92       	push	r9
    4322:	af 92       	push	r10
    4324:	bf 92       	push	r11
    4326:	cf 92       	push	r12
    4328:	df 92       	push	r13
    432a:	ef 92       	push	r14
    432c:	ff 92       	push	r15
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	ca 1b       	sub	r28, r26
    433c:	db 0b       	sbc	r29, r27
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	09 94       	ijmp

0000434a <__epilogue_restores__>:
    434a:	2a 88       	ldd	r2, Y+18	; 0x12
    434c:	39 88       	ldd	r3, Y+17	; 0x11
    434e:	48 88       	ldd	r4, Y+16	; 0x10
    4350:	5f 84       	ldd	r5, Y+15	; 0x0f
    4352:	6e 84       	ldd	r6, Y+14	; 0x0e
    4354:	7d 84       	ldd	r7, Y+13	; 0x0d
    4356:	8c 84       	ldd	r8, Y+12	; 0x0c
    4358:	9b 84       	ldd	r9, Y+11	; 0x0b
    435a:	aa 84       	ldd	r10, Y+10	; 0x0a
    435c:	b9 84       	ldd	r11, Y+9	; 0x09
    435e:	c8 84       	ldd	r12, Y+8	; 0x08
    4360:	df 80       	ldd	r13, Y+7	; 0x07
    4362:	ee 80       	ldd	r14, Y+6	; 0x06
    4364:	fd 80       	ldd	r15, Y+5	; 0x05
    4366:	0c 81       	ldd	r16, Y+4	; 0x04
    4368:	1b 81       	ldd	r17, Y+3	; 0x03
    436a:	aa 81       	ldd	r26, Y+2	; 0x02
    436c:	b9 81       	ldd	r27, Y+1	; 0x01
    436e:	ce 0f       	add	r28, r30
    4370:	d1 1d       	adc	r29, r1
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	cd bf       	out	0x3d, r28	; 61
    437c:	ed 01       	movw	r28, r26
    437e:	08 95       	ret

00004380 <itoa>:
    4380:	fb 01       	movw	r30, r22
    4382:	9f 01       	movw	r18, r30
    4384:	e8 94       	clt
    4386:	42 30       	cpi	r20, 0x02	; 2
    4388:	c4 f0       	brlt	.+48     	; 0x43ba <itoa+0x3a>
    438a:	45 32       	cpi	r20, 0x25	; 37
    438c:	b4 f4       	brge	.+44     	; 0x43ba <itoa+0x3a>
    438e:	4a 30       	cpi	r20, 0x0A	; 10
    4390:	29 f4       	brne	.+10     	; 0x439c <itoa+0x1c>
    4392:	97 fb       	bst	r25, 7
    4394:	1e f4       	brtc	.+6      	; 0x439c <itoa+0x1c>
    4396:	90 95       	com	r25
    4398:	81 95       	neg	r24
    439a:	9f 4f       	sbci	r25, 0xFF	; 255
    439c:	64 2f       	mov	r22, r20
    439e:	77 27       	eor	r23, r23
    43a0:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__udivmodhi4>
    43a4:	80 5d       	subi	r24, 0xD0	; 208
    43a6:	8a 33       	cpi	r24, 0x3A	; 58
    43a8:	0c f0       	brlt	.+2      	; 0x43ac <itoa+0x2c>
    43aa:	89 5d       	subi	r24, 0xD9	; 217
    43ac:	81 93       	st	Z+, r24
    43ae:	cb 01       	movw	r24, r22
    43b0:	00 97       	sbiw	r24, 0x00	; 0
    43b2:	a1 f7       	brne	.-24     	; 0x439c <itoa+0x1c>
    43b4:	16 f4       	brtc	.+4      	; 0x43ba <itoa+0x3a>
    43b6:	5d e2       	ldi	r21, 0x2D	; 45
    43b8:	51 93       	st	Z+, r21
    43ba:	10 82       	st	Z, r1
    43bc:	c9 01       	movw	r24, r18
    43be:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <strrev>

000043c2 <strrev>:
    43c2:	dc 01       	movw	r26, r24
    43c4:	fc 01       	movw	r30, r24
    43c6:	67 2f       	mov	r22, r23
    43c8:	71 91       	ld	r23, Z+
    43ca:	77 23       	and	r23, r23
    43cc:	e1 f7       	brne	.-8      	; 0x43c6 <strrev+0x4>
    43ce:	32 97       	sbiw	r30, 0x02	; 2
    43d0:	04 c0       	rjmp	.+8      	; 0x43da <strrev+0x18>
    43d2:	7c 91       	ld	r23, X
    43d4:	6d 93       	st	X+, r22
    43d6:	70 83       	st	Z, r23
    43d8:	62 91       	ld	r22, -Z
    43da:	ae 17       	cp	r26, r30
    43dc:	bf 07       	cpc	r27, r31
    43de:	c8 f3       	brcs	.-14     	; 0x43d2 <strrev+0x10>
    43e0:	08 95       	ret

000043e2 <__udivmodhi4>:
    43e2:	aa 1b       	sub	r26, r26
    43e4:	bb 1b       	sub	r27, r27
    43e6:	51 e1       	ldi	r21, 0x11	; 17
    43e8:	07 c0       	rjmp	.+14     	; 0x43f8 <__udivmodhi4_ep>

000043ea <__udivmodhi4_loop>:
    43ea:	aa 1f       	adc	r26, r26
    43ec:	bb 1f       	adc	r27, r27
    43ee:	a6 17       	cp	r26, r22
    43f0:	b7 07       	cpc	r27, r23
    43f2:	10 f0       	brcs	.+4      	; 0x43f8 <__udivmodhi4_ep>
    43f4:	a6 1b       	sub	r26, r22
    43f6:	b7 0b       	sbc	r27, r23

000043f8 <__udivmodhi4_ep>:
    43f8:	88 1f       	adc	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	5a 95       	dec	r21
    43fe:	a9 f7       	brne	.-22     	; 0x43ea <__udivmodhi4_loop>
    4400:	80 95       	com	r24
    4402:	90 95       	com	r25
    4404:	bc 01       	movw	r22, r24
    4406:	cd 01       	movw	r24, r26
    4408:	08 95       	ret

0000440a <_exit>:
    440a:	f8 94       	cli

0000440c <__stop_program>:
    440c:	ff cf       	rjmp	.-2      	; 0x440c <__stop_program>
